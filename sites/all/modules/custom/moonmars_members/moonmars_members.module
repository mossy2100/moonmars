<?php
use \AstroMultimedia\MoonMars\Member;
use \AstroMultimedia\MoonMars\Channel;
use \AstroMultimedia\MoonMars\Group;
use \AstroMultimedia\MoonMars\Triumph;

/**
 * Implements hook_init().
 */
function moonmars_members_init() {
  // If we're at 'user', and the user is logged in, forward the person to their profile.
  // I don't want people using that path.
  if (user_is_logged_in() && request_path() == 'user') {
    drupal_goto(Member::loggedInMember()->alias());
  }

  // Add some JS:
  $module_path = drupal_get_path('module', 'moonmars_members');
  drupal_add_js("$module_path/js/avatar-tooltips.js");

  if (user_is_logged_in()) {
    global $user;
    drupal_add_js(array(
      'moonmars_members' => array(
        'username' => $user->name
      )
    ), 'setting');
    drupal_add_js("$module_path/js/set-username-menu.js");
  }

  // String to explain username constraints:
  global $moonmars_username_desc;
  $moonmars_username_desc = "Usernames may only contain letters, digits, hyphens and underscores (a-z, A-Z, 0-9, -_), and must be between " . MOONMARS_STAR_CODE_MIN_LENGTH . " and " . MOONMARS_STAR_CODE_MAX_LENGTH . " characters in length.";
}

/**
 * Implements hook_menu().
 *
 * Note we have to use 'user/%/*' menu paths here - 'member/%/*' don't work because they're built on aliases.
 */
function moonmars_members_menu() {
  $items = array();
  $items['profile'] = array(
    'page callback' => 'moonmars_members_profile',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%/follow'] = array(
    'page callback' => 'moonmars_members_follow',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['user/%/unfollow'] = array(
    'page callback' => 'moonmars_members_unfollow',
    'page arguments' => array(1),
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  // Edit forms:
  $items['user/%/edit/profile'] = array(
    'title' => 'Edit Profile',
    'page callback' => 'moonmars_members_edit_profile_form',
    'page arguments' => array(1),
    'access callback' => 'moonmars_members_access_private',
    'type' => MENU_CALLBACK,
  );
  $items['user/%/edit/links'] = array(
    'title' => 'Edit Links',
    'page callback' => 'moonmars_members_edit_links_form',
    'page arguments' => array(1),
    'access callback' => 'moonmars_members_access_private',
    'type' => MENU_CALLBACK,
  );
  $items['user/%/edit/notifications'] = array(
    'page callback' => 'moonmars_members_edit_nxn_prefs_form',
    'page arguments' => array(1),
    'access callback' => 'moonmars_members_access_private',
    'type' => MENU_CALLBACK,
  );
  
  // Search members form:
  $items['members'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moonmars_members_search_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Get the level roles, with the level number (which equals the rating multiplier) as keys.
 *
 * @return array
 */
function moonmars_members_levels() {
  return array(
    1 => 'asteroid',
    2 => 'dwarf planet',
    3 => 'terrestrial planet',
    4 => 'gas giant',
    5 => 'star'
  );
}

/**
 * Checks if the logged-in user is on one of their own pages.
 *
 * @return bool
 */
function moonmars_members_on_own_page() {
  // Get the logged-in member and the member whose page it is:
  $logged_in_member = Member::loggedInMember();
  $actor = moonmars_actors_get_actor_from_url();
  return $logged_in_member && $actor && $actor->equals($logged_in_member);
}

/**
 * Checks if we're on a member page.
 *
 * @return bool
 */
function moonmars_members_is_member_page() {
  $actor = moonmars_actors_get_actor_from_url();
  return $actor && ($actor instanceof Member);
}

/**
 * Access callback for private member pages.
 *
 * @return bool
 */
function moonmars_members_access_private() {
  $logged_in_member = Member::loggedInMember();
  return moonmars_members_is_member_page() && $logged_in_member && ($logged_in_member->isSuperuser() || $logged_in_member->isAdmin() || moonmars_members_on_own_page());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Forms

/**
 * Implements hook_form_alter().
 */
function moonmars_members_form_alter(&$form, &$form_state, $form_id) {
  // Check for relevant form_ids:
  if (!in_array($form_id, array('user_register_form', 'user_profile_form'))) {
    return;
  }

  global $moonmars_username_desc;

  // Common JS:
  $module_path = drupal_get_path('module', 'moonmars_members');
  $form['#attached']['js'][] = "$module_path/js/moon-or-mars.js";
  $form['#attached']['js'][] = moonmars_stars_tag_prefixes();
  $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_stars') . "/js/star-tag-check.js";
  $form['#attached']['js'][] = "$module_path/js/member-name-check.js";

  switch ($form_id) {
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Registration form
    case 'user_register_form':

      // Change the title:
      drupal_set_title("Join moonmars.com!");

      // Update username field description re valid characters:
      $form['account']['name']['#description'] = $moonmars_username_desc;

      // Move "moon or mars" to the account fieldset:
      $form['account']['field_moon_or_mars'] = $form['field_moon_or_mars'];
      unset($form['field_moon_or_mars']);

      // Remove location fieldset description, and province and city fields:
      unset($form['field_user_location'][LANGUAGE_NONE][0]['#description']);
      $form['field_user_location'][LANGUAGE_NONE][0]['#location_settings']['form']['fields']['province']['collect'] = 0;
      $form['field_user_location'][LANGUAGE_NONE][0]['#location_settings']['form']['fields']['city']['collect'] = 0;

      // Move location to the account fieldset:
      $form['account']['field_user_location'] = $form['field_user_location'];
      unset($form['field_user_location']);

      // Site rules:
      $form['rules'] = array(
        '#type' => 'fieldset',
        '#title' => 'Rules',
      );
      $form['rules']['text'] = array(
        '#markup' => "
  <div id='site-rules'>
    <p>This is not legal stuff. Please review these and make sure you agree before proceeding.</p>
    <ul>
      <li>Be nice to everyone, regardless of age, religion, race, gender, intelligence level, or political or planetary affiliation.</li>
      <li>Be humble and willing to learn from others, regardless of how brilliant and qualified you think you are.</li>
      <li>Be patient, helpful and willing to teach. Space will probably be settled by people younger than you. Teach them.</li>
      <li>No lying, cheating or bullying. Treat others how you like to be treated.</li>
      <li>Be creative and productive. This is not simply an online hangout. We're here to make things happen.</li>
      <li>No porn or other offensive content. In fact, please don't share anything that isn't related to space.</li>
      <li>Communicate clearly. Say what you mean, and take the time to use proper punctuation, spelling and grammar.</li>
      <li>Use English. It may not be perfect, but it's become the <i>lingua franca</i> of Earth, and of the scientific and space community. If you aren't great at English, learn more and practice, and don't be afraid to ask for help. It will be worthwhile to you, and the community.</li>
      <li>Please refrain from swearing/cursing. It can be funny, but usually there's a more intelligent way to express what you mean.</li>
      <li>Commit wholeheartedly to our shared goal of building settlements on the Moon and Mars.</li>
      <li>Help to make this a positive and successful website and community.</li>
    </ul>
  </div>
  ",
      );
      $form['rules']['agree'] = array(
        '#type' => 'checkbox',
        '#title' => "I agree to the Rules.",
        '#required' => TRUE,
      );

      // Add an after_build handler:
      $form['#after_build'][] = 'moonmars_members_user_register_form_after_build';

      // Add a validation handler. Need to put this first so that our username rules get checked before Drupal core's.
      array_unshift($form['#validate'], 'moonmars_members_user_register_form_validate');

      // Order fields:
      $weight = 0;
      $form['account']['#weight'] = $weight++;
      $form['account']['name']['#weight'] = $weight++;
      $form['account']['mail']['#weight'] = $weight++;
      $form['account']['field_moon_or_mars']['#weight'] = $weight++;
      $form['account']['field_user_location']['#weight'] = $weight++;
      $form['rules']['#weight'] = $weight++;
      $form['rules']['text']['#weight'] = $weight++;
      $form['rules']['agree']['#weight'] = $weight++;
      break;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // User profile form
    case 'user_profile_form':
      // Add JS:
      $form['#attached']['js'][] = "$module_path/js/profile-form.js";

      // Update username field description re valid characters:
      $form['account']['name']['#description'] = $moonmars_username_desc;
      $form['account']['#type'] = 'fieldset';
      $form['account']['#title'] = "Account details";

      // Hidden field to contain the uid:
      $form['uid'] = array(
        '#type' => 'hidden',
        '#value' => $form['#user']->uid,
        '#attributes' => array('id' => 'uid'),
      );

      // Color icons for background color:
      $form['comments_color'] = array(
        '#markup' => moonmars_color_icons2($form['field_background_color'][LANGUAGE_NONE][0]['rgb']['#default_value']),
      );

      // Hide the colour fields we aren't using any more:
      unset($form['field_border_color']);
      unset($form['field_text_color']);

      // Hide the score for everyone except me:
      $logged_in_member = Member::loggedInMember();
      if (!$logged_in_member->isSuperuser()) {
        unset($form['field_score']);
      }

      // Remove location fieldset description:
      unset($form['field_user_location'][LANGUAGE_NONE][0]['#description']);

      // Add an after_build handler:
      $form['#after_build'][] = 'moonmars_members_user_profile_form_after_build';

      // Add a validation handler. Need to put this first so that our username rules get checked before Drupal core's.
      array_unshift($form['#validate'], 'moonmars_members_user_profile_form_validate');

      // Add a submit handler:
      $form['#submit'][] = 'moonmars_members_user_profile_form_submit';

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // Order fields:
      $weight = 0;

      // Account details group:
      $form['#fieldgroups']['group_account']->weight = $weight++;
      $form['account']['#weight'] = $weight++;
      $form['account']['name']['#weight'] = $weight++;
      $form['account']['mail']['#weight'] = $weight++;
      $form['account']['current_pass']['#weight'] = $weight++;
      $form['account']['pass']['#weight'] = $weight++;
      $form['account']['roles']['#weight'] = $weight++;
      $form['account']['status']['#weight'] = $weight++;
      $form['account']['notify']['#weight'] = $weight++;

      // Personal details group:
      $form['#fieldgroups']['group_personal']->weight = $weight++;
      $form['picture']['#weight'] = $weight++;
      $form['field_first_name']['#weight'] = $weight++;
      $form['field_last_name']['#weight'] = $weight++;
      $form['field_date_of_birth']['#weight'] = $weight++;
      $form['field_gender']['#weight'] = $weight++;
      $form['field_mobile_phone']['#weight'] = $weight++;
      $form['field_skype']['#weight'] = $weight++;
      $form['field_bio']['#weight'] = $weight++;
      $form['field_moon_or_mars']['#weight'] = $weight++;

      // Location group:
      $form['#fieldgroups']['group_location']->weight = $weight++;
      $form['field_user_location']['#weight'] = $weight++;
      $form['timezone']['#weight'] = $weight++;

      // Preferences group:
      $form['#fieldgroups']['group_preferences']->weight = $weight++;
      $form['signature']['#weight'] = $weight++;
      $form['contact']['#weight'] = $weight++;
      break;
  }
}

/**
 * Validation handler for the user registration form.
 */
function moonmars_members_user_register_form_validate($form, &$form_state) {
  if (!moonmars_stars_valid_tag($form_state['values']['name'])) {
    global $moonmars_username_desc;
    form_set_error('name', $moonmars_username_desc);
  }
}

/**
 * After_build handler for the user register form.
 *
 * @param array $form
 * @return array
 */
function moonmars_members_user_register_form_after_build($form) {
  // Make some changes to the location fields that we can't do in hook_form_alter().
  $form['account']['field_user_location'][LANGUAGE_NONE][0]['country']['#description'] = "Select your country";
  return $form;
}

  /**
 * After_build handler for the user account/profile form.
 *
 * @param array $form
 * @return array
 */
function moonmars_members_user_profile_form_after_build($form) {
  // Reformat the timezone options:
  $rx = "/([^\:]+)\:([^\+]+)([\+\-]\d{2})(\d{2})/";
  foreach ($form['timezone']['timezone']['#options'] as &$option) {
    $n = preg_match($rx, $option, $matches);
    if ($n) {
      $option = $matches[1] . ' ' . $matches[3] . ':' . $matches[4];
    }
  }

  // Make some changes to the location fields that we can't do in hook_form_alter().
  $form['field_user_location'][LANGUAGE_NONE][0]['country']['#description'] = "Select your country";
  $form['field_user_location'][LANGUAGE_NONE][0]['province']['#description'] = "Select your state or province";
  $form['field_user_location'][LANGUAGE_NONE][0]['city']['#description'] = "Enter your city";
  unset($form['field_user_location'][LANGUAGE_NONE][0]['delete_location']);
  $form['field_user_location'][LANGUAGE_NONE][0]['timezone'] = $form['timezone']['timezone'];
  unset($form['timezone']);

  return $form;
}

/**
 * Validation handler for the user account/profile form.
 */
function moonmars_members_user_profile_form_validate($form, &$form_state) {
  if (!moonmars_stars_valid_tag($form_state['values']['name'])) {
    global $moonmars_username_desc;
    form_set_error('name', $moonmars_username_desc);
  }
}

/**
 * Submit handler for the user account/profile form.
 */
function moonmars_members_user_profile_form_submit($form, &$form_state) {
  // Get the member whose profile is being updated:
  $member = Member::create($form_state['user']);

  // The first time a member's profile is updated, send a new-member triumph.
  // The reason why we don't do this if the user account is created via the user_register form,
  // or when they confirm their email address,
  // is because if we send new-member notifications at those times they won't contain much interesting info.
  // The first time they update their profile, however (which should be straight after they confirm their email address)
  // will probably when they enter most of their personal info.
  // Then we send the nxn with the interesting info, so people will know whether they want to follow the new member
  // or not.
  // Note that the person updating the profile does not have to be the profile owner (i.e. could be an admin manually
  // creating a new member account.)
  if (!$member->newMemberTriumphCreated()) {
    Triumph::newMember($member);

    // This is a good time to add the new member to %moonmars-news because we only want to add them once.
    // This code can't be called every time the member profile is updated, because they might leave the group and will
    // not want to be automatically re-added every time they update their profile.
    $moonmars_news_group = Group::findByTag('moonmars-news');
    $member->joinGroup($moonmars_news_group, FALSE);
  }
  elseif ($member->isLoggedInUser()) {
    // Only send an updateMember nxn if the member is updating their own profile, i.e., not if an admin is doing it.
    // This is because an administrator probably won't be adding interesting info - they'll most likely just be
    // updating a password or something.
    Triumph::updateMember($member);
  }

  // Go back to the user's profile:
  $form_state['redirect'] = $member->alias();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Member edit forms

/**
 * Display form for editing profile.
 *
 * @param int|string $user
 * @return array
 */
function moonmars_members_edit_profile_form($user) {
  $member = Member::create($user);
  drupal_set_title(t('Edit @username', array('@username' => $member->tag(NULL, TRUE))), PASS_THROUGH);
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'user') . '/user.pages.inc';
  return drupal_get_form('user_profile_form', $member->user());
}

/**
 * Display form for editing links.
 *
 * @param int|string $user
 * @return array
 */
function moonmars_members_edit_links_form($user) {
  $member = Member::create($user);
  $channel = $member->channel();
  drupal_set_title(t('<em>@username:</em> Edit links', array('@username' => $member->name())), PASS_THROUGH);
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'node') . '/node.pages.inc';
  return drupal_get_form('channel_node_form', $channel->node());
}

/**
 * Display form for editing nxn prefs.
 *
 * @param int|string $user
 * @return array
 */
function moonmars_members_edit_nxn_prefs_form($user) {
  $member = Member::create($user);
  drupal_set_title(t('<em>@username:</em> Edit notification preferences', array('@username' => $member->name())), PASS_THROUGH);
  return drupal_get_form('moonmars_nxn_prefs_form');
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Follow/unfollow

/**
 * Create a follows relationship between the logged in user and the user specified in the parameter.
 *
 * @param $followee_uid
 */
function moonmars_members_follow($followee_uid) {
  $follower = Member::loggedInMember();

  if ($follower && $followee_uid) {
    $followee = Member::create($followee_uid);

    if ($follower->follows($followee)) {
      drupal_set_message(t("You are already following %user2_name.", array('%user2_name' => $followee->name())));
    }
    else {
      // Follow the member:
      $follower->follow($followee);

      // Tell the user:
      drupal_set_message(t("You are now following %user2_name.", array('%user2_name' => $followee->name())));
    }
  }

  drupal_goto($followee->alias());
}

/**
 * Removes a follows relationship between the logged in user and the user specified in the parameter.
 *
 * @param $followee_uid
 */
function moonmars_members_unfollow($followee_uid) {
  $follower = Member::loggedInMember();

  if ($follower && $followee_uid) {
    $followee = Member::create($followee_uid);

    if ($follower->follows($followee)) {
      // Unfollow the member:
      $follower->unfollow($followee);

      // Tell the user:
      drupal_set_message(t("You are no longer following %user2_name.", array('%user2_name' => $followee->name())));
    }
    else {
      drupal_set_message(t("You weren't following %user2_name.", array('%user2_name' => $followee->name())));
    }
  }

  drupal_goto($followee->alias());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Redirects

/**
 * Go to the logged-in member's profile.
 */
function moonmars_members_profile() {
  drupal_goto(Member::loggedInMember()->alias());
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blocks

/**
 * Render some member avatars in a sidebar block.
 *
 * @param int $n_display
 *   The maximum number of members to display in the block.
 * @param array $members
 *   The members.
 * @return string
 */
function moonmars_members_render_avatars(array $members, $max_n_display = 12, $view_all_link = NULL) {
  // Member count:
  $html = "<div class='member-count'>\n";
  $html .= format_plural(count($members), '1 member', '@count members');
  $html .= "</div>";

  // Avatars for most recently joined members:
  $html .= "<ul class='member-grid clearfix'>\n";
  $n = 0;
  foreach ($members as $member) {
    $html .= "<li>\n";
    $html .= $member->avatarTooltip();
    $html .= "</li>\n";

    // Limit the number displayed:
    $n++;
    if ($n == $max_n_display) {
      break;
    }
  }
  $html .= "</ul>\n";

  if ($view_all_link) {
    // @todo put the "View all" link here.
  }

  return $html;
}

/**
 * Implementation of hook_block_info().
 */
function moonmars_members_block_info() {
  $blocks['member-menu'] = array(
    'info' => t('Member menu'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['member-groups'] = array(
    'info' => t("Member's groups"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-followers'] = array(
    'info' => t("Member's followers"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-followees'] = array(
    'info' => t("Member's followees"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-edit-tabs'] = array(
    'info' => t("Member edit tabs"),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function moonmars_members_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'member-menu':
      $block['subject'] = NULL;
      $block['content'] = moonmars_members_menu_block();
      break;

    case 'member-groups':
      $block['subject'] = 'Groups';
      $block['content'] = moonmars_members_groups_block();
      break;

    case 'member-followers':
      $block['subject'] = 'Followers';
      $block['content'] = moonmars_members_followers_block();
      break;

    case 'member-followees':
      $block['subject'] = 'Followees';
      $block['content'] = moonmars_members_followees_block();
      break;

    case 'member-edit-tabs':
      $block['subject'] = NULL;
      $block['content'] = moonmars_members_edit_tabs_block();
      break;
  }
  return $block;
}

/**
 * Generate HTML for the member menu block.
 *
 * @return string
 */
function moonmars_members_menu_block() {
  global $user;

  // Check we're on a member page:
  $page_member = moonmars_actors_get_actor_from_url();
  if (!$page_member || !($page_member instanceof Member)) {
    return '';
  }

  // Check the member is logged in:
  if (!user_is_logged_in()) {
    return "<p>Please <a href='/user/login'>login</a> or <a href='/register'>register</a> to follow this user.</p>";
  }

  // Get the current member and check if they're looking at their own profile:
  $logged_in_member = Member::loggedInMember();
  $own_profile = $page_member->equals($logged_in_member);

  // Member profile menu links:
  $html = "<ul id='member-menu' class='menu'>";
  if ($own_profile) {
    // Links for when you're on your own profile.
    // Profile:
    $html .= "<li>" . l('Profile', $page_member->alias()) . "</li>";
    // View notifications:
    $html .= "<li>" . l('Notifications', $page_member->alias() . '/notifications') . "</li>";
  }
  else {
    // Links for when you're on someone else's profile.
    // Follow/unfollow link:
    if ($logged_in_member->follows($page_member)) {
      $follow_link = l('Unfollow', $page_member->alias() . '/unfollow');
    }
    else {
      $follow_link = l('Follow', $page_member->alias() . '/follow');
    }
    $html .= "<li>$follow_link</li>";

    // Contact link:
    if ($page_member->data('contact')) {
      $html .= "<li>" . l('Contact', $page_member->alias() . '/contact') . "</li>";
    }
  }
  $html .= "</ul>";

  // Edit links, for if the member is on their own profile page, or for admins.
  if ($own_profile || user_access('administer users', $user)) {
    $html .= "
      <div id='member-edit-menu'>
        <h4>Edit:</h4>
        <ul>
          <li>" . l('Profile', $page_member->editAlias() . '/profile') . "</li>
          <li>" . l('Links', $page_member->editAlias() . '/links') . "</li>
          <li>" . l('Notifications', $page_member->editAlias() . '/notifications') . "</li>
        </ul>
      </div>";
  }

  return $html;
}

/**
 * Generate HTML for a member's most recent groups.
 *
 * @return string
 */
function moonmars_members_groups_block() {
  // Get the member from the URL:
  $actor = moonmars_actors_get_actor_from_url();
  $member = ($actor instanceof Member) ? $actor : (($actor instanceof Channel) ? $actor->star() : FALSE);
  if (!($member instanceof Member)) {
    return '';
  }

  // Get the member's groups.
  $groups = $member->groups();

  // Generate HTML:
  $view_all_link = l('View all', 'groups', array('query' => array('member' => $member->name())));
  $html = moonmars_groups_render_block($groups, 4, $view_all_link);

  return $html;
}

/**
 * Get HTML for the followers block.
 *
 * @return string
 */
function moonmars_members_followers_block() {
  // Get the member from the URL:
  $actor = moonmars_actors_get_actor_from_url();
  $member = ($actor instanceof Member) ? $actor : (($actor instanceof Channel) ? $actor->star() : FALSE);
  if (!($member instanceof Member)) {
    return '';
  }

  // Generate HTML:
  $html = moonmars_members_render_avatars($member->followers());

  return $html;
}

/**
 * Get HTML for the followees block.
 *
 * @return string
 */
function moonmars_members_followees_block() {
  // Get the member from the URL:
  $actor = moonmars_actors_get_actor_from_url();
  $member = ($actor instanceof Member) ? $actor : (($actor instanceof Channel) ? $actor->star() : FALSE);
  if (!($member instanceof Member)) {
    return '';
  }

  // Generate HTML:
  $html = moonmars_members_render_avatars($member->followees());

  return $html;
}

/**
 * Get the string for the following column in the Members table.
 * @todo update this to a checkbox, see how group search works.
 *
 * @param $uid
 * @return string
 */
function moonmars_members_following($uid) {
  $logged_in_member = Member::loggedInMember();
  $row_member = Member::create($uid);
  return (!$logged_in_member || $logged_in_member->equals($row_member)) ? 'N/A' : ($logged_in_member->follows($row_member) ? 'Yes' : 'No');
}

/**
 * Create the member edit menu.
 */
function moonmars_members_edit_tabs_block() {
  $page_member = moonmars_actors_get_actor_from_url();
  if (!$page_member instanceof Member) {
    return FALSE;
  }

  $request = request_path();
  $edit_base = $page_member->alias() . '/edit';

  $tabs = array(
    "$edit_base/profile" => 'Profile',
    "$edit_base/links" => 'Links',
    "$edit_base/notifications" => 'Notifications',
  );

  $html = "<ul id='member-edit-tabs'>";
  foreach ($tabs as $url => $label) {
    $html .= "<li><a href='/$url'";
    if ($request == $url) {
      $html .= " class='selected'";
    }
    $html .= ">$label</a></li>";
  }
  $html .= "</ul>";

  return $html;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Notifications

/**
 * Implements hook_mail().
 */
function moonmars_members_mail($key, &$message, $params) {
  switch ($key) {
    case 'notification':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['summary'];
      $message['body'][] = $params['text'];
      $message['headers']['Content-Type'] = "text/html; charset='utf-8';";
      break;
  }
}

/**
 * List a member's notifications.
 *
 * @return string
 */
function moonmars_members_notifications($uid) {
  // Make sure the user is looking at their own notifications and not someone else's.
  global $user;
  if ($user->uid != $uid) {
    drupal_access_denied();
  }

  drupal_set_title('Your Notifications');
  return views_embed_view('notifications', 'page', $uid);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Search

/**
 * Search members.
 *
 * @param array $params
 * @return array
 */
function moonmars_members_search($params = array()) {
  // Reset the search params:
  $_SESSION['member_search']['params'] = array();

  // Create the search query:
  $q = db_select('view_member', 'vm')
    ->fields('vm', array('uid'))
    ->condition('uid', 0, '!=');

  // Text:
  if (isset($params['text'])) {
    $text = trim($params['text']);
    if ($text) {
      $words = explode(' ' , $text);
      $or = db_or();
      foreach ($words as $word) {
        $word = trim($word);
        if ($word) {
          $or = $or
            ->condition('name', "%$word%", 'LIKE')
            ->condition('full_name', "%$word%", 'LIKE')
            ->condition('bio', "%$word%", 'LIKE');
        }
      }
      $q->condition($or);
      $_SESSION['member_search']['params']['text'] = $text;
    }
  }

  // Followee:
  if (isset($params['followee'])) {
    $followee = trim($params['followee']);
    if ($followee) {
      // Create the subquery:
      $subquery = db_select('view_followers', 'vf')
        ->fields('vf', array('follower_uid'))
        ->condition('followee_name', $followee);

      // Add the condition:
      $follows = isset($params['follows']) ? ((bool) $params['follows']) : TRUE;
      $q->condition('uid', $subquery, $follows ? 'IN' : 'NOT IN');

      // Add the cleaned parameters to the session array:
      $_SESSION['member_search']['params']['follows'] = $follows;
      $_SESSION['member_search']['params']['followee'] = $followee;
    }
  }

  // Follower:
  if (isset($params['follower'])) {
    $follower = trim($params['follower']);
    if ($follower) {
      // Create the subquery:
      $subquery = db_select('view_followers', 'vf2')
        ->fields('vf2', array('followee_uid'))
        ->condition('follower_name', $follower);

      // Add the condition:
      $is_followed_by = isset($params['is_followed_by']) ? ((bool) $params['is_followed_by']) : TRUE;
      $q->condition('uid', $subquery, $is_followed_by ? 'IN' : 'NOT IN');

      // Add the cleaned parameters to the session array:
      $_SESSION['member_search']['params']['is_followed_by'] = $is_followed_by;
      $_SESSION['member_search']['params']['follower'] = $follower;
    }
  }

  // Group membership:
  if (isset($params['group'])) {
    $group = trim($params['group']);
    if ($group) {
      // Create the subquery:
      $subquery = db_select('view_group_has_member', 'vm')
        ->fields('vm', array('member_uid'))
        ->condition('group_tag', $group);

      // Add the condition:
      $is_member = isset($params['is_member']) ? ((bool) $params['is_member']) : TRUE;
      $q->condition('uid', $subquery, $is_member ? 'IN' : 'NOT IN');

      // Add the cleaned parameters to the session array:
      $_SESSION['member_search']['params']['is_member'] = $is_member;
      $_SESSION['member_search']['params']['group'] = $group;
    }
  }

  // Order by title:
  $q->orderBy('name');

  // Get the results:
  $rs = $q->execute();
  $results = array();
  foreach ($rs as $rec) {
    $results[] = $rec->uid;
  }

  return $results;
}

/**
 * Create the member search form, including the search results.
 *
 * @return array
 */
function moonmars_members_search_form() {
  // Search using parameters from either the POST or GET array, if either is provided.
  $params = NULL;

  if (isset($_SESSION['member_search']['redo_search']) && $_SESSION['member_search']['redo_search']) {
    $params = $_SESSION['member_search']['params'];
    unset($_SESSION['member_search']['redo_search']);
  }
  elseif ($_POST && isset($_POST['op']) && $_POST['op'] == 'Search') {
    $params = $_POST;
  }
  else {
    $params = $_GET;
    unset($params['q']);
    unset($params['page']);
  }

  // If we have search params then do a new search, otherwise we'll just display results from the previous search.
  if ($params) {
    $_SESSION['member_search']['results'] = moonmars_members_search($params);
  }

  // Get the page number:
  $_SESSION['member_search']['page'] = isset($_GET['page']) ? ((int) $_GET['page']) : 0;

  // Clamp the page number:
  $n_pages = isset($_SESSION['member_search']['results']) ? (ceil(count($_SESSION['member_search']['results']) / MOONMARS_STAR_SEARCH_PAGE_SIZE)) : 0;
  if ($_SESSION['member_search']['page'] < 0) {
    $_SESSION['member_search']['page'] = 0;
  }
  elseif ($n_pages && $_SESSION['member_search']['page'] >= $n_pages) {
    $_SESSION['member_search']['page'] = $n_pages - 1;
  }

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Create the form:
  $form = array();
  $form['title'] = array(
    '#value' => "<h2>Search members</h2>",
  );
  $form['search'] = array(
    '#type' => 'fieldset',
  );
  $form['search']['text'] = array(
    '#type' => 'textfield',
    '#title' => "Name/bio",
    '#description' => "Enter part of the username, full name or bio of the member.",
    '#default_value' => isset($_SESSION['member_search']['params']['text']) ? $_SESSION['member_search']['params']['text'] : '',
  );
  $form['search']['follows'] = array(
    '#prefix' => "<div class='member-search-follower'><label class='member-search'>Followers</label>",
    '#title' => "Find members that",
    '#type' => 'radios',
    '#options' => array(
      1 => "follow",
      0 => "do not follow",
    ),
    '#default_value' => isset($_SESSION['member_search']['params']['follows']) ? ((int) $_SESSION['member_search']['params']['follows']) : 1,
  );
  $form['search']['followee'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($_SESSION['member_search']['params']['followee']) ? $_SESSION['member_search']['params']['followee'] : '',
    '#suffix' => "<input class='button-link' type='button' value='me' onclick='setFolloweeToMe()'></div>",
  );
  $form['search']['is_followed_by'] = array(
    '#prefix' => "<div class='member-search-followee'><label class='member-search'>Followees</label>",
    '#title' => "Find members that",
    '#type' => 'radios',
    '#options' => array(
      1 => "are",
      0 => "are not followed by",
    ),
    '#default_value' => isset($_SESSION['member_search']['params']['is_followed_by']) ? ((int) $_SESSION['member_search']['params']['is_followed_by']) : 1,
  );
  $form['search']['follower'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($_SESSION['member_search']['params']['follower']) ? $_SESSION['member_search']['params']['follower'] : '',
    '#suffix' => "<input class='button-link' type='button' value='me' onclick='setFollowerToMe()'></div>",
  );
  $form['search']['is_member'] = array(
    '#prefix' => "<div class='member-search-group'><label class='member-search'>Group</label>",
    '#title' => "Find members that",
    '#type' => 'radios',
    '#options' => array(
      1 => "are",
      0 => "are not members of",
    ),
    '#default_value' => isset($_SESSION['member_search']['params']['is_member']) ? ((int) $_SESSION['member_search']['params']['is_member']) : 1,
  );
  $form['search']['group'] = array(
    '#type' => 'textfield',
    '#autocomplete_path' => 'groups/autocomplete',
    '#default_value' => isset($_SESSION['member_search']['params']['group']) ? $_SESSION['member_search']['params']['group'] : '',
    '#suffix' => "</div>",
  );
  $form['search']['clear'] = array(
    '#prefix' => "<div id='search-buttons'>",
    '#markup' => "<input type='button' class='form-button clear-button' value='Clear' onclick='clearMemberSearchForm()'>",
  );
  $form['search']['submit'] = array(
    '#type'  => 'submit',
    '#value' => "Search",
    '#suffix' => "</div>",
  );

  // If we have a current member, show checkboxes for the members so they bulk join/leave:
  if ($logged_in_member) {
    $c = 0;
    for ($i = 0; $i < MOONMARS_STAR_SEARCH_PAGE_SIZE; $i++) {
      $n = $_SESSION['member_search']['page'] * MOONMARS_STAR_SEARCH_PAGE_SIZE + $i;

      // In case an overly high page number is passed as a query string param:
      if (!isset($_SESSION['member_search']['results'][$n])) {
        break;
      }

      $member_uid = $_SESSION['member_search']['results'][$n];
      $member = Member::create($member_uid);

      // Follow/unfollow checkbox:
      if ($member_uid != $logged_in_member->uid()) {
        $form['member']["follower-of-member-$member_uid"] = array(
          '#type' => 'checkbox',
          '#default_value' => $logged_in_member->follows($member),
        );
        $c++;
      }
    }

    if ($c) {
      $form['update'] = array(
        '#type' => 'submit',
        '#value' => "Update followees",
        '#submit' => array('moonmars_members_search_form_update'),
      );
    }
  }

  $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_members') . "/js/member-search.js";
  $form['#theme'] = 'moonmars_members_search_form';

  return $form;
}

/**
 * Submit handler for members search form.
 *
 * @param $form
 * @param $form_state
 */
function moonmars_members_search_form_update($form, &$form_state) {
  $logged_in_member = Member::loggedInMember();

  // Look for "follower-of-member" checkboxes:
  foreach ($form_state['values'] as $key => $value) {
    if (beginsWith($key, 'follower-of-member')) {
      $member_uid = (int) substr($key, strlen('follower-of-member-'));
      $member = Member::create($member_uid);

      if ($value && !$logged_in_member->follows($member)) {
        // If they're not following the member but want to be, create follow relationship:
        $logged_in_member->follow($member);
        drupal_set_message(t("You are now following %user2_name.", array('%user2_name' => $member->name())));
      }
      elseif (!$value && $logged_in_member->follows($member)) {
        // If they're following a member but don't want to be, remove the follow relationship:
        $logged_in_member->unfollow($member);
        drupal_set_message(t("You are no longer following %user2_name.", array('%user2_name' => $member->name())));
      }

    }
  }

  drupal_set_message("Your followees have been updated.");

  // Set the flag to redo the search:
  $_SESSION['member_search']['redo_search'] = TRUE;

  $form_state['redirect'] = array(
    'members',
    array(
      'query' => array(
        'page' => $_SESSION['member_search']['page'],
      ),
    ),
  );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Theming

/**
 * Implements hook_theme().
 *
 * @return array
 */
function moonmars_members_theme() {
  return array(
    'moonmars_members_search_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme the member search form.
 *
 * @param $vars
 * @return string
 */
function theme_moonmars_members_search_form($vars) {
  $form = $vars['form'];
  $html = '';
  $html .= render($form['search']);
  $html .= "<h3>Search Results</h3>";

  // Create a table of results:
  $header = array(
    array(
      'data' => 'Member',
      'class' => array('search-col-star'),
    ),
    array(
      'data' => 'Bio',
      'class' => array('search-col-desc'),
    ),
  );

  // If the user is logged in, add the member column:
  $logged_in_member = Member::loggedInMember();
  if ($logged_in_member) {
    $header[] =
      array(
        'data'  => "<input type='checkbox' id='members-select-all'> Following?",
        'class' => array('search-col-follower'),
      );
  }

  $n_members = isset($_SESSION['member_search']['results']) ? count($_SESSION['member_search']['results']) : 0;
  $html .= "<p>" . format_plural($n_members, "1 member matches", "@count members match") . " your search.</p>";

  if (isset($_SESSION['member_search']['results']) && $_SESSION['member_search']['results']) {

    // Search results:
    $rows = array();

    for ($i = 0; $i < MOONMARS_STAR_SEARCH_PAGE_SIZE; $i++) {
      $n = $_SESSION['member_search']['page'] * MOONMARS_STAR_SEARCH_PAGE_SIZE + $i;

      // In case an overly high page number is passed as a querystring param:
      if (!isset($_SESSION['member_search']['results'][$n])) {
        break;
      }

      $member_uid = $_SESSION['member_search']['results'][$n];
      $member = Member::create($member_uid);

      $bio = "<div class='star-desc'>" . $member->bio() . "</span>";

      // Create the row:
      $row = array(
        array(
          'data'  => "<div class='star-link'>" . l($member->avatar() . '<br>' . $member->name(), $member->alias(), array('html' => TRUE)) . "</div>",
          'class' => array('search-col-star'),
        ),
        array(
          'data'  => $bio,
          'class' => array('search-col-desc'),
        ),
      );

      // If the user is logged in, add the member column:
      if ($logged_in_member) {
        $row[] = array(
          'data' => $form['member']["follower-of-member-$member_uid"] ? render($form['member']["follower-of-member-$member_uid"]) : 'N/A',
          'class' => array('search-col-star'),
        );
      }

      // Add the row to the table:
      $rows[] = $row;
    }

    // Render the table of members:
    $html .= theme('table', array('header' => $header, 'rows' => $rows));

    // Update button:
    $html .= drupal_render_children($form);

    // Pager:
    $total_n_members = count($_SESSION['member_search']['results']);
    pager_default_initialize($total_n_members, MOONMARS_STAR_SEARCH_PAGE_SIZE);
    $html .= theme('pager', array('quantity' => $total_n_members));
  }

  return $html;
}
