<?php

/**
 * Constant to explain username constraints:
 */
define('MOONMARS_USERNAME_DESCRIPTION', "Usernames may only contain letters, digits, hyphens and underscores (a-z, A-Z, 0-9, -_), and must be between 1 and 60 characters in length.");

/**
 * Implements hook_init().
 */
function moonmars_members_init() {
  $module_path = drupal_get_path('module', 'moonmars_members');
  drupal_add_js("$module_path/js/avatar-tooltips.js");

  if (user_is_logged_in()) {
    global $user;
    drupal_add_js(array('moonmars_members' => array('username' => $user->name)), 'setting');
    drupal_add_js("$module_path/js/set-username-menu.js");
  }
}

/**
 * Implements hook_menu().
 */
function moonmars_members_menu() {
  $items = array();
  $items['profile'] = array(
    'page callback' => 'moonmars_members_profile',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM
  );
  $items['profile/edit'] = array(
    'page callback' => 'moonmars_members_profile_edit',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM
  );
  $items['activity'] = array(
    'page callback' => 'moonmars_members_activity_redirect',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM
  );
  $items['user/%/follow'] = array(
    'page callback'    => 'moonmars_members_follow',
    'page arguments'   => array(1),
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['user/%/unfollow'] = array(
    'page callback'    => 'moonmars_members_unfollow',
    'page arguments'   => array(1),
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['ajax/username-check'] = array(
    'page callback'    => 'moonmars_members_ajax_username_check',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
//  $items['user/%/activity'] = array(
//    'page callback'    => 'moonmars_members_activity',
//    'page arguments'   => array(1),
//    'access callback'  => 'user_is_logged_in',
//    'type'             => MENU_CALLBACK,
//  );
  return $items;
}

/**
 * Get the level roles, with the level number (which equals the multiplier) as keys.
 *
 * @return array
 */
function moonmars_members_levels() {
  return array(
    1 => 'iron',
    2 => 'copper',
    3 => 'silver',
    4 => 'gold',
    5 => 'platinum'
  );
}

/**
 * Implements hook_form_alter().
 */
function moonmars_members_form_alter(&$form, &$form_state, $form_id) {

  $module_path = drupal_get_path('module', 'moonmars_members');

  switch ($form_id) {
    case 'user_register_form':
      // Add JS for the Moon or Mars field:
      $form['#attached']['js'][] = "$module_path/js/moon-or-mars.js";
      $form['#attached']['js'][] = "$module_path/js/check-username.js";
      $form['#attached']['js'][] = "$module_path/js/register-form.js";

      // Change the title:
      drupal_set_title("Join moonmars.com!");

      // Update username field description re valid characters:
      $form['account']['name']['#description'] = MOONMARS_USERNAME_DESCRIPTION;

      // Remove location fieldset description, and province and city fields:
      unset($form['field_user_location'][LANGUAGE_NONE][0]['#description']);
      $form['field_user_location'][LANGUAGE_NONE][0]['#location_settings']['form']['fields']['province']['collect'] = 0;
      $form['field_user_location'][LANGUAGE_NONE][0]['#location_settings']['form']['fields']['city']['collect'] = 0;

      // Site rules:
      $form['rules'] = array(
        '#markup' => "
  <div id='site-rules'>
    <h3>moonmars.com Rules</h3>
    <p>This is not legal stuff. Please review these and make sure you agree before proceeding.</p>
    <ul>
      <li>Be nice to everyone, regardless of age, religion, race, gender, intelligence level, or political or planetary affiliation.</li>
      <li>Be humble and willing to learn from others, regardless of how brilliant and qualified you think you are.</li>
      <li>Be patient, helpful and willing to teach. Space will probably be settled by people younger than you. Teach them.</li>
      <li>No lying, cheating or bullying. Treat others how you like to be treated.</li>
      <li>Be creative and productive. This is not a social network or a water cooler. We're here to get things done.</li>
      <li>No porn or other offensive content. In fact, don't share anything that isn't related to space.</li>
      <li>Commit wholeheartedly to our shared goal of building settlements on the Moon and Mars.</li>
      <li>Help to make this a positive and successful website and community.</li>
      <li>Communicate clearly. Say what you mean, and take the time to use proper punctuation, spelling and grammar.</li>
      <li>Use English. It may not be perfect, but it's become the <i>lingua franca</i> of Earth, and of the scientific and space community. If you aren't great at English, learn more and practice. It will be worthwhile to you, and the community.</li>
      <li>Swearing/cursing is acceptable, but please keep it to a minimum. It should only be used for the purpose of humour or to make a point; never as abuse.</li>
    </ul>
  </div>
  ",
      );
      $form['rules-cb'] = array(
        '#type' => 'checkbox',
        '#title' => "I agree to the Rules.",
        '#required' => TRUE,
      );

      // Add an after_build handler:
      $form['#after_build'][] = 'moonmars_members_user_register_form_after_build';

      // Add a validation handler. Need to put this first so that our username rules get checked before Drupal core's.
      array_unshift($form['#validate'], 'moonmars_members_user_register_form_validate');

      break;

    case 'user_profile_form':
      // Add JS:
      $form['#attached']['js'][] = "$module_path/js/moon-or-mars.js";
      $form['#attached']['js'][] = "$module_path/js/profile-form.js";
      $form['#attached']['js'][] = "$module_path/js/check-username.js";
      $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_notifications') . '/js/notifications-form.js';

      // Check if the tab is specified in the querystring:
      $tab = isset($_GET['tab']) ? addslashes($_GET['tab']) : NULL;

      // Add some buttons up the top:
      $form['buttons'] = array(
        '#markup' => "
          <p>These preferences are additive, which is to say, if one preference say 'yes', and another says 'no',
          the result will be 'yes'. For example, if you say you want no notifications about your groups, but you want all
          notifications about your followees, then if a followee posts something in one of your groups you'll be notified.</p>
          <p>The default settings should suit most people.</p>
          <div id='notifications-form-buttons'>
            <strong>Select:</strong>
            <input type='button' onclick='notificationsFormSelectNothing()' value='Nothing'>
            <input type='button' onclick='notificationsFormSelectDefault()' value='Default'>
            <input type='button' onclick='notificationsFormSelectEverything()' value='Everything'>
          </div>
          <script>
          var tab = '$tab';
          </script>
        ",
      );
      // Add it to the the notifications tab:
      $form['#group_children']['buttons'] = 'group_tab_nxns';

      // Update username field description re valid characters:
      $form['account']['name']['#description'] = MOONMARS_USERNAME_DESCRIPTION;

      // Hidden field to contain the uid:
      $form['uid'] = array(
        '#type' => 'hidden',
        '#value' => $form['#user']->uid,
        '#attributes' => array('id' => 'uid'),
      );

      // Color icons for background color:
      $form['comments_color'] = array(
        '#markup' => moonmars_color_icons2($form['field_background_color'][LANGUAGE_NONE][0]['rgb']['#default_value']),
      );

      // Hide the score:
      unset($form['field_score']);

      // Hide the notifications preferences:
      unset($form['field_notifications_preferences']);

      // Add an after_build handler:
      $form['#after_build'][] = 'moonmars_members_user_profile_form_after_build';

      // Add a validation handler. Need to put this first so that our username rules get checked before Drupal core's.
      array_unshift($form['#validate'], 'moonmars_members_user_profile_form_validate');

      // Add a submit handler:
      $form['#submit'][] = 'moonmars_members_user_profile_form_submit';

      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      // Order fields:
      $weight = 0;

      // Account details group:
      $form['#fieldgroups']['group_account']->weight = $weight++;
      $form['account']['#weight'] = $weight++;
      $form['account']['name']['#weight'] = $weight++;
      $form['account']['mail']['#weight'] = $weight++;
      $form['account']['current_pass']['#weight'] = $weight++;
      $form['account']['pass']['#weight'] = $weight++;
      $form['account']['roles']['#weight'] = $weight++;
      $form['account']['status']['#weight'] = $weight++;
      $form['account']['notify']['#weight'] = $weight++;

      // Personal details group:
      $form['#fieldgroups']['group_personal']->weight = $weight++;
      $form['picture']['#weight'] = $weight++;
      $form['field_first_name']['#weight'] = $weight++;
      $form['field_last_name']['#weight'] = $weight++;
      $form['field_date_of_birth']['#weight'] = $weight++;
      $form['field_gender']['#weight'] = $weight++;
      $form['field_mobile_phone']['#weight'] = $weight++;
      $form['field_skype']['#weight'] = $weight++;
      $form['field_bio']['#weight'] = $weight++;
      $form['field_moon_or_mars']['#weight'] = $weight++;

      // Location group:
      $form['#fieldgroups']['group_location']->weight = $weight++;
      $form['field_user_location']['#weight'] = $weight++;
      $form['timezone']['#weight'] = $weight++;

      // Preferences group:
      $form['#fieldgroups']['group_preferences']->weight = $weight++;
      $form['signature']['#weight'] = $weight++;
      $form['contact']['#weight'] = $weight++;
      $form['rules']['#weight'] = $weight++;
      $form['rules-cb']['#weight'] = $weight++;

      // Notifications tab:
      $form['buttons']['#weight'] = $weight++;
      $form['#fieldgroups']['group_site_nxns']->weight = $weight++;
      $form['#fieldgroups']['group_channel_nxns']->weight = $weight++;
      $form['#fieldgroups']['group_followee_nxns']->weight = $weight++;
      $form['#fieldgroups']['group_nxns']->weight = $weight++;

//      dpm($form);

      //      $keys = array_keys($form);
//      foreach ($form as $key => $value) {
//        if (is_array($value) && isset($value['#weight'])) {
//          dbg("$key weight {$value['#weight']}");
//        }
//      }

      break;
  }
}

/**
 * Check if a username is valid.
 *
 * This means:
 *   - Between 1 and 60 (USERNAME_MAX_LENGTH) characters.
 *   - Letters, digits, hyphens and underscores only.
 *
 * This set of rules permits:
 *   - Drupal will allow it. @see user.module/user_validate_name()
 *   - Apache will allow it. If a username starts with a period then Apache will show a Forbidden message if their
 *       profile path is requested.
 *   - Uses only unreserved characters.
 *       @see http://www.456bereastreet.com/archive/201006/be_careful_with_non-ascii_characters_in_urls/
 *   - Member profile alias will match the username exactly, i.e. /member/$username
 *
 * @param $name
 * @return bool
 */
function moonmars_members_valid_username($name) {
  return (bool) preg_match("/^[a-z0-9\-\_]{1," . USERNAME_MAX_LENGTH . "}$/i", $name);
}

/**
 * Validation handler for the user registration form.
 */
function moonmars_members_user_register_form_validate($form, &$form_state) {
  if (!moonmars_members_valid_username($form_state['values']['name'])) {
    form_set_error('name', MOONMARS_USERNAME_DESCRIPTION);
  }
}

/**
 * After_build handler for the user register form.
 *
 * @param array $form
 * @return array
 */
function moonmars_members_user_register_form_after_build($form) {
  // Remove AJAX from the country selector:
//  unset($form['field_user_location'][LANGUAGE_NONE][0]['country']['#ajax']);
//  $form['field_user_location'][LANGUAGE_NONE][0]['country']['#attributes']['class'] = array_diff($form['field_user_location'][LANGUAGE_NONE][0]['country']['#attributes']['class'], array('location_auto_country'));
//  $form['field_user_location'][LANGUAGE_NONE][0]['country']['#process'] = array_diff($form['field_user_location'][LANGUAGE_NONE][0]['country']['#process'], array('ajax_process_form'));
//  $form['field_user_location'][LANGUAGE_NONE][0]['country']['#ajax_processed'] = FALSE;
  // This was the only change needed, but let's not delete the other lines yet just in case.
  unset($form['field_user_location'][LANGUAGE_NONE][0]['country']['#attached']['js'][0]['data']['ajax']);

  return $form;
}

  /**
 * After_build handler for the user account/profile form.
 *
 * @param array $form
 * @return array
 */
function moonmars_members_user_profile_form_after_build($form) {
  // Reformat the timezone options:
  $rx = "/([^\:]+)\:([^\+]+)([\+\-]\d{2})(\d{2})/";
  foreach ($form['timezone']['timezone']['#options'] as &$option) {
    $n = preg_match($rx, $option, $matches);
    if ($n) {
      $option = $matches[1] . ' ' . $matches[3] . ':' . $matches[4];
    }
  }

  // Make some changes to the location fields that we can't do in hook_form_alter().
  unset($form['field_user_location'][LANGUAGE_NONE][0]['#description']);
  $form['field_user_location'][LANGUAGE_NONE][0]['country']['#description'] = "Select your country";
  $form['field_user_location'][LANGUAGE_NONE][0]['province']['#description'] = "Select your state or province";
  $form['field_user_location'][LANGUAGE_NONE][0]['city']['#description'] = "Enter your city";
  unset($form['field_user_location'][LANGUAGE_NONE][0]['delete_location']);
  $form['field_user_location'][LANGUAGE_NONE][0]['timezone'] = $form['timezone']['timezone'];
  unset($form['timezone']);

  return $form;
}

/**
 * Validation handler for the user account/profile form.
 */
function moonmars_members_user_profile_form_validate($form, &$form_state) {
  if (!moonmars_members_valid_username($form_state['values']['name'])) {
    form_set_error('name', MOONMARS_USERNAME_DESCRIPTION);
  }
}

/**
 * Submit handler for the user account/profile form.
 */
function moonmars_members_user_profile_form_submit($form, &$form_state) {
  // Get the member whose profile is being updated:
  $member = Member::create($form['#user']);

//  // Update the channel's links:
//  $channel = $member->channel();
//
//  // We have to inspect $_POST instead of $form_state['values'], because Drupal removes the submitted values for the
//  // links, presumably because they came from another form.
//  $link_fields = moonmars_channels_social_links();
//  foreach ($link_fields as $info) {
//    $link_field = $info['field'];
//    $channel->field($link_field, LANGUAGE_NONE, 0, 'url', $_POST[$link_field][LANGUAGE_NONE][0]['url']);
//  }
//
//  // Save the channel:
//  $channel->save();

  // Go back to the user's profile:
  $form_state['redirect'] = $member->alias();
}

/**
 * Create a follows relationship between the logged in user and the user specified in the parameter.
 *
 * @param $member2_uid
 */
function moonmars_members_follow($member2_uid) {
  global $user;
  $member1_uid = $user->uid;

  if ($member1_uid && $member2_uid) {

    $member1 = Member::create($user->uid);
    $member2 = Member::create($member2_uid);

    if ($member1->follows($member2)) {
      drupal_set_message(t("You are already following %user2_name.", array('%user2_name' => $member2->name())));
    }
    else {
      // Follow the member:
      $member1->follow($member2);

      // Tell the user:
      drupal_set_message(t("You are now following %user2_name.", array('%user2_name' => $member2->name())));
    }
  }

  drupal_goto($member2->alias());
}

/**
 * Removes a follows relationship between the logged in user and the user specified in the parameter.
 *
 * @param $member2_uid
 */
function moonmars_members_unfollow($member2_uid) {
  global $user;
  $member1_uid = $user->uid;

  if ($member1_uid && $member2_uid) {
    $member1 = Member::create($user);
    $member2 = Member::create($member2_uid);

    if ($member1->follows($member2)) {
      // Unfollow the member:
      $member1->unfollow($member2);

      // Tell the user:
      drupal_set_message(t("You are no longer following %user2_name.", array('%user2_name' => $member2->name())));
    }
    else {
      drupal_set_message(t("You weren't following %user2_name.", array('%user2_name' => $member2->name())));
    }
  }

  drupal_goto($member2->alias());
}

/**
 * Go to the member's profile.
 */
function moonmars_members_profile() {
  drupal_goto(Member::currentMember()->alias());
}

/**
 * Go to the member's profile edit form.
 */
function moonmars_members_profile_edit() {
  drupal_goto(Member::currentMember()->editAlias());
}

/**
 * Render some member avatars in a sidebar block.
 *
 * @param int $n_display
 *   The maximum number of members to display in the block.
 * @param array $members
 *   The members.
 * @return string
 */
function moonmars_members_render_avatars(array $members, $max_n_display = 12, $view_all_link = NULL) {
  // Member count:
  $html = "<div class='member-count'>\n";
  $html .= format_plural(count($members), '1 member', '@count members');
  $html .= "</div>";

  // Avatars for most recently joined members:
  $html .= "<ul class='member-grid clearfix'>\n";
  $n = 0;
  foreach ($members as $member) {
    $html .= "<li>\n";
    $html .= $member->avatarTooltip();
    $html .= "</li>\n";

    // Limit the number displayed:
    $n++;
    if ($n == $max_n_display) {
      break;
    }
  }
  $html .= "</ul>\n";

  if ($view_all_link) {
    // @todo put the "View all" link here.
  }

  return $html;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blocks

/**
 * Implementation of hook_block_info().
 */
function moonmars_members_block_info() {
  $blocks['member-menu'] = array(
    'info' => t('Member menu'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['member-groups'] = array(
    'info' => t("Member's groups"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-followers'] = array(
    'info' => t("Member's followers"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-followees'] = array(
    'info' => t("Member's followees"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function moonmars_members_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'member-menu':
      $block['subject'] = NULL;
      $block['content'] = moonmars_members_menu_block();
      break;

    case 'member-groups':
      $block['subject'] = 'Groups';
      $block['content'] = moonmars_members_groups_block();
      break;

    case 'member-followers':
      $block['subject'] = 'Followers';
      $block['content'] = moonmars_members_followers_block();
      break;

    case 'member-followees':
      $block['subject'] = 'Following';
      $block['content'] = moonmars_members_followees_block();
      break;
  }
  return $block;
}

/**
 * Generate HTML for the member menu block.
 *
 * @return string
 */
function moonmars_members_menu_block() {
  global $user;

  if (!user_is_logged_in()) {
    return "<p>Please <a href='/user/login'>login</a> or <a href='/register'>register</a> to follow this user.</p>";
  }

  $html = "<ul id='member-menu' class='menu'>";

  // Get the user ids of the follower and the followee:
  $current_member = Member::currentMember();
  $profile_member = MoonMarsEntity::getEntityFromUrl();
  $own_profile = Member::equals($current_member, $profile_member);

  // Member profile menu links:
  if ($own_profile) {
    // Links for when you're on your own profile.

    // Activity:
    $html .= "<li>" . l('Activity', $profile_member->alias() . '/activity') . "</li>";

    // Profile:
    $html .= "<li>" . l('Profile', $profile_member->alias()) . "</li>";

    // View notifications:
    $html .= "<li>" . l('Notifications', $profile_member->alias() . '/notifications') . "</li>";
  }
  else {
    // Links for when you're on someone else's profile.

    // Follow/unfollow link:
    if ($current_member->follows($profile_member)) {
      $follow_link = l('Unfollow', $profile_member->alias() . '/unfollow');
    }
    else {
      $follow_link = l('Follow', $profile_member->alias() . '/follow');
    }
    $html .= "<li>$follow_link</li>";
  }

  // Links for editing the profile, if the member is on their own profile page, or for admins.
  if ($own_profile || user_access('administer users', $user)) {
    // Edit profile link:
    $html .= "<li>" . l('Edit profile', $profile_member->editAlias()) . "</li>";

    // Edit links:
    $html .= "<li>" . l('Edit links', $profile_member->channel()->editAlias()) . "</li>";
  }

  $html .= "</ul>";
  return $html;
}

/**
 * Generate HTML for a member's most recent groups.
 *
 * @return string
 */
function moonmars_members_groups_block() {
  // Get the member from the URL:
  $entity = MoonMarsEntity::getEntityFromUrl();
  $member = ($entity instanceof Member) ? $entity : (($entity instanceof Channel) ? $entity->parentEntity() : FALSE);
  if (!($member instanceof Member)) {
    return '';
  }

  // Get the member's groups.
  $groups = $member->groups();

  // Generate HTML:
  $view_all_link = l('View all', 'groups', array('query' => array('member' => $member->name())));
  $html = moonmars_groups_render_block($groups, 4, $view_all_link);

  return $html;
}

/**
 * Get HTML for the followers block.
 *
 * @return string
 */
function moonmars_members_followers_block() {
  // Get the member from the URL:
  $entity = MoonMarsEntity::getEntityFromUrl();
  $member = ($entity instanceof Member) ? $entity : (($entity instanceof Channel) ? $entity->parentEntity() : FALSE);
  if (!($member instanceof Member)) {
    return '';
  }

  // Generate HTML:
  $html = moonmars_members_render_avatars($member->followers());

  return $html;
}

/**
 * Get HTML for the followees block.
 *
 * @return string
 */
function moonmars_members_followees_block() {
  // Get the member from the URL:
  $entity = MoonMarsEntity::getEntityFromUrl();
  $member = ($entity instanceof Member) ? $entity : (($entity instanceof Channel) ? $entity->parentEntity() : FALSE);
  if (!($member instanceof Member)) {
    return '';
  }

  // Generate HTML:
  $html = moonmars_members_render_avatars($member->followees());

  return $html;
}

/**
 * AJAX callback to check if a username is valid.
 */
function moonmars_members_ajax_username_check() {
  $username = isset($_REQUEST['username']) ? $_REQUEST['username'] : NULL;
  $uid = isset($_REQUEST['uid']) ? $_REQUEST['uid'] : NULL;

  // Check forvalid characters and and length:
  if (!moonmars_members_valid_username($username)) {
    $data = array(
      'result' => FALSE,
      'message' => "Invalid",
    );
    echo json_encode($data);
    return;
  }

  // Check if anyone else has this username:
  $q = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('name', $username);

  // If the user is logged in then look for a different user with this username:
  if ($uid) {
    $q->condition('uid', $uid, '!=');
  }

  // Check if a match was found:
  if ($q->execute()->rowCount()) {
    $data = array(
      'result' => FALSE,
      'message' => "Taken",
    );
    echo json_encode($data);
    return;
  }

  // It's ok:
  $data = array(
    'result' => TRUE,
    'message' => "OK",
  );
  echo json_encode($data);
  return;
}

/**
 * Common code for when inserting or updating a user.
 *
 * @param $account
 */
function moonmars_members_user_save($account) {
  // Update the alias for the member's profile:
  $member = Member::create($account->uid);
  $member->resetAlias();
}

/**
 * Implements hook_user_insert().
 */
function moonmars_members_user_insert(&$edit, $account, $category) {
  moonmars_members_user_save($account);
}

/**
 * Implements hook_user_update().
 */
function moonmars_members_user_update(&$edit, $account, $category) {
  moonmars_members_user_save($account);
}

///**
// * Show the items from channels the member is following.
// *
// * @return string
// */
//function moonmars_members_activity($uid) {
//  // Make sure the user is looking at their own activity and not someone else's.
//  global $user;
//  if ($user->uid != $uid) {
//    drupal_access_denied();
//  }
//
//  drupal_set_title('Activity');
//  Member::currentMember()->channel()->render();
//}

/**
 * Display the member's activity.
 */
function moonmars_members_activity_redirect() {
  drupal_goto(Member::currentMember()->alias() . '/activity');
}

///**
// * Show rating buttons for the specified member.
// */
//function moonmars_members_rating_buttons($uid) {
////  $current_member = Member::currentMember();
////  $profile_member = Member::create($uid);
////  $rel = MoonMarsRelation::searchBinary('rates', 'user', $current_member->uid(), 'user', $profile_member->uid());
//}
