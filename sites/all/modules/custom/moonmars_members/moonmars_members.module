<?php

/**
 * Implements hook_menu().
 */
function moonmars_members_menu() {
  $items = array();
  $items['profile'] = array(
    'page callback' => 'moonmars_members_profile',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM
  );
  $items['profile/edit'] = array(
    'page callback' => 'moonmars_members_profile_edit',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_NORMAL_ITEM
  );
  $items['user/%/follow'] = array(
    'page callback'    => 'moonmars_members_follow',
    'page arguments'   => array(1),
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['user/%/unfollow'] = array(
    'page callback'    => 'moonmars_members_unfollow',
    'page arguments'   => array(1),
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Get the level roles, with the level number (which equals the multiplier) as keys.
 *
 * @return array
 */
function moonmars_members_levels() {
  return array(
    1 => 'iron',
    2 => 'copper',
    3 => 'silver',
    4 => 'gold',
    5 => 'platinum'
  );
}

/**
 * Implements hook_form_alter().
 */
function moonmars_members_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {

    case 'user_register_form':

      // Add JS for the Moon or Mars field:
      $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_members') . '/js/moon-or-mars.js';

      // Add rules fields:
      $weight = $form['field_moon_or_mars']['#weight'];
      $form['rules'] = array(
        '#markup' => "
  <h3>moonmars.com Rules</h3>
  <p>This is not legal stuff, i.e. it's actually worth reading. If you don't
  follow the rules, you'll be kicked out. Please review them and make sure you agree before proceeding.</p>
  <ul id='user-register-rules'>
    <li>Be nice to everyone, regardless of age, religion, race, gender, intelligence level, or political or planetary affiliation.</li>
    <li>Be humble and willing to learn from others, regardless of how brilliant and qualified you think you are.</li>
    <li>Be patient, helpful and willing to teach. Space will probably be settled by people younger than you. Teach them.</li>
    <li>Swearing/cursing is ok but only for the purpose of humour or to make a point, never to abuse.</li>
    <li>No lying, cheating or bullying. Treat others how you like to be treated.</li>
    <li>Be creative and productive. This is not a social network or a water cooler. We're here to get shit done.</li>
    <li>No complaining. Participate creatively and contribute your ideas and suggestions for how the site can be improved.</li>
    <li>No porn or other offensive content. In fact, don't share anything that isn't related to space, tech or science.</li>
    <li>Sincerely believe in and commit wholeheartedly to our goal of building settlements on the Moon and Mars.</li>
    <li>Communicate clearly. Say what you mean, and take the time to use proper punctuation, spelling and grammar.</li>
    <li>Use English. It may not be perfect, but it's become the <i>lingua franca</i> of Earth and of space.</li>
    <li>If you aren't great at English, learn more and practice. It will definitely be worthwhile to you and the community.</li>
    <li>No using the site naked. This is a family show.</li>
  </ul>
  ",
        '#weight' => ++$weight,
      );
      $form['rules-cb'] = array(
        '#type' => 'checkbox',
        '#title' => "I agree to the Rules.",
        '#required' => TRUE,
        '#weight' => ++$weight,
      );

      $form['#validate'][] = 'moonmars_members_user_register_form_validate';

      break;

    case 'user_profile_form':

      // Add JS for the Moon or Mars field:
      $module_path = drupal_get_path('module', 'moonmars_members');
      $form['#attached']['js'][] = "$module_path/js/moon-or-mars.js";
      $form['#attached']['js'][] = "$module_path/js/profile-form.js";

      // Order the fields:
      $weight = 0;
      $form['account']['#weight'] = ++$weight;
      $form['account']['name']['#weight'] = ++$weight;
      $form['account']['mail']['#weight'] = ++$weight;
      $form['account']['current_pass']['#weight'] = ++$weight;
      $form['account']['pass']['#weight'] = ++$weight;
      $form['field_first_name']['#weight'] = ++$weight;
      $form['field_last_name']['#weight'] = ++$weight;
      $form['picture']['#weight'] = ++$weight;
      $form['field_moon_or_mars']['#weight'] = ++$weight;
      $form['field_date_of_birth']['#weight'] = ++$weight;
      $form['field_gender']['#weight'] = ++$weight;
      $form['field_user_location']['#weight'] = ++$weight;
      $form['timezone']['#weight'] = ++$weight;
      $form['field_mobile_phone']['#weight'] = ++$weight;
      $form['field_bio']['#weight'] = ++$weight;
      $form['field_website']['#weight'] = ++$weight;
      $form['field_facebook']['#weight'] = ++$weight;
      $form['field_linkedin']['#weight'] = ++$weight;
      $form['field_twitter']['#weight'] = ++$weight;
      $form['signature']['#weight'] = ++$weight;
      $form['contact']['#weight'] = ++$weight;

      // Remove the grippie from the bio textarea:
      $form['field_bio'][LANGUAGE_NONE][0]['value']['#resizable'] = FALSE;

      // Add an after_build handler:
      $form['#after_build'][] = 'moonmars_members_user_profile_form_after_build';

      // Add a submit handler:
      $form['#submit'][] = 'moonmars_members_user_profile_form_submit';

//      $keys = array_keys($form);
//      foreach ($form as $key => $value) {
//        if (is_array($value) && isset($value['#weight'])) {
//          dbg("$key weight {$value['#weight']}");
//        }
//      }

      break;
  }
}

/**
 * Check if a username is valid.
 *
 * @param $name
 * @return bool
 */
function moonmars_members_valid_username($name) {
  return (bool) preg_match("/^[a-z0-9\-\_]{1,50}$/", $name);
}

/**
 * Validation handler for the user registration form.
 */
function moonmars_members_user_register_form_validate($form, &$form_state) {
  if (!moonmars_members_valid_username($form_state['values']['name'])) {
    form_set_error('name', "Member nicknames may only contain letters, digits, hyphens and underscores.");
  }
}

/**
 * After_build handler for the user account/profile form.
 *
 * @param array $form
 * @return array
 */
function moonmars_members_user_profile_form_after_build($form) {
  // Reformat the timezone options:
  $rx = "/([^\:]+)\:([^\+]+)([\+\-]\d{2})(\d{2})/";
  foreach ($form['timezone']['timezone']['#options'] as &$option) {
    $n = preg_match($rx, $option, $matches);
    if ($n) {
      $option = $matches[1] . ' ' . $matches[3] . ':' . $matches[4];
    }
  }

  // Add some descriptions to the location fields:
  $form['field_user_location'][LANGUAGE_NONE][0]['country']['#description'] = "Select your country";
  $form['field_user_location'][LANGUAGE_NONE][0]['province']['#description'] = "Select your state or province";
  $form['field_user_location'][LANGUAGE_NONE][0]['city']['#description'] = "Enter your city";
  unset($form['field_user_location'][LANGUAGE_NONE][0]['delete_location']);

  return $form;
}

/**
 * Validation handler for the user account/profile form.
 */
function moonmars_members_user_profile_form_validate($form, $form_state) {
  if (!moonmars_members_valid_username($form_state['values']['name'])) {
    form_set_error('name', "Member nicknames may only contain letters, digits, hyphens and underscores.");
  }
}

/**
 * Submit handler for the user account/profile form.
 */
function moonmars_members_user_profile_form_submit($form, $form_state) {
  // Go back to the user's profile:
  drupal_goto('user/' . arg(1));
}

/**
 * Create a follows relationship between the logged in user and the user specified in the parameter.
 *
 * @param $member2_uid
 */
function moonmars_members_follow($member2_uid) {
  global $user;
  $member1_uid = $user->uid;

  if ($member1_uid && $member2_uid) {

    $member1 = Member::create($member1_uid);
    $member2 = Member::create($member2_uid);
    
    if ($member1->follows($member2)) {
      drupal_set_message(t("You are already following %user2_name.", array('%user2_name' => $member2->name())));
    }
    else {
      // Follow the member:
      $member1->follow($member2);

      // Tell the user:
      drupal_set_message(t("You are now following %user2_name.", array('%user2_name' => $member2->name())));
    }
  }
  drupal_goto("user/$member2_uid");
}

/**
 * Removes a follows relationship between the logged in user and the user specified in the parameter.
 *
 * @param $member2_uid
 */
function moonmars_members_unfollow($member2_uid) {
  global $user;
  $member1_uid = $user->uid;

  if ($member1_uid && $member2_uid) {

    $member1 = Member::create($member1_uid);
    $member2 = Member::create($member2_uid);

    if ($member1->follows($member2)) {
      // Unfollow the member:
      $member1->unfollow($member2);

      // Tell the user:
      drupal_set_message(t("You are no longer following %user2_name.", array('%user2_name' => $member2->name())));
    }
    else {
      drupal_set_message(t("You weren't following %user2_name.", array('%user2_name' => $member2->name())));
    }
  }
  drupal_goto("user/$member2_uid");
}

/**
 * Go to the member's profile.
 */
function moonmars_members_profile() {
  global $user;
  drupal_goto(drupal_get_path_alias("user/$user->uid"));
}

/**
 * Go to the member's profile edit form.
 */
function moonmars_members_profile_edit() {
  global $user;
  drupal_goto(drupal_get_path_alias("user/$user->uid") . '/edit');
}

/**
 * Show the form for filtering a member's profile channel.
 *
 * @return array
 */
function moonmars_members_filter_channel_form() {
  $form = array();
  $form['profile_filter'] = array(
    '#type' => 'checkbox',
    '#title' => "Just show my stuff (my public profile)",
    '#default_value' => isset($_SESSION['user']['profile_filter']) ? $_SESSION['user']['profile_filter'] : FALSE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Go'
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_members') . '/js/profile-filter.js';

  return $form;
}

/**
 * Submit handler for moonmars_members_filter_channel_form().
 */
function moonmars_members_filter_channel_form_submit($form, &$form_state) {
  // Store the checkbox state:
  $_SESSION['user']['profile_filter'] = (bool) $form_state['values']['profile_filter'];
  // Reload the page:
  drupal_goto('user/' . arg(1));
}

/**
 * Render some member avatars in a sidebar block.
 *
 * @param int $total_member_count
 * @param array $members
 * @return string
 */
function moonmars_members_render_avatars($total_member_count, $members, $view_all_link = NULL) {
  // Member count:
  $html = "<div class='member-count'>\n";
  $html .= format_plural($total_member_count, '1 member', '@count members');
  $html .= "</div>";

  // Avatars for most recently joined members:
  $html .= "<ul class='member-grid clearfix'>\n";
  foreach ($members as $member) {
    $html .= "<li>\n";
    $html .= $member->avatarTooltip();
    $html .= "</li>\n";
  }
  $html .= "</ul>\n";

  if ($view_all_link) {
    // @todo put the "View all" link here.
  }

  return $html;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blocks

/**
 * Implementation of hook_block_info().
 */
function moonmars_members_block_info() {
  $blocks['member-menu'] = array(
    'info' => t('Member menu'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['member-groups'] = array(
    'info' => t("Member's groups"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-followers'] = array(
    'info' => t("Member's followers"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['member-followees'] = array(
    'info' => t("Member's followees"),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function moonmars_members_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'member-menu':
      $block['subject'] = NULL;
      $block['content'] = moonmars_members_menu_block();
      break;

    case 'member-groups':
      $block['subject'] = 'Groups';
      $block['content'] = moonmars_members_groups_block();
      break;

    case 'member-followers':
      $block['subject'] = 'Followers';
      $block['content'] = moonmars_members_followers_block();
      break;

    case 'member-followees':
      $block['subject'] = 'Followees';
      $block['content'] = moonmars_members_followees_block();
      break;
  }
  return $block;
}

/**
 * Generate HTML for the member menu block.
 *
 * @return string
 */
function moonmars_members_menu_block() {
  global $user;
  if (!user_is_logged_in()) {
    return "<p>Please <a href='/login'>login</a> or <a href='/register'>register</a> to follow this user.</p>";
  }

  $html = "<ul id='member-menu' class='menu'>";

  // Get the user ids of the follower and the followee:
  $uid1 = $user->uid;
  $uid2 = (int) arg(1);

  // On your own profile, show an edit link:
  if ($uid1 == $uid2) {
    $edit_link = l('Edit profile', drupal_get_path_alias("user/$uid2") . '/edit');
    $html .= "<li>$edit_link</li>";
  }
  else {
    // On someone else's profile, show a follow/unfollow link:
    $member1 = Member::create($uid1);
    $member2 = Member::create($uid2);
    if ($member1->follows($member2)) {
      $follow_link = l('Unfollow', "user/$uid2/unfollow");
    }
    else {
      $follow_link = l('Follow', "user/$uid2/follow");
    }
    $html .= "<li>$follow_link</li>";
  }

  $html .= "</ul>";
  return $html;
}

/**
 * Generate HTML for a member's most recent groups.
 *
 * @return string
 */
function moonmars_members_groups_block() {
  // Get the member's uid from the URL:
  $member_uid = (int) arg(1);

  // Get the latest 12 group members:
  $member = Member::create($member_uid);
  $group_nids = $member->groups(0, 4);

  // Generate HTML:

  // Group count:
  $html = "<div class='group-count'>\n";
  $html .= format_plural($member->groupCount(), '1 group', '@count groups');
  $html .= "</div>";

  // groups:
  $html .= "<ul class='member-groups clearfix'>\n";
  // Avatars for most recent groups:
  foreach ($group_nids as $group_nid) {
    $html .= "<li class='member-group'>\n";

    // Create a link to the group:
    $label = '';

    // Do we have an image for this group?
    $group = node_load($group_nid);
    if (isset($group->field_logo[LANGUAGE_NONE][0]['fid'])) {
      $logo = file_load($group->field_logo[LANGUAGE_NONE][0]['fid']);
      $image_style = array(
        'style_name' => 'sidebar-logo-90-wide',
        'path'       => $logo->uri,
        'alt'        => $group->title,
      );
      $label .= theme('image_style', $image_style) . '<br>';
    }
    $label .= $group->title;
    $html .= l($label, "node/$group_nid", array('html' => TRUE, 'attributes' => array('title' => $group->title)));

    $html .= "</li>\n";
  }
  $html .= "</ul>\n";

  // View all groups link:
//  $html .= "<div class='view-all-groups-link'>\n";
//  $html .= l('View all', drupal_get_path_alias("user/$member_uid") . '/groups');
//  $html .= "</div>";

  return $html;
}

/**
 * Get HTML for the followers block.
 *
 * @return string
 */
function moonmars_members_followers_block() {
  // Whose profile are we on:
  $member = Member::create(arg(1));

  // Get the latest 12 followers:
  $followers = $member->followers(0, 12);

  // Generate HTML:
  $html = moonmars_members_render_avatars($member->followerCount(), $followers);

  return $html;
}

/**
 * Get HTML for the followees block.
 *
 * @return string
 */
function moonmars_members_followees_block() {
  // Whose profile are we on:
  $member = Member::create(arg(1));

  // Get the latest 12 followees:
  $followers = $member->followees(0, 12);

  // Generate HTML:
  $html = moonmars_members_render_avatars($member->followeeCount(), $followers);

  return $html;
}
