<?php
// $Id$

/**
 * @file
 * Test string/text node properties.
 */

class ClassesTestNodePropertiesStrings extends ClassesTest {

  /**
   * Implement getInfo() method as required by SimpleTest module.
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test node properties - strings'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();

    // Create a single-value text field:
    self::addField('simple_test_1', 'code', 'Code', 'text', 'text', 'text_textfield');

    // Create a multiple-value text field:
    self::addField('simple_test_1', 'states', 'States', 'text', 'text', 'text_textfield', TRUE);
    
    // Output the class file.
    classes_generate_type_classes('simple_test_1');
  }

  /**
   * Run tests.
   * These are bundled into one method because for whatever reason the version
   * of simpletest I have only finds the first one.
   */
  public function test() {
    $this->_testSingleString();
    $this->_testMultipleString();
  }

  
  //////////////////////////////////////////////////////////////////////////////
  // Test string CCK properties.

  /**
   * Test single-value string property.
   */
  public function _testSingleString() {
    // Create a node:
    $st = SimpleTest1::create();

    // Set the property value:
    $code = 'ABCD';
    $st->code = $code;

    // Get the property value:
    $this->assertEqual($st->code, $code);
    
    // Check the type:
    $this->assertTrue(is_string($st->code));

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the value was stored properly:
    $this->assertEqual($node->field_code[0]['value'], $code);
  }

  /**
   * Test multiple-value string property.
   */
  public function _testMultipleString() {
    // Create a node:
    $st = SimpleTest1::create();

    // Test setting property value with array of strings.
    $states = array('VIC', 'NSW', 'QLD');
    $st->states = $states;

    // Test getting property value as array of strings.
    $this->debug("States" , $states);
    $this->assertEqual($st->states, $states);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($states as $delta => $state) {
      $this->debug("State", $state);
      $this->assertEqual($node->field_states[$delta]['value'], $state);
    }
    
    // Test resetting the states:
    $st->states = array();
    $this->debug('$st->states', $st->states);
    $this->assertEqual($st->states, array());
    
    // Test resetting the states:
    $st->states = NULL;
    $this->debug('$st->states', $st->states);
    $this->assertEqual($st->states, array());

    // Test setting of individual array elements:
    $states = array('NT', 'ACT', 'WA');
    foreach ($states as $n => $state) {
      $st->states[$n] = $state;
      $this->debug("\$st->states[$n]", $st->states[$n]);
    }
    $this->debug('$st->states', $st->states);
    $this->assertEqual($st->states, $states);

    // Test getting of individual array elements:
    foreach ($states as $n => $state) {
      $this->assertEqual($st->states[$n], $state);
      // Check the types:
      $this->assertTrue(is_string($st->states[$n]));
    }
    $this->debug('$st->states', $st->states);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($states as $delta => $state) {
      $this->debug("State", $state);
      $this->assertEqual($node->field_states[$delta]['value'], $state);
    }

    // Set array elements using [] operator:
    $states = array('CA', 'WA', 'KE', 'MA');
    $st->states = array();
    foreach ($states as $n => $state) {
      $st->states[] = $state;
      $this->debug("\$st->states[$n]", $st->states[$n]);
      $this->assertEqual($st->states[$n], $state);
    }
    $this->debug('$st->states', $st->states);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($states as $delta => $state) {
      $this->debug("State", $state);
      $this->assertEqual($node->field_states[$delta]['value'], $state);
    }
  }
  
}
