<?php
// $Id$

/**
 * @file
 * Test file node properties.
 */

class ClassesTestNodePropertiesFiles extends ClassesTest {

  /**
   * Implement getInfo().
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test node properties - files'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();

    // Create a single-value file field:
    self::addField('simple_test_1', 'document', 'Document',
      'filefield', 'filefield', 'filefield_widget');

    // Create a multiple-value file field:
    self::addField('simple_test_1', 'images', 'Images',
      'filefield', 'filefield', 'filefield_widget',
      TRUE);
    
    // Regenerate the class file:
    classes_generate_type_classes('simple_test_1');
    
    // Use a couple of files for testing:
    $this->dir = DRUPAL_ROOT . '/' . drupal_get_path('module', 'classes') . "/tests/files";
    $document_path = "$this->dir/test.txt";
    $this->document = array(
      'path' => $document_path,
      'name' => basename($document_path),
      'size' => filesize($document_path),
      'mime' => classes_get_mime_type($document_path),
    );
    $document_path = "$this->dir/test2.txt";
    $this->document2 = array(
      'path' => $document_path,
      'name' => basename($document_path),
      'size' => filesize($document_path),
      'mime' => classes_get_mime_type($document_path),
    );
    
    // Some image files:
    $this->images = array();
    $image_files = array('mars', 'venus', 'neptune');
    foreach ($image_files as $image_file) {
      $image_path = "$this->dir/$image_file.jpg";
      $this->images[] = array(
        'path' => $image_path,
        'name' => basename($image_path),
        'size' => filesize($image_path),
        'mime' => classes_get_mime_type($image_path),
      );
    }
  }

  /**
   * Run tests.
   */
  public function test() {
    $this->_testSingleFile();
    $this->_testMultipleFiles();
    $this->_testFileData();
  }

  
  //////////////////////////////////////////////////////////////////////////////
  // Test filefield CCK properties.

  /**
   * Test single-value filefield property.
   */
  public function _testSingleFile() {
    // Create a node:
    $st = SimpleTest1::create();
    
    // Create a file:
    $document = XFile::create($this->document['path']);
    $document->save();
    $fid = $document->fid;
    $this->debug('new fid', $fid);
    $this->debug($document);

    // Set the property value:
    $st->document = $document;

    // Check property values:
    $this->assertEqual($st->document->fid, $fid);
    $this->assertEqual($st->document->path, $this->document['path']);
    $this->assertEqual($st->document->name, $this->document['name']);
    $this->assertEqual($st->document->size, $this->document['size']);
    $this->assertEqual($st->document->mime, $this->document['mime']);
    
    // Check type:
    $this->assertTrue($st->document instanceof XFile);

    // Save the node:
    $st->save();
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the value was stored properly:
    $this->debug('CCK field', $node->field_document[0]);
    $this->assertEqual($node->field_document[0]['fid'], $fid);
    
    // Test resetting the property:
    $st->document = NULL;
    $this->assertNull($st->document);

    // Create another one:
    $document2 = XFile::create();
    $document2->path = $this->document2['path'];
    $document2->save();
    $fid2 = $document2->fid;
    
    // Test setting the property using only a fid:
    $st->document = $fid2;
    
    // Check property values:
    $this->assertEqual($st->document->fid, $fid2);
    $this->assertEqual($st->document->path, $this->document2['path']);
    $this->assertEqual($st->document->name, $this->document2['name']);
    $this->assertEqual($st->document->size, $this->document2['size']);
    $this->assertEqual($st->document->mime, $this->document2['mime']);
    
    // Check type:
    $this->assertTrue($st->document instanceof XFile);
    
    // Reset the property again:
    $st->document = NULL;
    
    // Clear the cache:
    XFile::clearCache();
    
    // Load a file fresh:
    $file = field_file_load($fid, TRUE);
    $this->debug($file);
    
    // Try setting the property using a file object:
    $st->document = $file;
    
    // Check property values:
    $this->assertEqual($st->document->fid, $fid);
    $this->assertEqual($st->document->path, $this->document['path']);
    $this->assertEqual($st->document->name, $this->document['name']);
    $this->assertEqual($st->document->size, $this->document['size']);
    $this->assertEqual($st->document->mime, $this->document['mime']);
    
    // Check type:
    $this->assertTrue($st->document instanceof XFile);
  }

  /**
   * Test multiple-value filefield property.
   */
  public function _testMultipleFiles() {
    // Create a node:
    $st = SimpleTest1::create();
    
    // Create some files:
    $images = array();
    $fids = array();
    
    $i = 0;
    foreach ($this->images as $image_info) {
      $images[$i] = XFile::create($image_info['path']);
      $images[$i]->save();
      $fids[$i] = $images[$i]->fid;
      $i++;
    }
    
    $this->debug('fids', $fids);

    ////////////////////////////////////////
    // Set the property value as an array:
    $st->images = $images;

    // Check the property values:
    foreach ($images as $n => $image) {
      $this->assertEqual($st->images[$n]->path, $this->images[$n]['path']);
      $this->assertEqual($st->images[$n]->name, $this->images[$n]['name']);
      $this->assertEqual($st->images[$n]->size, $this->images[$n]['size']);
      $this->assertEqual($st->images[$n]->mime, $this->images[$n]['mime']);
      
      // Check type:
      $this->assertTrue($st->images[$n] instanceof XFile);
    }

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);
    $this->debug('CCK field', $node->field_images);

    // Check the value was stored properly:
    foreach ($fids as $n => $fid) {
      $this->assertEqual($node->field_images[$n]['fid'], $fid);
    }
    
    // Test resetting the property:
    $st->images = NULL;
    $this->assertEqual($st->images, array());
    
    // Test setting the property using fids:
    $st->images = $fids;
    $this->debug('count(images)', count($st->images));
    
    // Get the property value:
    foreach ($images as $n => $image) {
      $this->assertEqual($st->images[$n]->path, $this->images[$n]['path']);
      $this->assertEqual($st->images[$n]->name, $this->images[$n]['name']);
      $this->assertEqual($st->images[$n]->size, $this->images[$n]['size']);
      $this->assertEqual($st->images[$n]->mime, $this->images[$n]['mime']);

      // Check type:
      $this->assertTrue($st->images[$n] instanceof XFile);
    }
    
    // Reset the property again:
    $st->images = NULL;

    // Try setting the property using file objects:
    foreach ($fids as $n => $fid) {
      $st->images[$n] = field_file_load($fid, TRUE);
    }
    
    // Get the property value:
    foreach ($images as $n => $image) {
      $this->assertEqual($st->images[$n]->path, $this->images[$n]['path']);
      $this->assertEqual($st->images[$n]->name, $this->images[$n]['name']);
      $this->assertEqual($st->images[$n]->size, $this->images[$n]['size']);
      $this->assertEqual($st->images[$n]->mime, $this->images[$n]['mime']);
      
      // Check type:
      $this->assertTrue($st->images[$n] instanceof XFile);
    }
  }
  
  /**
   * Test the file data array.
   */
  function _testFileData() {
    debugOn();
    
    // Create a node:
    $st = SimpleTest1::create();
    
    // Create a file:
    $document = XFile::create($this->document['path']);

    // Set a data array property:
    $author = "Shaun Moss";
    $document->author = $author;

    // Save the file:
    $document->save();
    $fid = $document->fid;
    $this->debug('fid', $fid);
    $this->debug($document);

    // Set the property value:
    $st->document = $document;

    // Save the node. This will also save the file.
    $st->save();
    $nid = $st->nid;
    
    // Clear caches:
    XNode::clearCache();
    XFile::clearCache();
    
    $st2 = XNode::create($nid);
    
    // Check the data was stored correctly
    $this->debug('Author', $st2->document->author);
    $this->assertEqual($st2->document->author, $author);
    
    // Clear caches:
    XNode::clearCache();
    XFile::clearCache();

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);
    $this->debug($node->field_document);
    $this->assertEqual($node->field_document[0]['data']['author'], $author);
    
    // Modify the data array:
    $author2 = 'Mark Twain';
    $document->data['author'] = $author2;
    $this->debug($document->data);
    $this->assertEqual($document->data['author'], $author2);
    
    unset($document->data['author']);
    $this->assertNull($document->data['author']);
    
    // Set the attribute directly, without using the data array:
    $author3 = "Bob Marley";
    $document->author = $author3;
    $this->debug($document->author);
    $this->assertEqual($document->author, $author3);
  }
  
}
