<?php
// $Id$

/**
 * @file
 * Test string/text node properties.
 */

class ClassesTestNodeLoad extends ClassesTest {

  /**
   * Implement getInfo() method as required by SimpleTest module.
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test node loading and lazy loading'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();

    // Create a single-value text field:
    self::addField('simple_test_1', 'code', 'Code', 'text', 'text', 'text_textfield');

    // Output the class file.
    classes_generate_type_classes('simple_test_1');
  }

  /**
   * Run tests.
   * These are bundled into one method because for whatever reason the version
   * of simpletest I have only finds the first one.
   */
  public function test() {
    $this->_testLazyLoading();
    $this->_testLoadMethods();
  }

  /**
   * Test single-value string property.
   */
  public function _testLazyLoading() {
    // Create a node:
    $st = SimpleTest1::create();

    // Set some values:
    $st->title = 'Hello World';
    $st->body = 'FANTASTIC!';
    $st->code = 'AUD';
    $st->save();
    $nid = $st->nid;

    // Remove the node from cache:
    XNode::clearCache();

    // Start loading the node:
    $st = SimpleTest1::create($nid);

    // Check flags:
    $this->assertFalse($st->coreLoaded);
    $this->assertFalse($st->revisionLoaded);
    $this->assertFalse($st->loaded);

    // Access a core field:
    $this->debug($st->title);
    $this->assertEqual($st->title, 'Hello World');

    // Check flags:
    $this->assertTrue($st->coreLoaded);
    $this->assertFalse($st->revisionLoaded);
    $this->assertFalse($st->loaded);

    // Access a revision field:
    $this->debug($st->body);
    $this->assertEqual($st->body, 'FANTASTIC!');

    // Check flags:
    $this->assertTrue($st->coreLoaded);
    $this->assertTrue($st->revisionLoaded);
    $this->assertFalse($st->loaded);

    // Access a CCK field:
    $this->debug($st->code);
    $this->assertEqual($st->code, 'AUD');

    // Check flags:
    $this->assertTrue($st->coreLoaded);
    $this->assertTrue($st->revisionLoaded);
    $this->assertTrue($st->loaded);
  }

  /**
   * Test single-value string property.
   */
  public function _testLoadMethods() {
    // Create a node:
    $st = SimpleTest1::create();

    // Set some values:
    $st->title = 'Hello World';
    $st->body = 'FANTASTIC!';
    $st->code = 'AUD';
    $st->save();
    $nid = $st->nid;

    XNode::clearCache();

    $st = SimpleTest1::create($nid);

    // Load core fields and check:
    $st->loadCore();
    $node = $st->getEntityProperty();
    $this->assertNotNull($node->nid);
    $this->assertNotNull($node->vid);
    $this->assertNotNull($node->title);
    // ... but not any revision fields:
    $this->assertNull($node->body);
    $this->assertNull($node->teaser);
    // ... or not any revision fields:
    $this->assertNull($node->field_code);

    // Check flags:
    $this->assertTrue($st->coreLoaded);
    $this->assertFalse($st->revisionLoaded);
    $this->assertFalse($st->loaded);

    // Load revision fields and check:
    $st->loadRevision();
    $node = $st->getEntityProperty();
    $this->assertNotNull($node->nid);
    $this->assertNotNull($node->vid);
    $this->assertNotNull($node->title);
    $this->assertNotNull($node->body);
    $this->assertNotNull($node->teaser);
    // ... or not any revision fields:
    $this->assertNull($node->field_code);

    // Check flags:
    $this->assertTrue($st->coreLoaded);
    $this->assertTrue($st->revisionLoaded);
    $this->assertFalse($st->loaded);

    // Load all fields and check:
    $st->load();
    $node = $st->getEntityProperty();
    $this->assertNotNull($node->nid);
    $this->assertNotNull($node->vid);
    $this->assertNotNull($node->title);
    $this->assertNotNull($node->body);
    $this->assertNotNull($node->teaser);
    $this->assertNotNull($node->field_code);

    // Check flags:
    $this->assertTrue($st->coreLoaded);
    $this->assertTrue($st->revisionLoaded);
    $this->assertTrue($st->loaded);
  }

}
