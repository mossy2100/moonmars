<?php
// $Id$

/**
 * @file
 * Test numeric node properties.
 */

class ClassesTestNodePropertiesNumbers extends ClassesTest {

  /**
   * Implement getInfo() method as required by SimpleTest module.
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test node properties - numbers'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();

    // Create a single-value integer field:
    self::addField('simple_test_1', 'population', 'Population', 'number_integer', 'number', 'number');

    // Create a multiple-value integer field:
    self::addField('simple_test_1', 'scores', 'Scores', 'number_integer', 'number', 'number', TRUE);

    // Create a single-value float field:
    self::addField('simple_test_1', 'area', 'Area', 'number_float', 'number', 'number');

    // Create a multiple-value float field:
    self::addField('simple_test_1', 'temperatures', 'Temperatures', 'number_float', 'number', 'number', TRUE);

    // Output the class file.
    classes_generate_type_classes('simple_test_1');
  }

  /**
   * Run tests.
   * These are bundled into one method because for whatever reason the version
   * of simpletest I have only finds the first one.
   */
  public function test() {
    $this->_testSingleInteger();
    $this->_testMultipleInteger();
    
    $this->_testSingleFloat();
    $this->_testMultipleFloat();
  }

  
  //////////////////////////////////////////////////////////////////////////////
  // Test integer CCK properties.

  /**
   * Test single-value integer property.
   */
  public function _testSingleInteger() {
    // Create a node:
    $st = SimpleTest1::create();

    // Set the property value:
    $st->population = 1000;

    // Get the property value:
    $this->assertEqual($st->population, 1000);
    
    // Check the type:
    $this->assertTrue(is_int($st->population));

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the value was stored properly:
    $this->assertEqual($node->field_population[0]['value'], 1000);
    
    // Test setting the property using a string:
    $st->population = '1234567';
    $this->debug('$st->population', $st->population);
    // Should be converted to an int:
    $this->assertTrue(is_int($st->population));
    
    // Test setting the property using a float:
    $st->population = 1234567.89;
    $this->debug('$st->population', $st->population);
    // Should be converted to an int:
    $this->assertTrue(is_int($st->population));
  }

  /**
   * Test multiple-value integer property.
   */
  public function _testMultipleInteger() {
    // Create a node:
    $st = SimpleTest1::create();

    // Test setting property value with array of integers.
    $scores = array(100, 300, 500, 800, 1100);
    $st->scores = $scores;

    // Test getting property value as array of integers.
    $this->debug("Scores" , $scores);
    $this->assertEqual($st->scores, $scores);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($scores as $delta => $score) {
      $this->debug("Score", $score);
      $this->assertEqual($node->field_scores[$delta]['value'], $score);
    }
    
    // Test resetting the scores:
    $st->scores = array();
    $this->debug('$st->scores', $st->scores);
    $this->assertEqual($st->scores, array());
    
    // Test resetting the scores:
    $st->scores = NULL;
    $this->debug('$st->scores', $st->scores);
    $this->assertEqual($st->scores, array());

    // Test setting of individual array elements:
    $scores = array(123, 567, 345, 910);
    foreach ($scores as $n => $score) {
      $st->scores[$n] = $score;
      $this->debug("\$st->scores[$n]", $st->scores[$n]);
    }
    $this->debug('$st->scores', $st->scores);
    $this->assertEqual($st->scores, $scores);

    // Test getting of individual array elements:
    foreach ($scores as $n => $score) {
      $this->assertEqual($st->scores[$n], $score);
      // Check the types:
      $this->assertTrue(is_int($st->scores[$n]));
    }
    $this->debug('$st->scores', $st->scores);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($scores as $delta => $score) {
      $this->debug("Score", $score);
      $this->assertEqual($node->field_scores[$delta]['value'], $score);
    }

    // Set array elements using [] operator:
    $scores = array(444, 22, 7777, 999);
    $st->scores = array();
    foreach ($scores as $n => $score) {
      $st->scores[] = $score;
      $this->debug("\$st->scores[$n]", $st->scores[$n]);
      $this->assertEqual($st->scores[$n], $score);
    }
    $this->debug('$st->scores', $st->scores);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($scores as $delta => $score) {
      $this->debug("Score", $score);
      $this->assertEqual($node->field_scores[$delta]['value'], $score);
    }
    
    // Test setting the property using strings:
    $scores = array('123', '456', '789');
    $this->debug("Set scores as strings", $scores);
    $st->scores = $scores;
    $this->debug('$st->scores', $st->scores);
    // Should be converted to ints:
    foreach ($st->scores as $score) {
      $this->assertTrue(is_int($score));
    }
    
    // Test setting the property using floats:
    $scores = array(123.45, 456.78, 9.1);
    $this->debug("Set scores as floats", $scores);
    $st->scores = $scores;
    $this->debug('$st->scores', $st->scores);
    // Should be converted to ints:
    foreach ($st->scores as $score) {
      $this->assertTrue(is_int($score));
    }
  }

  
  //////////////////////////////////////////////////////////////////////////////
  // Test float CCK properties.

  /**
   * Test single-value float property.
   */
  public function _testSingleFloat() {
    // Create a node:
    $st = SimpleTest1::create();

    // Set the property value:
    $st->area = 123.456;

    // Get the property value:
    $this->assertEqual($st->area, 123.456);
    
    // Check type:
    $this->assertTrue(is_float($st->area));

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the value was stored properly:
    $this->assertEqual($node->field_area[0]['value'], 123.456);
  }

  /**
   * Test multiple-value float property.
   */
  public function _testMultipleFloat() {
    // Create a node:
    $st = SimpleTest1::create();

    // Test setting property value with array of floats.
    $temperatures = array(100.1, 300.3, 500.55, 800.34, 1100.87);
    $st->temperatures = $temperatures;

    // Test getting property value as array of floats.
    $this->debug("Scores" , $temperatures);
    $this->assertEqual($st->temperatures, $temperatures);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($temperatures as $delta => $temperature) {
      $this->debug("Score", $temperature);
      $this->assertEqual($node->field_temperatures[$delta]['value'], $temperature);
    }

    // Test resetting the temperatures:
    $st->temperatures = array();
    $this->debug($st->temperatures);
    $this->assertEqual($st->temperatures, array());
    
    // Test resetting the temperatures:
    $st->temperatures = NULL;
    $this->debug($st->temperatures);
    $this->assertEqual($st->temperatures, array());
    
    // Test setting of individual array elements:
    $temperatures = array(1.23, 5.67, 3.45, 9.10);
    foreach ($temperatures as $n => $temperature) {
      $st->temperatures[$n] = $temperature;
      $this->debug("\$st->temperatures[$n]", $st->temperatures[$n]);
    }
    $this->assertEqual($st->temperatures, $temperatures);

    // Test getting of individual array elements:
    foreach ($temperatures as $n => $temperature) {
      $this->assertEqual($st->temperatures[$n], $temperature);
      // Check the types:
      $this->assertTrue(is_float($st->temperatures[$n]));
    }
    $this->debug('$st->temperatures', $st->temperatures);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($temperatures as $delta => $temperature) {
      $this->debug("Temp", $temperature);
      $this->assertEqual($node->field_temperatures[$delta]['value'], $temperature);
    }

    // Set individual array elements using [] operator:
    $temperatures = array(44.4, 22.2, 77.77, 999.99);
    $st->temperatures = array();
    foreach ($temperatures as $n => $temperature) {
      $st->temperatures[] = $temperature;
      $this->debug("\$st->temperatures[$n]", $st->temperatures[$n]);
      $this->assertEqual($st->temperatures[$n], $temperature);
    }
    $this->debug('$st->temperatures', $st->temperatures);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($temperatures as $delta => $temperature) {
      $this->debug("Temp", $temperature);
      $this->assertEqual($node->field_temperatures[$delta]['value'], $temperature);
    }
    
    // Test setting the property using strings:
    $temperatures = array('123.45', '456.78', '789.123');
    $this->debug("Set temperatures as strings", $temperatures);
    $st->temperatures = $temperatures;
    $this->debug('$st->temperatures', $st->temperatures);
    // Should be converted to floats:
    foreach ($st->temperatures as $temperature) {
      $this->assertTrue(is_float($temperature));
    }
    
    // Test setting the property using ints:
    $temperatures = array(123, 456, 789);
    $this->debug("Set temperatures as ints", $temperatures);
    $st->temperatures = $temperatures;
    $this->debug('$st->temperatures', $st->temperatures);
    // Should be converted to floats:
    foreach ($st->temperatures as $temperature) {
      $this->assertTrue(is_float($temperature));
    }

  }

}
