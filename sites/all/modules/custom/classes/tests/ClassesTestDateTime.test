<?php
// $Id$

/**
 * @file
 * Test the XDateTime class.
 */

class ClassesTestDateTime extends ClassesTest {

  /**
   * Implement getInfo() method as required by SimpleTest module.
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test the XDateTime class'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();
  }
  
  /**
   * Run tests.
   * These are bundled into one method because for whatever reason the version
   * of simpletest I have only finds the first one.
   */
  public function test() {
    $this->_testDateCreate();
//    $this->_testDateTimeCreate();
//    $this->_testTimezones();
//    $this->_testGetSetMethods();
//    $this->_testFormatMethods();
//    $this->_testAddSubtractMethods();
//    $this->_testTimestampMethods();
//    $this->_testComparisonMethods();
  }
  
  /**
   * Test creation of dates.
   */
  public function _testDateCreate() {
    // Create some dates in different ways:
    $dt0 = new XDateTime();
    $this->debug($dt0->isoFull);
    
    $dt1 = new XDateTime('2011-01-10');
    $this->debug($dt1->isoFull);
    $this->assertEqual($dt1->iso, '2011-01-10T00:00:00');
    
    $dt2 = new XDateTime('2011-01-10', 'UTC');
    $this->debug($dt2->isoFull);
    $this->assertEqual($dt2->iso, '2011-01-10T00:00:00');
    
    $dt3 = new XDateTime(2011, 1, 10);
    $this->debug($dt3->isoFull);
    $this->assertEqual($dt3->iso, '2011-01-10T00:00:00');
    
    $dt = new DateTime('2011-01-10');
    $this->debug($dt->format(DateTime::ISO8601));
    $dt4 = new XDateTime($dt);
    $this->debug($dt4->isoFull);
    $this->assertEqual($dt4->iso, '2011-01-10T00:00:00');

    $dt = new XDateTime('2011-01-10');
    $dt5 = new XDateTime($dt);
    $this->debug($dt5->isoFull);
    $this->assertEqual($dt5->iso, '2011-01-10T00:00:00');

    $dt6 = new XDateTime($dt1->timestamp);
    $this->debug($dt6->isoFull);
    $this->assertEqual($dt6->iso, '2011-01-10T00:00:00');
    
    $dt7 = new XDateTime('@' . $dt1->timestamp);
    $this->debug($dt7->isoFull);
    $this->assertEqual($dt7->iso, '2011-01-10T00:00:00');
    
    $dt8 = new XDateTime('Jan 10, 2011');
    $this->debug($dt8->isoFull);
    $this->assertEqual($dt8->iso, '2011-01-10T00:00:00');
  }

  /**
   * Test creation of datetimes.
   */
  public function _testDateTimeCreate() {
    // Create some datetimes in different ways:
    $dt1 = new XDateTime('2011-01-10T16:11:20');
    $this->debug($dt1->isoFull);
    $this->assertEqual($dt1->iso, '2011-01-10T16:11:20');
    
    $dt2 = new XDateTime('2011-01-10T16:11:20', 'UTC');
    $this->debug($dt2->isoFull);
    $this->assertEqual($dt2->iso, '2011-01-10T16:11:20');
    
    $dt3 = new XDateTime(2011, 1, 10, 16, 11, 20);
    $this->debug($dt3->isoFull);
    $this->assertEqual($dt3->iso, '2011-01-10T16:11:20');
    
    $dt9 = new XDateTime(2011, 1, 10, 16, 11, 20, 'UTC');
    $this->debug($dt9->isoFull);
    $this->assertEqual($dt9->iso, '2011-01-10T16:11:20');
    
    $dt = new DateTime('2011-01-10T16:11:20');
    $dt4 = new XDateTime($dt);
    $this->debug($dt4->isoFull);
    $this->assertEqual($dt4->iso, '2011-01-10T16:11:20');

    $dt5 = new XDateTime($dt1);
    $this->debug($dt5->isoFull);
    $this->assertEqual($dt5->iso, '2011-01-10T16:11:20');

    $dt6 = new XDateTime($dt1->timestamp);
    $this->debug($dt6->isoFull);
    $this->assertEqual($dt6->iso, '2011-01-10T16:11:20');
    
    $dt7 = new XDateTime('@' . $dt1->timestamp);
    $this->debug($dt7->isoFull);
    $this->assertEqual($dt7->iso, '2011-01-10T16:11:20');
    
    $dt8 = new XDateTime('16:11:20, Jan 10, 2011');
    $this->debug($dt8->isoFull);
    $this->assertEqual($dt8->iso, '2011-01-10T16:11:20');
  }
  
  /**
   * Test timezone within the XDateTime class.
   */
  public function _testTimezones() {
    // Use default TZ:
    $dt1 = new XDateTime(1970, 1, 1, 0, 0, 0);
    $offset1 = $dt1->getTimezone()->getOffset($dt1);
    $this->debug('dt1', $dt1->timestamp);
    $this->debug('offset1', $offset1);
    
    $this->assertEqual($dt1->timezoneName, date_default_timezone_get());
    
    // Use UTC:
    $dt2 = new XDateTime(1970, 1, 1, 0, 0, 0, 'UTC');
    $offset2 = $dt2->getTimezone()->getOffset($dt2);
    $this->debug('dt2', $dt2->timestamp);
    $this->debug('offset2', $offset2);

    $this->assertEqual($dt1->timestamp + $offset1, $dt2->timestamp);
    $this->assertEqual($dt2->timezoneName, 'UTC');
    
    // Use a different TZ:
    $dt3 = new XDateTime('1970-01-01', 'America/Buenos_Aires');
    $offset3 = $dt3->getTimezone()->getOffset($dt3);
    $this->debug('dt3', $dt3->timestamp);
    $this->debug('offset3', $offset3);
    $this->assertEqual($dt3->timestamp + $offset3, $dt2->timestamp);
    $this->assertEqual($dt3->timezoneName, 'America/Buenos_Aires');
  }
 
  /**
   * Test the accessor and mutator methods.
   */
  public function _testGetSetMethods() {
    $dt = new XDateTime();
    $this->debug($dt->isoFull);
    $dt->year = 1971;
    $this->assertEqual($dt->year, 1971);
    $dt->month = 10;
    $this->assertEqual($dt->month, 10);
    $dt->day = 29;
    $this->assertEqual($dt->day, 29);
    $dt->hour = 23;
    $this->assertEqual($dt->hour, 23);
    $dt->minute = 30;
    $this->assertEqual($dt->minute, 30);
    $dt->second = 15;
    $this->assertEqual($dt->second, 15);
    $this->debug($dt->isoFull);
  }

  /**
   * Test the format methods.
   */
  public function _testFormatMethods() {
    $dt = new XDateTime(1971, 10, 29, 23, 30, 15);
    $iso = '1971-10-29T23:30:15';
    
    // Get the offset for the current timezone:
    $offset = date('O', strtotime($iso));
    
    $this->debug($dt->iso);
    $this->assertEqual($dt->iso, $iso);
    
    $this->debug($dt->isoFull);
    $this->assertEqual($dt->isoFull, $iso . $offset);
    
    $this->debug($dt->isoDate);
    $this->assertEqual($dt->isoDate, '1971-10-29');
    
    $this->debug($dt->isoTime);
    $this->assertEqual($dt->isoTime, '23:30:15');
  }
  
  /**
   * Test the add and subtract methods.
   */
  public function _testAddSubtractMethods() {
    $dt = new XDateTime();
    $this->debug($dt->iso);
    
    // Test adding a random number of years:
    $year = $dt->year;
    $n = rand(1, 10);
    $this->msg("adding $n years");
    $dt->addYears($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->year, $year + $n);
    
    // Test subtracting a random number of years:
    $year = $dt->year;
    $n = rand(1, 10);
    $this->msg("subtracting $n years");
    $dt->subtractYears($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->year, $year - $n);
    
    // Test adding a random number of months:
    $dt->month = 1;
    $this->debug($dt->iso);
    $month = $dt->month;
    $n = rand(1, 11);
    $this->msg("adding $n months");
    $dt->addMonths($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->month, $month + $n);
    
    // Test subtracting a random number of months:
    $dt->month = 12;
    $this->debug($dt->iso);
    $month = $dt->month;
    $n = rand(1, 11);
    $this->msg("subtracting $n months");
    $dt->subtractMonths($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->month, $month - $n);
    
    // Test adding a random number of weeks:
    $dt->day = 1;
    $this->debug($dt->iso);
    $day = $dt->day;
    $n = rand(1, 3);
    $this->msg("adding $n weeks");
    $dt->addWeeks($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->day, $day + $n * 7);
    
    // Test subtracting a random number of weeks:
    $dt->day = 28;
    $this->debug($dt->iso);
    $day = $dt->day;
    $n = rand(1, 3);
    $this->msg("subtracting $n weeks");
    $dt->subtractWeeks($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->day, $day - $n * 7);
    
    // Test adding a random number of days:
    $dt->day = 1;
    $this->debug($dt->iso);
    $day = $dt->day;
    $n = rand(1, 27);
    $this->msg("adding $n days");
    $dt->addDays($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->day, $day + $n);
    
    // Test subtracting a random number of days:
    $dt->day = 28;
    $this->debug($dt->iso);
    $day = $dt->day;
    $n = rand(1, 27);
    $this->msg("subtracting $n days");
    $dt->subtractDays($n);
    $this->debug($dt->iso);
    $this->assertEqual($dt->day, $day - $n);
  }

  /**
   * Test the XDateTime timestamp methods.
   */
  public function _testTimestampMethods() {
    $dt = new XDateTime();
    $this->debug($dt->isoFull);
    
    // Test get method:
    $this->debug($dt->timestamp);
    $this->assertEqual($dt->timestamp, strtotime($dt->isoFull));
    
    // Test set method:
    $ts = strtotime('1971-10-29T23:30:15');
    $dt->timestamp = $ts;
    $this->assertEqual($dt->timestamp, $ts);
  }
  
  /**
   * Test the XDateTime timestamp methods.
   */
  public function _testComparisonMethods() {
    $dt1 = new XDateTime(1971, 10, 29);
    $dt2 = new XDateTime(2011, 1, 10);
    $dt3 = new XDateTime(1971, 10, 29);
    $dt4 = new XDateTime(1900, 1, 1);

    // Test equal().
    $this->assertFalse($dt1->equal($dt2));
    $this->assertTrue($dt1->equal($dt3));

    // Test notEqual().
    $this->assertTrue($dt1->notEqual($dt2));
    $this->assertFalse($dt1->notEqual($dt3));
    
    // Test earlier().
    $this->assertTrue($dt1->earlier($dt2));
    $this->assertFalse($dt1->earlier($dt3));
    $this->assertFalse($dt1->earlier($dt4));
    
    // Test later().
    $this->assertFalse($dt1->later($dt2));
    $this->assertFalse($dt1->later($dt3));
    $this->assertTrue($dt1->later($dt4));
    
    // Test earlier().
    $this->assertTrue($dt1->earlierOrEqual($dt2));
    $this->assertTrue($dt1->earlierOrEqual($dt3));
    $this->assertFalse($dt1->earlierOrEqual($dt4));
    
    // Test later().
    $this->assertFalse($dt1->laterOrEqual($dt2));
    $this->assertTrue($dt1->laterOrEqual($dt3));
    $this->assertTrue($dt1->laterOrEqual($dt4));
  }
  
}
