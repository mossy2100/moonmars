<?php
// $Id$

/**
 * @file
 * Test string/text node properties.
 */

class ClassesTestNodePropertiesDateTimes extends ClassesTest {

  /**
   * Implement getInfo() method as required by SimpleTest module.
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test node properties - dates and datetimes'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();

    // Create a single-value date field:
    self::addField('simple_test_1', 'birthday', 'Birthday', 'date', 'date', 'date_text');

    // Create a multiple-value date field:
    self::addField('simple_test_1', 'holidays', 'Holidays', 'date', 'date', 'date_text', TRUE);

    // Create a single-value datetime field:
    self::addField('simple_test_1', 'start', 'Start', 'datetime', 'date', 'date_text');

    // Create a multiple-value datetime field:
    self::addField('simple_test_1', 'reminders', 'Reminders', 'datetime', 'date', 'date_text', TRUE);

    // Output the class file.
    classes_generate_type_classes('simple_test_1');
  }

  /**
   * Run tests.
   * These are bundled into one method because for whatever reason the version
   * of simpletest I have only finds the first one.
   */
  public function test() {
    $this->_testSingleDate();
    $this->_testMultipleDate();

    $this->_testSingleDateTime();
    $this->_testMultipleDateTime();
  }


  //////////////////////////////////////////////////////////////////////////////
  // Test date CCK properties.

  /**
   * Test single-value date property.
   */
  public function _testSingleDate() {
    // Create a node:
    $st = SimpleTest1::create();

    // Create a date:
    $birthday = new XDateTime(1971, 10, 29);
    $this->debug('Birthday', $birthday->isoFull);

    // Set the property value:
    $st->birthday = $birthday;

    // Get the property value:
    $this->debug('Year', $st->birthday->year);
    $this->debug('Month', $st->birthday->month);
    $this->debug('Day', $st->birthday->day);
    $this->debug('Datetime', $st->birthday->isoFull);

    // Note, we have to allow for a different timezone, so use iso not isoFull:
    $this->assertEqual($st->birthday->isoDate, $birthday->isoDate);

    // Check the type:
    $this->assertTrue($st->birthday instanceof XDateTimeRange);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the value was stored properly:
    $this->debug('CCK field', $node->field_birthday[0]);
    $this->debug('Original date', $birthday->isoFull);
    $field_value = new XDateTime($node->field_birthday[0]);
    $this->debug('Field date', $field_value->isoFull);
    $this->assertEqual($field_value->isoDate, $birthday->isoDate);

    $this->debug('ts orig', $birthday->timestamp);
    $this->debug('ts field', $field_value->timestamp);

    // Test setting the property using a string:
    $birthday = '2011-01-06';
    $st->birthday = $birthday;
    $this->debug('Set birthday with string', $birthday);
    $this->debug('$st->birthday', $st->birthday->isoFull);
    // Should be converted to XDateTimeRange:
    $this->assertTrue($st->birthday instanceof XDateTimeRange);
    $this->assertEqual($st->birthday->isoDate, $birthday);
  }

  /**
   * Test multiple-value date property.
   */
  public function _testMultipleDate() {
    // Create a node:
    $st = SimpleTest1::create();

    // Test setting property value with array of dates.
    $holidays = array(
      new XDateTime('2011-01-01'),
      new XDateTime('1971-10-29'),
      new XDateTime('2011-02-14'),
    );
    $st->holidays = $holidays;

    // Test getting property value as array of dates.
    $this->debug('$st->holidays', $st->holidays);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($holidays as $delta => $holiday) {
      $this->debug("Holiday", $holiday->isoFull);
      $holiday2 = new XDateTime($node->field_holidays[$delta]['value']);
      $this->assertTrue($holiday->equal($holiday2));
    }

    // Test resetting the holidays:
    $st->holidays = array();
    $this->debug('$st->holidays', $st->holidays);
    $this->assertEqual($st->holidays, array());

    // Test resetting the holidays:
    $st->holidays = NULL;
    $this->debug('$st->holidays', $st->holidays);
    $this->assertEqual($st->holidays, array());

    // Test setting of individual array elements:
    $holidays = array('2011-03-03', '2011-04-04', '2011-05-05', '2011-06-06');
    foreach ($holidays as $n => $holiday) {
      $st->holidays[$n] = $holiday;
      $this->debug("\$st->holidays[$n]", $st->holidays[$n]->isoFull);
    }

    // Test getting of individual array elements:
    foreach ($holidays as $n => $holiday) {
      $holiday = new XDateTime($holiday);
      $this->assertTrue($st->holidays[$n]->equal($holiday));
      // Check the types:
      $this->assertTrue($st->holidays[$n] instanceof XDateTimeRange);
    }

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($holidays as $delta => $holiday) {
      $this->debug("Holiday", $holiday);
      $holiday2 = new XDateTime($node->field_holidays[$delta]['value']);
      $this->assertTrue($holiday2->equal($holiday));
    }
  }


  //////////////////////////////////////////////////////////////////////////////
  // Test datetime CCK properties.

  /**
   * Test single-value datetime property.
   */
  public function _testSingleDateTime() {
    // Create a node:
    $st = SimpleTest1::create();

    // Create a date:
    $start = new XDateTime(1971, 10, 29, 23, 30, 10);
    $this->debug('Start', $start->isoFull);

    // Set the property value:
    $st->start = $start;

    // Get the property value:
    $this->debug('Year', $st->start->year);
    $this->debug('Month', $st->start->month);
    $this->debug('Day', $st->start->day);
    $this->debug('Hour', $st->start->hour);
    $this->debug('Minute', $st->start->minute);
    $this->debug('Second', $st->start->second);
    $this->debug('Datetime', $st->start->isoFull);
    $this->assertTrue($st->start->equal($start));

    // Check the type:
    $this->assertTrue($st->start instanceof XDateTimeRange);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the value was stored properly:
    $this->debug('Field value', $node->field_start[0]);
    $this->debug('Original value', $start->isoFull);
    $field_value = new XDateTime($node->field_start[0]);

    $this->assertEqual($field_value->iso, $start->iso);

    $this->debug('ts orig', $start->timestamp);
    $this->debug('ts field', $field_value->timestamp);

    // Test setting the property using a string:
    $start = '2011-01-06T07:19:34';
    $st->start = $start;
    $this->debug('Set start with string', $start);
    $this->debug('$st->start', $st->start->isoFull);
    // Should be converted to XDateTimeRange:
    $this->assertTrue($st->start instanceof XDateTimeRange);
    $this->assertEqual($st->start->iso, $start);
  }

  /**
   * Test multiple-value datetime property.
   */
  public function _testMultipleDateTime() {
    // Create a node:
    $st = SimpleTest1::create();

    // Test setting property value with array of dates.
    $reminders = array(
      new XDateTime('2011-01-01 04:16'),
      new XDateTime('29 October, 1971, 11:30:10pm'),
      new XDateTime('14th February 2011, 09:15'),
    );
    $st->reminders = $reminders;

    // Test getting property value as array of dates.
    $this->debug('$st->reminders', $st->reminders);

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($reminders as $delta => $reminder) {
      $this->debug("Reminder", $reminder->isoFull);
      $reminder2 = new XDateTime($node->field_reminders[$delta]['value']);
      $this->assertTrue($reminder->equal($reminder2));
    }

    // Test resetting the reminders:
    $this->msg("Reset to NULL");
    $st->reminders = array();
    $this->debug('$st->reminders', $st->reminders);
    $this->assertEqual($st->reminders, array());

    // Test resetting the reminders:
    $st->reminders = NULL;
    $this->debug('$st->reminders', $st->reminders);
    $this->assertEqual($st->reminders, array());

    // Test setting of individual array elements:
    $reminders = array('2011-03-03 15:15:15', '2011-04-04 16:16:16', '2011-05-05 17:17:17', '2011-06-06 18:18:18');
    foreach ($reminders as $n => $reminder) {
      $st->reminders[$n] = $reminder;
      $this->debug("\$st->reminders[$n]", $st->reminders[$n]->isoFull);
    }

    // Test getting of individual array elements:
    foreach ($reminders as $n => $reminder) {
      $reminder = new XDateTime($reminder);
      $this->assertTrue($st->reminders[$n]->equal($reminder));
      // Check the types:
      $this->assertTrue($st->reminders[$n] instanceof XDateTimeRange);
    }

    // Save the node:
    $st->save();

    // Get the new nid:
    $nid = $st->nid;
    $this->debug('nid', $nid);

    // Load the node fresh:
    $node = node_load($nid, NULL, TRUE);

    // Check the values were stored properly:
    foreach ($reminders as $delta => $reminder) {
      $this->debug("Reminder", $reminder);
      $reminder2 = new XDateTime($node->field_reminders[$delta]['value']);
      $this->assertTrue($reminder2->equal($reminder));
    }
  }

}
