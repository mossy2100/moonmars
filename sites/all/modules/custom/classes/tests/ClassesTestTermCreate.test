<?php
// $Id$

/**
 * @file
 * Test term reference node properties.
 */

class ClassesTestTermCreate extends ClassesTest {

  /**
   * Implement getInfo().
   *
   * @return array
   */
  public function getInfo() {
    return array(
      'name' => t('Test creation of XTerm objects'),
      'group' => t('Classes'),
    );
  }

  /**
   * Custom setUp() method.
   *
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    // Enable any modules required for the test:
    parent::setUp();

    // Create a vocabulary:
    $this->vocab = new stdClass;
    $this->vocab->name = 'Continents';
    db_query("INSERT INTO {vocabulary} (name) VALUES ('%s')", $this->vocab->name);
    $this->vocab->vid = db_last_insert_id('vocabulary', 'vid');
    $this->debug('Vocabulary', $this->vocab);
  }

  /**
   * Run tests.
   */
  public function test() {
//    $this->_testCreateNewTerm();
    $this->_testCreateExistingTerm();
  }

  /**
   * Test creation of a new XTerm.
   */
  public function _testCreateNewTerm() {

    // To test:
    // XTerm::create();
    // XTerm::create(NULL, $vocab_name);
    // XTerm::create(NULL, $vid);
    // XTerm::create($name, NULL);
    // XTerm::create($name, $vocab_name);
    // XTerm::create($name, $vid);

    // Create a XTerm without specifying vocab:
    $term1 = XTerm::create();
    $this->assertNull($term1->tid);
    $this->assertNull($term1->name);
    $this->assertNull($term1->vid);
    $term1->name = 'Asia';
    $this->assertEqual($term1->name, 'Asia');
    $term1->save();
    $this->assertTrue($term1->tid > 0);
    $this->debug($term1);

    // Create a XTerm with vocab specified by vid:
    $term2 = XTerm::create(NULL, $this->vocab->vid);
    $this->assertNull($term2->tid);
    $this->assertNull($term2->name);
    $this->assertEqual($term2->vid, $this->vocab->vid);
    $term2->name = 'Europe';
    $this->assertEqual($term2->name, 'Europe');
    $term2->save();
    $this->assertTrue($term2->tid > 0);
    $this->debug($term2);

    // Create a XTerm with vocab specified by name:
    $term3 = XTerm::create(NULL, $this->vocab->name);
    $this->assertNull($term3->tid);
    $this->assertNull($term3->name);
    $this->assertEqual($term3->vid, $this->vocab->vid);
    $term3->name = 'Africa';
    $this->assertEqual($term3->name, 'Africa');
    $term3->save();
    $this->assertTrue($term3->tid > 0);
    $this->debug($term3);

    // Create a XTerm from a name, with no vocab:
    $term4 = XTerm::create('Oceania');
    $this->assertNull($term4->tid);
    $this->assertEqual($term4->name, 'Oceania');
    $this->assertNull($term4->vid);
    $term4->save();
    $this->assertTrue($term4->tid > 0);
    $this->debug($term4);

    // Create a XTerm with vocab specified by vid:
    $term5 = XTerm::create('North America', $this->vocab->vid);
    $this->assertNull($term5->tid);
    $this->assertEqual($term5->name, 'North America');
    $this->assertEqual($term5->vid, $this->vocab->vid);
    $term5->save();
    $this->assertTrue($term5->tid > 0);
    $this->debug($term5);

    // Create a XTerm with vocab specified by name:
    $term6 = XTerm::create('South America', $this->vocab->name);
    $this->assertNull($term6->tid);
    $this->assertEqual($term6->name, 'South America');
    $this->assertEqual($term6->vid, $this->vocab->vid);
    $term6->save();
    $this->assertTrue($term6->tid > 0);
    $this->debug($term6);
  }

  /**
   * Test creation of an existing XTerm.
   */
  public function _testCreateExistingTerm() {

    // To test:
    // XTerm::create($tid);
    // XTerm::create($term);
    // XTerm::create($xterm);
    // XTerm::create($name, NULL);
    // XTerm::create($name, $vocab_name);
    // XTerm::create($name, $vid);

    // Create a new term to play with:
    $term1 = XTerm::create('Antarctica', $this->vocab->name);
    $term1->save();
    $tid = $term1->tid;
    $this->assertNotNull($tid);
    $this->debug((array) $term1->term);

    // Clear the XTerm cache:
    XTerm::clearCache();

    // Create XTerm from tid:
    $term2 = XTerm::create($tid);
    $this->assertFalse($term2->loaded);
    $this->debug((array) $term2->term);

//    debugOn();
//    debug($term2);

    $this->assertEqual($term2->tid, $tid);

//    debug("\$term->loaded = " . $term->loaded);

    $this->assertEqual($term2->name, 'Antarctica');

//    debug("\$term->loaded = " . $term->loaded);

    $this->assertTrue($term2->loaded);
//    exit;
    $this->assertEqual($term2->vid, $this->vocab->vid);

    // Clear the XTerm cache:
    XTerm::clearCache();

    // Get a Drupal term:
    $term = taxonomy_get_term($tid);

    // Create XTerm from term:
    $term3 = XTerm::create($term);
    $this->assertTrue($term3->loaded);
    $this->debug((array) $term3->term);

    $this->assertEqual($term3->tid, $tid);
    $this->assertEqual($term3->name, 'Antarctica');
    $this->assertEqual($term3->vid, $this->vocab->vid);

    // Clear the XTerm cache:
    XTerm::clearCache();

    // Create XTerm from XTerm:
    $term4 = XTerm::create($term1);
    $this->debug((array) $term4->term);

    $this->assertEqual($term4->tid, $tid);
    $this->assertEqual($term4->name, 'Antarctica');
    $this->assertEqual($term4->vid, $this->vocab->vid);

    // Clear the XTerm cache:
    XTerm::clearCache();

    // Create XTerm from name:
    $term5 = XTerm::create('Antarctica');
    $this->assertFalse($term5->loaded);
    $this->debug((array) $term2->term);

    $this->assertEqual($term5->tid, $tid);
    $this->assertEqual($term5->name, 'Antarctica');
    $this->assertEqual($term5->vid, $this->vocab->vid);
    $this->assertTrue($term5->loaded);

    // Clear the XTerm cache:
    XTerm::clearCache();

    // Create XTerm from name and vid:
    $term6 = XTerm::create('Antarctica', $this->vocab->vid);
    $this->assertFalse($term6->loaded);
    $this->assertEqual($term6->tid, $tid);
    $this->assertEqual($term6->name, 'Antarctica');
    $this->assertEqual($term6->vid, $this->vocab->vid);
    $this->assertFalse($term6->loaded);

    // Clear the XTerm cache:
    XTerm::clearCache();

    // Create XTerm from name and vid:
    $term7 = XTerm::create('Antarctica', $this->vocab->name);
    $this->assertFalse($term7->loaded);
    $this->debug((array) $term2->term);

    $this->assertEqual($term7->tid, $tid);
    $this->assertEqual($term7->name, 'Antarctica');
    $this->assertEqual($term7->vid, $this->vocab->vid);
    $this->assertFalse($term7->loaded);
  }

}
