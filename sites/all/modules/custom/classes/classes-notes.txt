Development Notes
=================

@todo ASAP
==========

MOST IMPORTANT
When setting a multi-value (array) property, is propertySet being set?


On Import/Export page, swap sections.
After doing an Import, go to the Consistency Check page.

On Consistency Check page, generate a table showing issues with each class and property.

The order of the properties in the property info array should be the same as on
the property names page, i.e. it should take into account the groups.


In XDateTime, move the logic about format methods from __call to __get.

Eliminate the confusion between virtual properties and protected properties by
removing the protected properties, and instead storing properties in a protected
array $properties. Also, remove the $propertySet array. Rather, if a
property (key) is in the array, then the property is set (value). This means
when a property is accessed within the derived class it will always be treated
like a virtual property and therefore the method will be called.


Change path and name in the XFile class to filepath and filename.
Also modify the code in classes_generate_entity_base_class to not strip the 'file' part.

For getting MIME type, use the built-in Drupal function instead (file_get_mime() or something).
Then delete mime.types.



@todo later
===========

Add option to setting page to disallow generating classes on this site.

Add a CCK boolean type, with a checkbox widget.


Add classes for Vocabulary, Role, Comment, Menu, Block, Module, Theme, View,
Book, Forum, Poll.


/////// HOOKS ////////
Need hooks to allow other modules to add their own classes, and to provide
classes for their CCK widget types.

Re adding their own classes, all they really have to do is create a base class
and bung it in the entities/base folder. And create a stub for the derived class.
OR they could call classes_generate(), passing it an entity name, a class name
and a database table name (or array of tables).

e.g. 3 conversion functions:
function hook_classes_value_to_property() {
  // converts a value assigned to a property into the type it should be
}
function hook_classes_property_to_field() {
  // converts a property or other value to a CCK field
}
// maybe also?
function hook_classes_field_to_property() {
  // converts a CCK field or other value to a property
}

/////// HOOKS ////////


Support for multi-groups, i.e. if there are 3 fields in a multi-group, instead
of just providing 3 properties which are all arrays, provide one property which
is an array of objects, each of which contains 3 fields. To do this we would
need the facility to create property names for multi-groups. Also, fields within
multi-groups would only need to be singular.


The classes settings box on the edit node type form - make the checkbox label
change if they change the class name to something new.
It might also be useful to put the class name box on the property names page.
(Or just move it to there.)



Use the autoload module.


- Separate the code needed to generate classes from the code called from the
  classes. Then the "Generate Classes" module can be switched of for improved
  efficiency. Or it may simply be a matter of placing that code in an include
  file that only gets loaded when generating classes. Or have I already done
  that?


If a date/datetime field doesn't have a "to" value, then we don't need a range.
Actually we need 4 classes to properly cater for all cases.
- DDate
- DDateRange
- XDateTime
- XDateTimeRange



DO PEREGRINE-ESSENTIAL ITEMS FIRST.

FINISH FILE CLASS
-----------------
- Test the XFile class properly.
- Look at the simpletests for FileField and ImageField - there are classes
  already that could be used.


FINISH XDateTime CLASS
---------------------------
- Sort out timezones in XDateTime class, using the
  global_settings['tz_handling'] option.
- Update simpletests.


ADD IMAGE CLASS
---------------
- Add the Image class.



Add classes for:
- Image
- XLink
- Comment
- Vocabulary
- Role
(remember, for each of these classes, tests have to be written)

- Create the Date and Time classes? These can be re-used in the D7 version so it won't be a waste
of time. Maybe not needed yet?

- Set the default status value of new nodes from the content type setting.


- Fields such as status, comment, changed and created (and a few others) need to give more
  meaningful output. e.g.
    status: 0 = NODE_STATUS_PUBLISHED, 1 = NODE_STATUS_UNPUBLISHED
    comment: 0 = COMMENT_NONE, 1 = COMMENT_READ_ONLY, 2 = COMMENT_READ_WRITE
    etc.

- All information related to a content type can be static properties in the content type class.

- Add support for profile module to the XUser class.

- When looking for fields in the XUser class, if a field can't be found in the
  user account or a profile, then look in the data array.



Locations
=========
References to locations are not stored in the node or a CCK field. You have to
look in the location_instance field. We need methods to:
- get the first/default location, or any location, connected to a node.
- get a field on the default location or any location
- get the number of locations connected to a node.

For a XLocation object, need to be able to query how many nodes are connected to
it, and obtain these as XNode objects.



Ideas
=====

- Make the field names constants within the derived class.



- Implement reverse node and user references, see below:
Reverse References
------------------
Just as we can return nodes that are referenced from a node, we should also be able to get nodes
that reference a node.
For example, if the country content type references one or more regions, we can call
$country->getRegions(). But we should also be able to call $region->getCountries(), which scans
all the country nodes looking for the ones that reference that region.



- Date fields
- XFile and image fields
- Custom widgets
- etc?


- Make module independent of settings.inc file, i.e. no or limited includes, and $base_dir calculated in module.

- Implement inheritance.




Testing
=======
- Write unit tests for all methods in XNodeBase.

- Write unit tests for all possible generated methods in autogenerated base classes.

- Consider USE CASES. i.e. go through the process of creating nodes, users, users with profiles.
Be methodical. Fewer bugs that way.
