<?php

define('MOONMARS_CHANNEL_DEFAULT_PAGE_SIZE', 10);

/**
 * Implements hook_menu().
 */
//function moonmars_channels_menu() {
//}

/**
 * Return array of node types that have channels.
 *
 * @return array
 */
function moonmars_channels_node_types() {
  return array(
    'group',
    'event',
    'project'
  );
}

/**
 * Common code for inserting or updating nodes.
 * 
 * @param $entity
 * @param $entity_type
 */
function moonmars_channels_entity_save($entity, $entity_type) {
  // Update the channel's alias and title in case the entity's title was changed:
  $entity = MmcEntity::getEntity($entity_type, $entity);
  if ($entity) {
    $channel = $entity->channel();
    $channel->updateAliasAndTitle();
  }
}

/**
 * Implements hook_entity_insert().
 */
function moonmars_channels_entity_insert($entity, $entity_type) {
  moonmars_channels_entity_save($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function moonmars_channels_entity_update($entity, $entity_type) {
  moonmars_channels_entity_save($entity, $entity_type);
}

/**
 * Checks if we're on a node page with an embedded channel.
 *
 * @return bool
 */
function moonmars_channels_is_embedded_channel_page() {
  $n_args = arg_count();

  if ($n_args == 2 && is_uint(arg(1))) {
    if (arg(0) == 'user') {
      return TRUE;
    }
    elseif (arg(0) == 'node') {
      $node = node_load(arg(1));
      return in_array($node->type, moonmars_channels_node_types());
    }
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function moonmars_channels_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  switch ($form_id) {
    case 'channel_node_form':
      $channel = Channel::create($form['#node']);

      // Update the title:
      drupal_set_title("Edit links for " . $channel->parentEntityName());

      // Hide the channel title field:
      unset($form['title']);

      // Submit handler:
      $form['actions']['submit']['#submit'][] = 'moonmars_channels_channel_node_form_submit';

      break;
  }
}

/**
 * Submit handler for channel_node_form.
 *
 * @param $form
 * @param $form_state
 */
function moonmars_channels_channel_node_form_submit($form, &$form_state) {
  $channel = Channel::create($form['#node']);
  $form_state['redirect'] = $channel->parentEntity()->alias();
}
