<?php

use \AstroMultimedia\MoonMars\Member;
use \AstroMultimedia\MoonMars\Channel;

define('MOONMARS_CHANNEL_DEFAULT_PAGE_SIZE', 10);
define('MOONMARS_NEWS_CHANNEL_NID', 467);

///**
// * Implements hook_menu().
// */
//function moonmars_channels_menu() {
//  $items = array();
//  return $items;
//}

/**
 * Implements hook_form_alter().
 */
function moonmars_channels_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'channel_node_form') {
    $channel = Channel::create($form['#node']);
    $actor = $channel->actor();

    // In case we're at the channel's edit page, goto the actor's edit/links page.
    if ($actor instanceof Member) {
      $logged_in_member = Member::loggedInMember();
      $edit_links_path = $logged_in_member->editAlias() . '/links';
      if (request_path() != $edit_links_path) {
        drupal_goto($edit_links_path);
      }
    }

    // Remove the title field from the form:
    unset($form['title']);

    // Is the user on their own profile?
    $own_profile = ($actor instanceof Member) && $actor->equals(Member::loggedInMember());

    $social_links = moonmars_channels_social_links();
    foreach ($social_links as $social_link => $social_link_info) {
      // Add the icon to the link fields:
      $link_field = $social_link_info['field'];
      $image_path = "/" . drupal_get_path('theme', 'astro') . "/images/social-icons/" . $social_link . "-25x25.png";
      $form[$link_field][LANGUAGE_NONE][0]['#title'] = "<img class='social-link-icon' src='$image_path'>&nbsp;" . $form[$link_field][LANGUAGE_NONE][0]['#title'];

      // If the user is editing their own profile, make the description a bit more user-friendly:
      if ($own_profile) {
        $form[$link_field][LANGUAGE_NONE][0]['#description'] = str_replace('the member/group/etc. has', 'you have', $form[$link_field][LANGUAGE_NONE][0]['#description']);
      }
    }

    // Remove buttons we don't want:
    unset($form['actions']['delete']);
    unset($form['actions']['preview']);

    // Handler:
    $form['actions']['submit']['#validate'][] = 'moonmars_channels_channel_node_form_validate';
    $form['actions']['submit']['#submit'][] = 'moonmars_channels_channel_node_form_submit';
  }
}

/**
 * Validation handler for channel_node_form.
 * Check the links and add http:// if necessary:
 *
 * @param $form
 * @param $form_state
 */
function moonmars_channels_channel_node_form_validate($form, &$form_state) {
  $links = moonmars_channels_social_links();
  foreach ($links as $link_info) {
    $field = $link_info['field'];
    if (!isset($form_state['values'][$field][LANGUAGE_NONE][0]['url'])) {
      continue;
    }

    $url = $form_state['values'][$field][LANGUAGE_NONE][0]['url'];
    if (!$url) {
      continue;
    }

    $url_info = parse_url($url);
    if (!isset($url_info['scheme'])) {
      $form_state['values'][$field][LANGUAGE_NONE][0]['url'] = 'http://' . $url;
    }
  }
}

/**
 * Submit handler for channel_node_form.
 *
 * @param $form
 * @param $form_state
 */
function moonmars_channels_channel_node_form_submit($form, &$form_state) {
  // Back to the member or group page:
  $channel = Channel::create($form['#node']);
  $form_state['redirect'] = $channel->actor()->alias();
}

/**
 * Return array of node types that have channels.
 *
 * @return array
 */
function moonmars_channels_node_types() {
  return array(
    'group',
    'event',
    'project'
  );
}

/**
 * Get the social link fields.
 *
 * @return array
 */
function moonmars_channels_social_links() {
  return array(
    'website' => array(
      'name' => 'Website',
      'field' => 'field_website',
      'domain' => '',
      'description' => 'official website',
    ),
    'facebook' => array(
      'name' => 'Facebook',
      'field' => 'field_facebook_link',
      'domain' => 'facebook.com',
      'description' => 'Facebook profile',
    ),
    'linkedin' => array(
      'name' => 'LinkedIn',
      'field' => 'field_linkedin_link',
      'domain' => 'linkedin.com',
      'description' => 'LinkedIn profile',
    ),
    'twitter' => array(
      'name' => 'Twitter',
      'field' => 'field_twitter_link',
      'domain' => 'twitter.com',
      'description' => 'Twitter profile',
    ),
    'google-plus' => array(
      'name' => 'Google+',
      'field' => 'field_google_link',
      'domain' => 'plus.google.com',
      'description' => 'Google+ profile',
    ),
    'youtube' => array(
      'name' => 'YouTube',
      'field' => 'field_youtube_link',
      'domain' => 'youtube.com',
      'description' => 'YouTube channel',
    ),
    'wikipedia' => array(
      'name' => 'Wikipedia',
      'field' => 'field_wikipedia_link',
      'domain' => 'wikipedia.org',
      'description' => 'Wikipedia entry',
    ),
    'flickr' => array(
      'name' => 'Flickr',
      'field' => 'field_flickr_link',
      'domain' => 'flickr.com',
      'description' => 'Flickr profile',
    ),
    'meetup' => array(
      'name' => 'Meetup',
      'field' => 'field_meetup_link',
      'domain' => 'meetup.com',
      'description' => 'Meetup profile',
    ),
    'academia' => array(
      'name' => 'Academia',
      'field' => 'field_academia_link',
      'domain' => 'academia.edu',
      'description' => 'Academia profile',
    ),
  );
}

/**
 * Checks if we're on a node page with an embedded channel.
 *
 * @return bool
 */
function moonmars_channels_is_embedded_channel_page() {
  $n_args = arg_count();

  if ($n_args == 2 && is_uint(arg(1))) {
    if (arg(0) == 'user') {
      return TRUE;
    }
    elseif (arg(0) == 'node') {
      $node = node_load(arg(1));
      return in_array($node->type, moonmars_channels_node_types());
    }
  }

  return FALSE;
}
