<?php

define('MOONMARS_CHANNEL_DEFAULT_PAGE_SIZE', 10);

/**
 * Implements hook_menu().
 */
function moonmars_channels_menu() {
//  $items['stream'] = array(
//    'title' => 'moonmars.com Activity Stream',
//    'page callback' => 'moonmars_channels_site',
//    'access callback' => TRUE,
//  );
//  return $items;
}

/**
 * Return array of node types that have channels.
 *
 * @return array
 */
function moonmars_channels_node_types() {
  return array(
    'group',
    'event',
    'project'
  );
}

/**
 * Render an array of nodes.
 */
function moonmars_channels_render_nodes($nodes) {
  $node_views = array();
  foreach ($nodes as $node) {
    $node_view = node_view($node);
    $node_view['comments'] = comment_node_page_additions($node);
    $node_views[] = $node_view;
  }
//  dpm($nodes[0]);
  return "<div id='channel-items'>" . render($node_views) . "</div>";
}

///**
// * Get a user feed.
// *
// * @param $user
// * @param null $offset
// * @param null $row_count
// * @return array
// */
//function moonmars_channels_get_feed($user, $offset = NULL, $row_count = NULL) {
//  $uid = param_uid($user);
//  $q = db_select('moonmars_channel', 'mmc')
//    ->fields('mmc')
//    ->condition('uid', $uid)
//    ->orderBy('changed', 'DESC');
//  if ($offset !== NULL && $row_count !== NULL) {
//    $q->range($offset, $row_count);
//  }
//  $rs = $q->execute();
//  $nids = array();
//  foreach ($rs as $rec) {
//    $nids[] = $rec->nid;
//  }
//  return $nids;
//}

/**
 * Inspect an entity to get its type. Only works for nodes and users.
 *
 * @param stdClass $entity
 * @return string|bool
 */
//function moonmars_channels_get_entity_type($entity) {
//  if (isset($entity->name)) {
//    return 'user';
//  }
//  if (isset($entity->title)) {
//    return 'node';
//  }
//  return FALSE;
//}

/**
 * Creates a new channel for an entity.
 *
 * @param string $entity_type
 * @param int $entity_id
 * @return int
 */
function moonmars_channels_create_channel($entity_type, $entity_id) {
  // Load the entity
  $entity = entity_load_single($entity_type, $entity_id);

  // Determine the title and path alias for the channel:
  switch ($entity_type) {
    case 'node':
      $title = ucfirst($entity->type) . ': ' . $entity->title;
      break;

    case 'user':
      $title = 'Member: ' . $entity->name;
      break;
  }

  // Create the new node:
  $alias = drupal_get_path_alias("$entity_type/$entity_id") . '/channel';
  $channel_node = node_create('channel', $title, TRUE, $alias);

  // Set the channel uid to match the node or user entity:
  $channel_node->uid = $entity->uid;

  // Save the node for the first time, which will give it a nid:
  node_save($channel_node);

  // Create the relationship between the entity and the relationship:
  moonmars_relationships_create_relationship('has_channel', $entity_type, $entity_id, 'node', $channel_node->nid, TRUE);

  return $channel_node->nid;
}

/**
 * Get an entity's channel.
 *
 * @param string $entity_type
 * @param int $entity_id
 * @param bool $create
 * @return int
 */
function moonmars_channels_get_channel($entity_type, $entity_id, $create = TRUE) {
  // Check if the entity already has a channel:
  $rels = moonmars_relationships_get_relationships('has_channel', $entity_type, $entity_id, 'node', NULL);

  if (!empty($rels)) {
    return $rels[0]->entity_id1;
  }

  // If the entity has no channel, and $create is TRUE, create the channel now:
  if ($create) {
    return moonmars_channels_create_channel($entity_type, $entity_id);
  }

  return FALSE;
}

/**
 * Get the entity that a channel belongs to.
 *
 * @param int $channel_nid
 */
function moonmars_channels_get_entity($channel_nid) {
  static $entity_cache;

  if (!isset($entity_cache[$channel_nid])) {
    $rels = moonmars_relationships_get_relationships('has_channel', NULL, NULL, 'node', $channel_nid);
    if (empty($rels)) {
      return FALSE;
    }

    // Store the result in the cache:
    $entity_cache[$channel_nid] = array(
      'entity_type' => $rels[0]->entity_type0,
      'entity_id' => $rels[0]->entity_id0,
      'alias' => drupal_get_path_alias($rels[0]->entity_type0 . '/' . $rels[0]->entity_id0)
    );
  }

  return $entity_cache[$channel_nid];
}

/**
 * Implements hook_node_insert().
 */
function moonmars_channels_node_insert($node) {
  if (in_array($node->type, moonmars_channels_node_types())) {
    // Ensure that a channel exists for the node:
    moonmars_channels_get_channel('node', $node->nid);
  }
}

/**
 * Implements hook_node_update().
 */
function moonmars_channels_node_update($node) {
  // Ensure that a channel exists for the node:
  moonmars_channels_node_insert($node);
}

/**
 * Implements hook_user_insert().
 */
function moonmars_channels_user_insert(&$edit, $account, $category) {
  // Ensure that a channel exists for the user:
  moonmars_channels_get_channel('user', $account->uid);
}

/**
 * Implements hook_user_update().
 */
function moonmars_channels_user_update(&$edit, $account, $category) {
  // Ensure that a channel exists for the user:
  moonmars_channels_user_insert($edit, $account, $category);
}

/**
 * Determine if a user can post in a channel.
 *
 * @param int $channel_nid
 * @param int $uid
 * @return bool
 */
function moonmars_channels_can_post($channel_nid, $uid) {
  // Can only post in channels when the channel is embedded in an entity page:
  if (!moonmars_channels_is_embedded_channel_page()) {
    return FALSE;
  }

  $entity = moonmars_channels_get_entity($channel_nid);

  if ($entity['entity_type'] == 'user') {
    return $entity['entity_id'] == $uid;
  }
  else {
    // $entity_type == 'node'
    $node = node_load($entity['entity_id']);
    if ($node->type == 'group') {
      return moonmars_groups_is_member($node, $uid);
    }
  }
  return FALSE;
}

/**
 * Checks if we're on a node page with an embedded channel.
 *
 * @return bool
 */
function moonmars_channels_is_embedded_channel_page() {
  $n_args = arg_count();

  if (is_uint(arg(1))) {
    if (arg(0) == 'user') {
      return $n_args == 2 || ($n_args == 3 && arg(2) == 'all');
    }

    if (arg(0) == 'node' && $n_args == 2) {
      $node = node_load(arg(1));
      return in_array($node->type, moonmars_channels_node_types());
    }
  }

  return FALSE;
}

/**
 * Get the nids of items in a channel.
 *
 * @param int $channel_nid
 * @param bool $include_copied_items
 * @param int $offset
 * @param int $limit
 * @return array
 */
function moonmars_channels_get_items($channel_nid, $include_copied_items = TRUE, $offset = NULL, $limit = NULL) {
  // Look for a relationship record:
  $q = db_select('view_channel_has_item', 'vci')
    ->fields('vci', array('item_nid', 'copied'))
    ->condition('channel_nid', $channel_nid);

  // Add condition if we want to exclude copied items:
  if (!$include_copied_items) {
    $q->condition(db_or()->condition('copied', 0)->condition('copied'));
  }

  // Add LIMIT clause:
  if ($offset !== NULL && $limit !== NULL) {
    $q->range($offset, $limit);
  }

  // Add ORDER BY clause:
  $q->orderBy('changed', 'DESC');

//  dbg_query($q);

  // Get the items:
  $rs = $q->execute();
  $items = array();
  foreach ($rs as $rec) {
    $item = node_load($rec->item_nid);

    // Remember the current channel nid in the node, so we can easily access it in prepreocess-node.inc:
    $item->current_channel_nid = $channel_nid;

    // If the item was copied, get some info about this:
    $item->copied = (bool) $rec->copied;
    if ($rec->copied) {
      $item->original_channel = moonmars_items_get_original_channel($rec->item_nid);
    }

    $items[] = $item;
  }
  return $items;
}

/**
 * Get the subscribers to a channel.
 *
 * @param int $channel_nid
 * @return array
 */
function moonmars_channels_get_subscribers($channel_nid) {
  // Get the subscribers:
  $q = db_select('view_channel_has_subscriber', 'v')
    ->fields('v', array('subscriber_uid'))
    ->condition('channel_nid', $channel_nid)
    ->orderBy('created', 'ASC');

  // Get the subscribers:
  $rs = $q->execute();
  $subscribers = array();
  foreach ($rs as $rec) {
    $subscriber = user_load($rec->subscriber_uid);
    $subscribers[] = $subscriber;
  }
  return $subscribers;
}

/**
 * Render a channel.
 *
 * @param int $channel_nid
 * @param bool $include_copied_items
 * @return string
 */
function moonmars_channels_render_channel($channel_nid, $include_copied_items = TRUE) {
  // Get the page number:
  $page = isset($_GET['page']) ? ((int) $_GET['page']) : 0;
  $page_size = 10;

  // Get some items from this channel:
  $items = moonmars_channels_get_items($channel_nid, $include_copied_items, $page * $page_size, $page_size);

  // Render the items:
  return moonmars_channels_render_nodes($items);
}

/**
 * Checks if an item is in a given channel.
 *
 * @param int $channel_nid
 * @param int $item_nid
 * @return bool
 */
function moonmars_channels_channel_has_item($channel_nid, $item_nid) {
  return (bool) moonmars_relationships_get_relationships('has_item', 'node', $channel_nid, 'node', $item_nid);
}

/**
 * Checks if an item is in a given entity's channel.
 *
 * @param string $entity_type
 * @param int $entity_id
 * @param int $item_nid
 * @return bool
 */
function moonmars_channels_entity_channel_has_item($entity_type, $entity_id, $item_nid) {
  $channel_nid = moonmars_channels_get_channel($entity_type, $entity_id);
  return moonmars_channels_channel_has_item($channel_nid, $item_nid);
}

/**
 * Get a link to a channel's entity's page.
 *
 * @param $channel_nid
 * @return string
 */
function moonmars_channels_get_link($channel_nid) {
  $channel_title = node_get_title($channel_nid);
  $entity = moonmars_channels_get_entity($channel_nid);
  return l($channel_title, $entity['alias']);
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Posting and updating items in channels.

/**
 * Add an item to a channel.
 *
 * @param int $item_nid
 *   The item being posted.
 * @param int $channel_nid
 *   The channel where the item is being posted.
 * @return int
 */
function moonmars_channels_add_item($item_nid, $channel_nid) {
  dpm("Posting item $item_nid in channel $channel_nid");

  // Check if the item is already in the specified channel:
  $rels = moonmars_relationships_get_relationships('has_item', 'node', $channel_nid, 'node', $item_nid);

  if ($rels) {
    // Just load the relationship; saving it will update the changed field.
    $rel = relation_load($rels[0]->rid);
  }
  else {
    // Create a new relationship:
    $rel = moonmars_relationships_create_relationship('has_item', 'node', $channel_nid, 'node', $item_nid, FALSE);

    // Get the item's original channel:
    $original_channel_nid = moonmars_items_get_original_channel_nid($item_nid);

    // Set the copied flag:
    $rel->field_copied[LANGUAGE_NONE][0]['value'] = (int) ($original_channel_nid && $channel_nid != $original_channel_nid);
  }

  // Save the relationship (which will update the changed field) and return the rid:
  return relation_save($rel);
}

/**
 * Add all the subcribers to a channel to a set of member uids.
 *
 * @param Set $member_uids
 * @param int $channel_nid
 */
function moonmars_channels_add_subscribers(Set &$member_uids, $channel_nid) {
  $subscribers = moonmars_channels_get_subscribers($channel_nid);
  foreach ($subscribers as $subscriber_uid) {
    // Add the item to the subscriber's feed:
    $member_uids->add($subscriber_uid);
  }
}

/*
Things that can happen to an item:

  1. A new item can be posted. (post_item)
     a) The item should be added to the channel where it was posted.
     b) The item should also be copied to the feed of:
        i)   Everyone subscribed to that channel.
        ii)  Everyone following the poster.
        iii) Everyone mentioned in the item text.
        iv)  Everyone following a tag that appears in the item text.

  2. An item can be edited (only if no comments by other members, or by an admin). (edit_item)
     a) The item should be bumped in the channel where it was edited.
     b) The item should be bumped in the channel where it was originally posted.
     c) The item should also be copied to or bumped in the feed of:
        i)   Everyone subscribed to the channel where the item has been edited.
        i)   Everyone subscribed to the original channel where the item was posted (if different).
        ii)  Everyone following the person who edited the item.
        ii)  Everyone following the original poster (if different).
        iii) Everyone mentioned in the item text.
        iv)  Everyone following a tag that appears in the item text.

  3. An item can be commented on (if the member is subscribed to the channel). (comment_item - same as edit_item?)
     a) The item should be bumped in the channel where it was commented on.
     b) The item should be bumped in the channel where it was originally posted (if different).
     c) The item should also be copied to or bumped in the feed of:
        i)   Everyone subscribed to the channel where the item has been commented on.
        i)   Everyone subscribed to the original channel where the item was posted (if different).
        ii)  Everyone following the person who submitted the comment.
        ii)  Everyone following the original poster (if different).
        iii) Everyone mentioned in the item text.
        iv)  Everyone following a tag that appears in the item text.

  4. An item can be deleted (only if no comments by other members, or by an admin). (delete_item)
     a) The item should be hidden from every channel where it is.
     b) All comments connected to that item should also be hidden.

*/

/**
 * Post or edit an item or comment.
 * Copy the update to all relevant channels and send notifications.
 *
 * @param int $item_nid
 *   The item being posted, edited or commented on.
 * @param bool $is_new
 *   TRUE if the post is new, FALSE if editing an existing post.
 * @param bool $is_comment
 *   TRUE if the post is a comment, FALSE if an item.
 */
function moonmars_channels_post_item($item_nid, $is_new, $is_comment) {
  // Current channel:
  $current_channel_nid = $_SESSION['current_channel_nid'];

  // Current poster:
  global $user;
  $poster_uid = $user->uid;
  $poster = Member::create($poster_uid);
  $poster_channel_nid = $poster->channel();

  /////////////////////////////////////////////////////////////////////////////
  // Step 1. Add or bump the item in the current channel.
  moonmars_channels_add_item($item_nid, $current_channel_nid);

  /////////////////////////////////////////////////////////////////////////////
  // Step 2. Add or bump the item in the original channel, if different.
  if ($is_new && !$is_comment) {
    // New item. The current channel will be the original channel. No need to bump.
    $original_channel_nid = $current_channel_nid;
  }
  else{
    $original_channel_nid = moonmars_items_get_original_channel_nid($item_nid);
    if ($original_channel_nid != $current_channel_nid) {
      moonmars_channels_add_item($item_nid, $original_channel_nid);
    }
  }

  /////////////////////////////////////////////////////////////////////////////
  // Step 3. Find out which members are interested in this:
  $subscriber_uids = new Set;

  //   a) The current user, i.e. the posting member.
  $subscriber_uids->add($poster_uid);

  //   b) Everyone subscribed to the channel where the item has been edited.
  moonmars_channels_add_subscribers($subscriber_uids, $current_channel_nid);

  //   c) Everyone subscribed to the original channel where the item was posted (if different).
  if ($original_channel_nid != $current_channel_nid) {
    moonmars_channels_add_subscribers($subscriber_uids, $original_channel_nid);
  }

  //   d) Everyone following the person who edited the item.
  moonmars_channels_add_subscribers($subscriber_uids, $poster_channel_nid);

  //   e) Everyone following the original poster (if different).
  $original_poster_uid = moonmars_items_original_poster_uid($item_nid);
  if ($original_poster_uid != $poster_uid) {
    $original_poster = Member::create($original_poster_uid);
    $original_poster_channel_nid = $original_poster->channel();
    moonmars_channels_add_subscribers($subscriber_uids, $original_poster_channel_nid);
  }

  //   f) Everyone mentioned in the item text. @todo
  //   g) Everyone following a tag that appears in the item text. @todo

  /////////////////////////////////////////////////////////////////////////////
  // Step 4. Copy/bump the item in all the channels of all relevant subscribers:
  $subscriber_uids = $subscriber_uids->toArray();
  foreach ($subscriber_uids as $subscriber_uid) {
    // Get the subscriber's channel:
    $subscriber = Member::create($subscriber_uid);
    $subscriber_channel_nid = $subscriber->channel();

    // Copy/bump the item:
    moonmars_channels_add_item($item_nid, $subscriber_channel_nid);

    // Send notifications to everyone who isn't the posting subscriber:
    if ($subscriber_uid != $poster_uid) {
      if (!$is_comment) {
        // New item posted or existing item edited:
        $current_channel_link = moonmars_channels_get_link($current_channel_nid);
        $action = $is_new ? "posted a new item" : "edited an item";
        $message = $poster->link() . " $action in $current_channel_link.";
      }
      else {
        // New comment posted or existing comment edited:
        $poster = $subscriber_uid == $original_poster_uid ? 'you' : $original_poster->link();
        $original_channel_link = moonmars_channels_get_link($original_channel_nid);
        $action = $is_new ? "commented on an item" : "updated their comment on an item";
        $message = $poster->link() . " $action posted by $poster in $original_channel_link.";
      }
      // Send the notification
      $subscriber->notify($message);
    }
  }
}
