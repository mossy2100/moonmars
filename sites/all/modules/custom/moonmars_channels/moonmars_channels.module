<?php

define('MOONMARS_CHANNEL_DEFAULT_PAGE_SIZE', 10);
define('MOONMARS_NEWS_CHANNEL_NID', 467);

/**
 * Implements hook_menu().
 */
function moonmars_channels_menu() {
  $items = array();
  $items['user/%/subscriptions'] = array(
    'page callback'    => 'moonmars_channels_list',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['subscriptions/update'] = array(
    'page callback'    => 'moonmars_channels_update_subscriptions',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 */
function moonmars_channels_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'channel_node_form') {
    // Update the title:
    $channel = Channel::create($form['#node']);
    drupal_set_title("Edit links for " . $channel->parentEntityName());

    // Remove the title field from the form:
    unset($form['title']);

    // Is the user on their own profile:
    $parent = $channel->parentEntity();
    $own_profile = ($parent instanceof Member) && Member::equals($parent, Member::currentMember());

    $social_links = moonmars_channels_social_links();
    foreach ($social_links as $social_link => $social_link_info) {
      // Add the icon to the link fields:
      $link_field = $social_link_info['field'];
      $image_path = "/" . drupal_get_path('theme', 'astro') . "/images/social-icons/" . $social_link . "-25x25.png";
      $form[$link_field][LANGUAGE_NONE][0]['#title'] = "<img class='social-link-icon' src='$image_path'>&nbsp;" . $form[$link_field][LANGUAGE_NONE][0]['#title'];

      // If the user is editing their own profile, make the description a bit more user-friendly:
      if ($own_profile) {
        $form[$link_field][LANGUAGE_NONE][0]['#description'] = str_replace('the member/group/etc. has', 'you have', $form[$link_field][LANGUAGE_NONE][0]['#description']);
      }
    }

    // Remove buttons we don't want:
    unset($form['actions']['delete']);
    unset($form['actions']['preview']);

    // Submit handler:
    $form['actions']['submit']['#submit'][] = 'moonmars_channels_channel_node_form_submit';
  }
}

/**
 * Submit handler for channel_node_form.
 *
 * @param $form
 * @param $form_state
 */
function moonmars_channels_channel_node_form_submit($form, &$form_state) {
  $channel = Channel::create($form['#node']);
  $form_state['redirect'] = $channel->parentEntity()->alias();
}

/**
 * Return array of node types that have channels.
 *
 * @return array
 */
function moonmars_channels_node_types() {
  return array(
    'group',
    'event',
    'project'
  );
}

/**
 * Get the social link fields.
 *
 * @return array
 */
function moonmars_channels_social_links() {
  return array(
    'website'     => array(
      'name'        => 'Website',
      'field'       => 'field_website',
      'domain'      => '',
      'description' => 'official website',
    ),
    'facebook'    => array(
      'name'        => 'Facebook',
      'field'       => 'field_facebook_link',
      'domain'      => 'facebook.com',
      'description' => 'Facebook profile',
    ),
    'linkedin'    => array(
      'name'        => 'LinkedIn',
      'field'       => 'field_linkedin_link',
      'domain'      => 'linkedin.com',
      'description' => 'LinkedIn profile',
    ),
    'twitter'     => array(
      'name'        => 'Twitter',
      'field'       => 'field_twitter_link',
      'domain'      => 'twitter.com',
      'description' => 'Twitter profile',
    ),
    'google-plus' => array(
      'name'        => 'Google+',
      'field'       => 'field_google_link',
      'domain'      => 'plus.google.com',
      'description' => 'Google+ profile',
    ),
    'youtube'     => array(
      'name'        => 'YouTube',
      'field'       => 'field_youtube_link',
      'domain'      => 'youtube.com',
      'description' => 'YouTube channel',
    ),
    'wikipedia'   => array(
      'name'        => 'Wikipedia',
      'field'       => 'field_wikipedia_link',
      'domain'      => 'wikipedia.org',
      'description' => 'Wikipedia entry',
    ),
    'flickr'      => array(
      'name'        => 'Flickr',
      'field'       => 'field_flickr_link',
      'domain'      => 'flickr.com',
      'description' => 'Flickr profile',
    ),
    'meetup'      => array(
      'name'        => 'Meetup',
      'field'       => 'field_meetup_link',
      'domain'      => 'meetup.com',
      'description' => 'Meetup profile',
    ),
    'academia'   => array(
      'name'        => 'Academia',
      'field'       => 'field_academia_link',
      'domain'      => 'academia.edu',
      'description' => 'Academia profile',
    ),
  );
}

/**
 * Common code for inserting or updating nodes.
 * 
 * @param $entity
 * @param $entity_type
 */
function moonmars_channels_entity_save($entity, $entity_type) {
  // Update the channel's alias and title in case the entity's title was changed:
  $entity = MoonMarsEntity::getEntity($entity_type, $entity);
  if ($entity && method_exists($entity, 'channel')) {
    $channel = $entity->channel();
    $channel->updateAliasAndTitle();
  }
}

/**
 * Implements hook_entity_insert().
 */
function moonmars_channels_entity_insert($entity, $entity_type) {
  moonmars_channels_entity_save($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function moonmars_channels_entity_update($entity, $entity_type) {
  moonmars_channels_entity_save($entity, $entity_type);
}

/**
 * Checks if we're on a node page with an embedded channel.
 *
 * @return bool
 */
function moonmars_channels_is_embedded_channel_page() {
  $n_args = arg_count();

  if ($n_args == 2 && is_uint(arg(1))) {
    if (arg(0) == 'user') {
      return TRUE;
    }
    elseif (arg(0) == 'node') {
      $node = node_load(arg(1));
      return in_array($node->type, moonmars_channels_node_types());
    }
  }

  return FALSE;
}

/**
 * Reorder the channels by title.
 *
 * @param $channels
 */
function moonmars_channels_sort_by_title(&$channels) {
  usort($channels, function ($channel1, $channel2) {
    $channel1_title = strtolower($channel1->title());
    $channel2_title = strtolower($channel2->title());
    if ($channel1_title == $channel2_title) {
      return 0;
    }
    elseif ($channel1_title < $channel2_title) {
      return -1;
    }
    else {
      return 1;
    }
  });
}

/**
 * List all channels, and show whether the member is subscribed to them or not.
 *
 * @todo Update this to use the Forms API. Will need to convert much of this to a custom render function.
 */
function moonmars_channels_list() {
  // Get the current member and their subscriptions:
  $current_member = Member::currentMember();
  $channels = $current_member->subscribedChannels();

  // Reorder the channels by title:
  moonmars_channels_sort_by_title($channels);

  $header = array(
    'Title',
    "<input type='checkbox' id='subscribed-all'> Subscribed?",
    "<input type='checkbox' id='email-notification-all'> Email notifications?",
  );

  foreach ($channels as $channel) {
    $channel_nid = $channel->nid();
    $subscriber_rel = $channel->getSubscriberRelationship($current_member);
    $subscribed = (bool) $subscriber_rel;
    $email_notification = $subscribed ? ((bool) $subscriber_rel->field('field_email_notification')) : FALSE;

    $row = array(
      $channel->parentEntityLink(),
      "<input type='checkbox' id='subscribed-$channel_nid' name='subscribed[$channel_nid]'" . ($subscribed ? " checked" : "") . " class='subscribed'>",
      "<input type='checkbox' id='email-notification-$channel_nid' name='email_notification[$channel_nid]'" . ($subscribed ? ($email_notification ? " checked" : "") : " disabled") . " class='email-notification'>",
    );

    // Add the row:
    $rows[] = $row;
  }

  $table = array(
    'header' => $header,
    'rows' => $rows,
  );

  $html = '';
  $html .= "<p>This page lists all of the channels you're subscribed to. You can update your subscriptions, and specify if you want email notifications for each channel. <a href='/handbook/channels'>Find out more about channels.</a></p>";
  $html .= "<form id='subscriptions-form' action='/subscriptions/update' method='post'>";
  $html .= theme('table', $table);
  $html .= "
    <div id='channels-button'>
      <input type='submit' value='Update subscriptions'>
    </div>
  ";
  $html .= "</form>";

  drupal_add_js(drupal_get_path('module', 'moonmars_channels') . '/js/subscriptions.js');

  return $html;
}

/**
 * Update a member's subscriptions.
 * @todo Move this to a submit handler.
 */
function moonmars_channels_update_subscriptions() {
  // Get the current member and their subscriptions:
  $current_member = Member::currentMember();
  $channels = $current_member->subscribedChannels();

  // Update the member's subscriptions:
  foreach ($channels as $channel) {
    $channel_nid = $channel->nid();
    $subscribed = isset($_POST['subscribed'][$channel_nid]) ? ((bool) $_POST['subscribed'][$channel_nid]) : FALSE;
    if ($subscribed) {
      $email_notification = isset($_POST['email_notification'][$channel_nid]) ? ((bool) $_POST['email_notification'][$channel_nid]) : FALSE;
      $current_member->subscribe($channel, $email_notification);
    }
    else {
      $current_member->unsubscribe($channel);
    }
  }

  drupal_set_message("Your subscriptions have been updated. Have a great day!");
  drupal_goto($current_member->alias());
}
