<?php

define('MOONMARS_CHANNEL_DEFAULT_PAGE_SIZE', 10);
define('MOONMARS_NEWS_CHANNEL_NID', 467);

/**
 * Implements hook_menu().
 */
function moonmars_channels_menu() {
  $items = array();
  $items['user/%/subscriptions'] = array(
    'page callback'    => 'moonmars_channels_list',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_NORMAL_ITEM,
  );
  $items['subscriptions/update'] = array(
    'page callback'    => 'moonmars_channels_update_subscriptions',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Return array of node types that have channels.
 *
 * @return array
 */
function moonmars_channels_node_types() {
  return array(
    'group',
    'event',
    'project'
  );
}

/**
 * Common code for inserting or updating nodes.
 * 
 * @param $entity
 * @param $entity_type
 */
function moonmars_channels_entity_save($entity, $entity_type) {
  // Update the channel's alias and title in case the entity's title was changed:
  $entity = MmcEntity::getEntity($entity_type, $entity);
  if ($entity) {
    $channel = $entity->channel();
    $channel->updateAliasAndTitle();
  }
}

/**
 * Implements hook_entity_insert().
 */
function moonmars_channels_entity_insert($entity, $entity_type) {
  moonmars_channels_entity_save($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function moonmars_channels_entity_update($entity, $entity_type) {
  moonmars_channels_entity_save($entity, $entity_type);
}

/**
 * Checks if we're on a node page with an embedded channel.
 *
 * @return bool
 */
function moonmars_channels_is_embedded_channel_page() {
  $n_args = arg_count();

  if ($n_args == 2 && is_uint(arg(1))) {
    if (arg(0) == 'user') {
      return TRUE;
    }
    elseif (arg(0) == 'node') {
      $node = node_load(arg(1));
      return in_array($node->type, moonmars_channels_node_types());
    }
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function moonmars_channels_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  switch ($form_id) {
    case 'channel_node_form':
      $channel = Channel::create($form['#node']);

      // Update the title:
      drupal_set_title("Edit links for " . $channel->parentEntityName());

      // Hide the channel title field:
      unset($form['title']);

      // Submit handler:
      $form['actions']['submit']['#submit'][] = 'moonmars_channels_channel_node_form_submit';

      break;
  }
}

/**
 * Submit handler for channel_node_form.
 *
 * @param $form
 * @param $form_state
 */
function moonmars_channels_channel_node_form_submit($form, &$form_state) {
  $channel = Channel::create($form['#node']);
  $form_state['redirect'] = $channel->parentEntity()->alias();
}

/**
 * Reorder the channels by title.
 *
 * @param $channels
 */
function moonmars_channels_sort_by_title(&$channels) {
  usort($channels, function ($channel1, $channel2) {
    $channel1_title = strtolower($channel1->title());
    $channel2_title = strtolower($channel2->title());
    if ($channel1_title == $channel2_title) {
      return 0;
    }
    elseif ($channel1_title < $channel2_title) {
      return -1;
    }
    else {
      return 1;
    }
  });
}

/**
 * List all channels, and show whether the member is subscribed to them or not.
 *
 * @todo Update this to use the Forms API. Will need to convert much of this to a custom render function.
 */
function moonmars_channels_list() {
  // Get the current member and their subscriptions:
  $current_member = Member::currentMember();
  $channels = $current_member->subscribedChannels();

  // Reorder the channels by title:
  moonmars_channels_sort_by_title($channels);

  $header = array(
    'Title',
    "<input type='checkbox' id='subscribed-all'> Subscribed?",
    "<input type='checkbox' id='email-notification-all'> Email notifications?",
  );

  foreach ($channels as $channel) {
    $channel_nid = $channel->nid();
    $subscriber_rel = $channel->getSubscriberRelationship($current_member);
    $subscribed = (bool) $subscriber_rel;
    $email_notification = $subscribed ? ((bool) $subscriber_rel->field('field_email_notification')) : FALSE;

    $row = array(
      $channel->parentEntityLink(),
      "<input type='checkbox' id='subscribed-$channel_nid' name='subscribed[$channel_nid]'" . ($subscribed ? " checked" : "") . " class='subscribed'>",
      "<input type='checkbox' id='email-notification-$channel_nid' name='email_notification[$channel_nid]'" . ($subscribed ? ($email_notification ? " checked" : "") : " disabled") . " class='email-notification'>",
    );

    // Add the row:
    $rows[] = $row;
  }

  $table = array(
    'header' => $header,
    'rows' => $rows,
  );

  $html = '';
  $html .= "<p>This page lists all of the channels you're subscribed to. You can update your subscriptions, and specify if you want email notifications for each channel. <a href='/handbook/channels'>Find out more about channels.</a></p>";
  $html .= "<form id='subscriptions-form' action='/subscriptions/update' method='post'>";
  $html .= theme('table', $table);
  $html .= "
    <div id='channels-button'>
      <input type='submit' value='Update subscriptions'>
    </div>
  ";
  $html .= "</form>";

  drupal_add_js(drupal_get_path('module', 'moonmars_channels') . '/js/subscriptions.js');

  return $html;
}

/**
 * Update a member's subscriptions.
 * @todo Move this to a submit handler.
 */
function moonmars_channels_update_subscriptions() {
  // Get the current member and their subscriptions:
  $current_member = Member::currentMember();
  $channels = $current_member->subscribedChannels();

  // Update the member's subscriptions:
  foreach ($channels as $channel) {
    $channel_nid = $channel->nid();
    $subscribed = isset($_POST['subscribed'][$channel_nid]) ? ((bool) $_POST['subscribed'][$channel_nid]) : FALSE;
    if ($subscribed) {
      $email_notification = isset($_POST['email_notification'][$channel_nid]) ? ((bool) $_POST['email_notification'][$channel_nid]) : FALSE;
      $current_member->subscribe($channel, $email_notification);
    }
    else {
      $current_member->unsubscribe($channel);
    }
  }

  drupal_set_message("Your subscriptions have been updated. Have a great day!");
  drupal_goto($current_member->alias());
}
