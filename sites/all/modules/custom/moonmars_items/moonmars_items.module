<?php

use \AstroMultimedia\MoonMars\Member;
use \AstroMultimedia\MoonMars\Group;
use \AstroMultimedia\MoonMars\Topic;
use \AstroMultimedia\MoonMars\Channel;
use \AstroMultimedia\MoonMars\Item;
use \AstroMultimedia\MoonMars\Triumph;
use \AstroMultimedia\MoonMars\Relation;

/**
 * Implements hook_menu().
 */
function moonmars_items_menu() {
  $items['ajax/item/edit'] = array(
    'page callback'    => 'moonmars_items_ajax_edit',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['ajax/item/delete'] = array(
    'page callback'    => 'moonmars_items_ajax_delete',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['ajax/item/remove'] = array(
    'page callback'    => 'moonmars_items_ajax_remove',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Create the form for posting new items in group channels.
 *
 * @todo Make this more generic so it can be used for user and event channels as well.
 *
 * @return array
 */
//function moonmars_items_form() {
//  $group_nid = arg(1);
//
//
//
////  $form = drupal_get_form('node_form_item');
//  $form['new-item'] = array(
//    '#type' => 'textarea',
//    '#title' => t('Share something:'),
//    '#resizable' => FALSE,
//    '#value' => '',
//    '#rows' => 2,
//  );
//  $form['new-item-link'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Link:'),
//    '#value' => '',
//  );
//  $form['new-item-image'] = array(
//    '#type' => 'file',
//    '#title' => t('File:'),
//    '#value' => '',
//  );
//  $form['group-nid'] = array(
//    '#type' => 'hidden',
//    '#default_value' => $group_nid,
//  );
//  $form['post-button'] = array(
//    '#markup' => "<button id='post-button'>Post</button>",
//  );
//  return $form;
//}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Forms stuff

/**
 * Implements hook_form_FORM_ID_alter().
 */
function moonmars_items_form_item_node_form_alter(&$form, &$form_state) {
  // Check we're on a channel page:
  $channel = Channel::currentChannel();
  if ($channel) {

    // Hide stuff we don't want to see:
    unset($form['title']);
    unset($form['field_score']);
    unset($form['field_item_system']);
    unset($form['additional_settings']);
    unset($form['revision_information']);
    unset($form['author']);
    unset($form['comment_settings']);
    unset($form['options']);
    unset($form['book']);
    unset($form['field_item_type'][LANGUAGE_NONE]['#title']);
    unset($form['field_item_text'][LANGUAGE_NONE][0]['value']['#title']);
    unset($form['field_item_link'][LANGUAGE_NONE][0]['#title']);
    unset($form['field_item_image'][LANGUAGE_NONE][0]['#title']);
    unset($form['field_item_video'][LANGUAGE_NONE][0]['fid']['#title']);
    unset($form['field_item_document'][LANGUAGE_NONE][0]['#title']);

    // Change the button label:
    $form['actions']['submit']['#value'] = t('Post');

    // Make the textarea non-resizable and only 1 row high. We will use the autoresize() plugin on the client.
    $form['field_item_text']['#wysiwyg'] = FALSE;
    $form['field_item_text'][LANGUAGE_NONE][0]['value']['#rows'] = 1;

//    dbg($form);

    // Validation handler.
//    $form['actions']['submit']['#validate'][] = 'moonmars_items_form_validate';

    // Submit handler.
    $form['actions']['submit']['#submit'][] = 'moonmars_items_form_submit';
  }
}

///**
// * Validation handler for add new item form.
// */
//function moonmars_items_form_validate($form, &$form_state) {
////  dpm($form_state['values']);
//
////  // Check we have a type:
////  if (!$form_state['values']['field_item_type'][LANGUAGE_NONE][0]['value']) {
////    form_set_error('field_item_type][und][0][value', "Select the type of item you wish to share.");
////  }
//
//  // Check we have a text field:
//  if (!$form_state['values']['field_item_text'][LANGUAGE_NONE][0]['value']) {
//    form_set_error('field_item_text', "Please enter some text.");
//  }
//
////  // For non-text types, ensure that the other field is filled in:
////  switch ($form_state['values']['field_item_type'][LANGUAGE_NONE][0]['value']) {
////    case 'image':
////      if (!$form_state['values']['field_item_image'][LANGUAGE_NONE][0]['fid']) {
////        form_set_error('field_item_image][und][0][fid', "If you want to share an image, please upload one from your computer.");
////      }
////      break;
////
////    case 'document':
////      if (!$form_state['values']['field_item_document'][LANGUAGE_NONE][0]['fid']) {
////        form_set_error('field_item_document][und][0][fid', "If you want to share a document, please upload one from your computer.");
////      }
////      break;
////
////    case 'video':
////      if (!$form_state['values']['field_item_video'][LANGUAGE_NONE][0]['fid']) {
////        form_set_error('field_item_video][und][0][fid', "If you want to share a video, please paste a YouTube URL in the field provided.");
////      }
////      break;
////
////    case 'link':
////      if (!$form_state['values']['field_item_link'][LANGUAGE_NONE][0]['url']) {
////        form_set_error('field_item_link][und][0][url', "If you want to share a link, please paste the URL in the field provided.");
////      }
////      break;
////  }
//}

/**
 * Submit handler for add new item form.
 *
 */
function moonmars_items_form_submit($form, &$form_state) {
  // Redirect back to the star page:
  // Note, we don't use the item's channel here, but the current channel, as the user may be viewing the item in a
  // different channel.
  $channel = Channel::currentChannel();
  $star = $channel->star();
  if ($star) {
    $form_state['redirect'] = $star->alias();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Node hooks.

/**
 * Implement hook_node_presave().
 * @todo update when we replace items with posts.
 */
function moonmars_items_node_presave($node) {
  if ($node->type == 'item') {
    // Get the item text:
    $text = $node->field_item_text[LANGUAGE_NONE][0]['value'];

    // If the item is a image, copy the entered text to the image title:
    if (isset($node->field_item_image[LANGUAGE_NONE][0]['fid']) && $node->field_item_image[LANGUAGE_NONE][0]['fid']) {
      $node->field_item_image[LANGUAGE_NONE][0]['title'] = $text;
    }

    // Set the title to a trimmed version of the text:
    $node->title = moonmars_text_trim($text);
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Note, we use this hook instead of hook_node_insert() or hook_user_insert() as it gets called later in the cycle,
 * after pathauto_node_insert_alias() sets the alias according to the pattern.
 */
function moonmars_items_entity_insert($entity, $entity_type) {
  moonmars_items_entity_save($entity, $entity_type, TRUE);
}

/**
 * Implements hook_entity_update().
 *
 * This hook is invoked after the node or user is saved to the database and immediately after hook_user_update() or
 * hook_node_update().
 * Event order:
 *   1. Save user/node to the database
 *   2. Invoke user_update/node_update
 *   3. Invoke entity_update
 *
 * We use this hook instead of hook_node_update() as it gets called later in the cycle, after
 * pathauto_node_update_alias() sets the alias according to the pattern.
 */
function moonmars_items_entity_update($entity, $entity_type) {
  moonmars_items_entity_save($entity, $entity_type, FALSE);
}

/**
 * Called when updating or creating an item.
 *
 * @param stdClass $entity
 * @param string $entity_type
 * @param bool $is_new
 */
function moonmars_items_entity_save($entity, $entity_type, $is_new) {
  // Check if the entity is an item:
  if ($entity_type == 'node' && $entity->type == 'item') {

    // Get the Item object:
    $item = moonmars_actors_get_actor($entity_type, $entity);

    // If the item is new...
    if ($is_new) {
      // Add it to the channel where it was posted:
      $channel = Channel::currentChannel();
      if ($channel) {
        $channel->postItem($item);
      }
      // Create a new-item triumph:
      Triumph::newItem($item);
    }
    else {
      // Bump it to the top of the channel:
      $item->bump();
      // We aren't creating triumphs for updating items or comments.
    }

    // Update the item alias:
    $item->resetAlias();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AJAX callbacks

/**
 * Edit an item's text via AJAX.
 * @todo This is not currently used, need to build UI.
 *
 * @return string
 */
function moonmars_items_ajax_edit() {
  // Get the request parameters.
  // We use $_REQUEST so we can use POST from the form, but test using the query string (GET).
  $item_nid = (int) $_REQUEST['item_nid'];
  $text = trim($_REQUEST['text']);

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Begin the data array:
  $data = array(
    'item_nid' => $item_nid,
    'text'     => $text,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$text || !$logged_in_member) {
    // Encode result and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to edit this item:
  if (!$logged_in_member->canEditItem($item)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  /////////////////////////////////////
  // All good - update the item.

  // Update the item text:
  $item->field('field_item_text', LANGUAGE_NONE, 0, 'value', $text);

  // Save the item:
  $item->save();

  // Bump the item to the top of its channel:
  $item->bump();

  // When items are edited we won't create a new triumph (as opposed to when they're created).
  // Updates about edits are often annoying since the content is substantially the same.

  // Theme the item:
  $html = $item->render();

  // Complete data array, encode and send:
  $data['result'] = FALSE;
  $data['html'] = $html;
  echo json_encode($data);
}

/**
 * Delete an item via AJAX.
 *
 * @return string
 */
function moonmars_items_ajax_delete() {
  // Get the request parameters.
  $item_nid = isset($_REQUEST['item_nid']) ? ((int) $_REQUEST['item_nid']) : NULL;
//  $item_node_page = isset($_REQUEST['item_node_page']) ? ((bool) $_REQUEST['item_node_page']) : FALSE;

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Begin the data array:
  $data = array(
    'item_nid' => $item_nid,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$logged_in_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to delete this item:
  if (!$logged_in_member->canDeleteItem($item)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  /////////////////////////////////
  // All good - unpublish the item.

  // Don't actually delete the item, just unpublish it:
  $item->unpublish();
  $item->save();

  // Get the return channel. Default to the item's channel:
  $channel = $item->channel();
  // If for some reason the item doesn't have a channel (should never happen), return to the current channel:
  if (!$channel) {
    $channel = Channel::currentChannel();
  }
  // Last resort, return to the logged-in member's channel:
  if (!$channel) {
    $channel = $logged_in_member->channel();
  }

  // Get the star info:
  $star = $channel->star();
  $data['star_path'] = '/' . $star->alias();
  if ($star instanceof Member) {
    $data['star_label'] = '<em>' . $star->label() . "</em>'s channel";
  }
  else {
    $data['star_label'] = 'the <em>' . $star->label() . '</em> channel';
  }

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  echo json_encode($data);
  return;
}

/**
 * AJAX callback for removing items from your channel.
 */
function moonmars_items_ajax_remove() {
  // Get the request parameters.
  $item_nid = (int) $_REQUEST['item_nid'];

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Get the current channel:
  $current_channel = Channel::currentChannel();

  // Begin the data array:
  $data = array(
    'item_nid' => $item_nid,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$logged_in_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to remove this item:
  if (!$logged_in_member->canRemoveItem($item, $current_channel)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  //////////////////////////////
  // All good - remove the item.

  // Remove the item from the current channel:
  Relation::deleteBinary('has_item', $current_channel, $item);

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  echo json_encode($data);
  return;
}



