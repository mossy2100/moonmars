<?php

/**
 * Implements hook_menu().
 */
function moonmars_items_menu() {
  $items['ajax/item/edit'] = array(
    'page callback'    => 'moonmars_items_ajax_edit',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['ajax/item/delete'] = array(
    'page callback'    => 'moonmars_items_ajax_delete',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  $items['ajax/item/remove'] = array(
    'page callback'    => 'moonmars_items_ajax_remove',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Create the form for posting new items in group channels.
 *
 * @todo Make this more generic so it can be used for user and event channels as well.
 *
 * @return array
 */
//function moonmars_items_form() {
//  $group_nid = arg(1);
//
//
//
////  $form = drupal_get_form('node_form_item');
//  $form['new-item'] = array(
//    '#type' => 'textarea',
//    '#title' => t('Share something:'),
//    '#resizable' => FALSE,
//    '#value' => '',
//    '#rows' => 2,
//  );
//  $form['new-item-link'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Link:'),
//    '#value' => '',
//  );
//  $form['new-item-image'] = array(
//    '#type' => 'file',
//    '#title' => t('File:'),
//    '#value' => '',
//  );
//  $form['group-nid'] = array(
//    '#type' => 'hidden',
//    '#default_value' => $group_nid,
//  );
//  $form['post-button'] = array(
//    '#markup' => "<button id='post-button'>Post</button>",
//  );
//  return $form;
//}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Forms stuff

/**
 * Implements hook_form_alter().
 */
function moonmars_items_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'item_node_form') {

    // Hide the score:
    unset($form['field_score']);

    // If we're on a channel page:
    if (isset($GLOBALS['channel_nid']) && $GLOBALS['channel_nid']) {

      $entity_type = arg(0);
      $entity_id = (int) arg(1);

      // Set the title:
      switch ($entity_type) {
        case 'user':
          $account = user_load($entity_id);
          drupal_set_title('Member: ' . $account->name);
          break;

        case 'node':
          $node = node_load($entity_id);
          drupal_set_title(ucfirst($node->type) . ': ' . $node->title);
          break;
      }

      // Hide stuff we don't want to see:
      unset($form['title']);
      unset($form['field_score']);
      unset($form['field_item_system']);
      unset($form['additional_settings']);
      unset($form['revision_information']);
      unset($form['author']);
      unset($form['comment_settings']);
      unset($form['options']);
      unset($form['book']);
      unset($form['field_item_type'][LANGUAGE_NONE]['#title']);
      unset($form['field_item_text'][LANGUAGE_NONE][0]['value']['#title']);
      unset($form['field_item_link'][LANGUAGE_NONE][0]['#title']);
      unset($form['field_item_image'][LANGUAGE_NONE][0]['#title']);
      unset($form['field_item_video'][LANGUAGE_NONE][0]['fid']['#title']);
      unset($form['field_item_document'][LANGUAGE_NONE][0]['#title']);

      // Change the button label:
      $form['actions']['submit']['#value'] = t('Post');

      // Make the textarea non-resizable and only 2 rows high. We will use the autoresize() plugin on the client.
      $form['field_item_text']['#wysiwyg'] = FALSE;
      $form['field_item_text'][LANGUAGE_NONE][0]['value']['#rows'] = 2;

      // Add a hidden field to carry the channel nid:
      $form['channel_nid'] = array(
        '#type' => 'hidden',
        '#value' => $GLOBALS['channel_nid'],
      );

  //    dbg($form);

      // Validation handler.
  //    $form['actions']['submit']['#validate'][] = 'moonmars_items_form_validate';

      // Submit handler.
      $form['actions']['submit']['#submit'][] = 'moonmars_items_form_submit';
    }
  }
}

///**
// * Validation handler for add new item form.
// */
//function moonmars_items_form_validate($form, &$form_state) {
////  dpm($form_state['values']);
//
////  // Check we have a type:
////  if (!$form_state['values']['field_item_type'][LANGUAGE_NONE][0]['value']) {
////    form_set_error('field_item_type][und][0][value', "Select the type of item you wish to share.");
////  }
//
//  // Check we have a text field:
//  if (!$form_state['values']['field_item_text'][LANGUAGE_NONE][0]['value']) {
//    form_set_error('field_item_text', "Please enter some text.");
//  }
//
////  // For non-text types, ensure that the other field is filled in:
////  switch ($form_state['values']['field_item_type'][LANGUAGE_NONE][0]['value']) {
////    case 'image':
////      if (!$form_state['values']['field_item_image'][LANGUAGE_NONE][0]['fid']) {
////        form_set_error('field_item_image][und][0][fid', "If you want to share an image, please upload one from your computer.");
////      }
////      break;
////
////    case 'document':
////      if (!$form_state['values']['field_item_document'][LANGUAGE_NONE][0]['fid']) {
////        form_set_error('field_item_document][und][0][fid', "If you want to share a document, please upload one from your computer.");
////      }
////      break;
////
////    case 'video':
////      if (!$form_state['values']['field_item_video'][LANGUAGE_NONE][0]['fid']) {
////        form_set_error('field_item_video][und][0][fid', "If you want to share a video, please paste a YouTube URL in the field provided.");
////      }
////      break;
////
////    case 'link':
////      if (!$form_state['values']['field_item_link'][LANGUAGE_NONE][0]['url']) {
////        form_set_error('field_item_link][und][0][url', "If you want to share a link, please paste the URL in the field provided.");
////      }
////      break;
////  }
//}

/**
 * Submit handler for add new item form.
 */
function moonmars_items_form_submit($form, &$form_state) {
  if (isset($form_state['values']['channel_nid'])) {
    $GLOBALS['channel_nid'] = $form_state['values']['channel_nid'];

    // Redirect back to the entity page:
    $channel = Channel::create($GLOBALS['channel_nid']);
    $form_state['redirect'] = $channel->parentEntity()->alias();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Node hooks.

/**
 * Implement hook_node_presave().
 */
function moonmars_items_node_presave($node) {
  if ($node->type == 'item') {
    // Get the item text:
    $text = $node->field_item_text[LANGUAGE_NONE][0]['value'];

    // If the item is a image, copy the entered text to the image title:
    if (isset($node->field_item_image[LANGUAGE_NONE][0]['fid']) && $node->field_item_image[LANGUAGE_NONE][0]['fid']) {
      $node->field_item_image[LANGUAGE_NONE][0]['title'] = $text;
    }

    // Set the title to a trimmed version of the text:
    $node->title = moonmars_text_trim($text);
  }
}

/**
 * Common stuff to do if the item is inserted or updated from a channel.
 *
 * @param $node
 */
function moonmars_items_node_save($node) {
  // If the item was posted in a channel page:
  if ($node->type == 'item' && isset($GLOBALS['channel_nid']) && $GLOBALS['channel_nid']) {

    // Get the item:
    $item = Item::create($node);

    // Get the channel:
    $channel = Channel::create($GLOBALS['channel_nid']);

    // Update the alias:
    require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'pathauto') . '/pathauto.inc';
    pathauto_create_alias('node', 'insert', $item->path(), array('node' => $node), 'item');

    // Connect the item to the channel (must be done after the alias is created).
    $channel->postItem($item);
  }
}

/**
 * Implement hook_node_insert().
 */
function moonmars_items_node_insert($node) {
  moonmars_items_node_save($node);
}

/**
 * Implement hook_node_update().
 */
function moonmars_items_node_update($node) {
  moonmars_items_node_save($node);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AJAX callbacks

/**
 * Edit an item's text via AJAX.
 * @todo This is not currently used, need to build UI.
 *
 * @return string
 */
function moonmars_items_ajax_edit() {
  // Get the request parameters.
  // We use $_REQUEST so we can use POST from the form, but test using the query string (GET).
  $item_nid = (int) $_REQUEST['item_nid'];
  $text = trim($_REQUEST['text']);

  // Get the current member:
  $current_member = Member::currentMember();

  // Begin the data array:
  $data = array(
    'item_nid' => $item_nid,
    'text'     => $text,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$text || !$current_member) {
    // Encode result and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to edit this item:
  if (!$current_member->canEditItem($item)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  /////////////////////////////////////
  // All good - update the item.

  // Update the item text:
  $item->field('field_item_text', LANGUAGE_NONE, 0, 'value', $text);

  // Save the item:
  $item->save();

  // Post the item in the current channel:
  Channel::currentChannel()->postItem($item);

  // Theme the item:
  $html = $item->render();

  // Complete data array, encode and send:
  $data['result'] = FALSE;
  $data['html'] = $html;
  echo json_encode($data);
}

/**
 * Delete an item via AJAX.
 *
 * @return string
 */
function moonmars_items_ajax_delete() {
  // Get the request parameters.
  $item_nid = isset($_REQUEST['item_nid']) ? ((int) $_REQUEST['item_nid']) : NULL;
//  $item_node_page = isset($_REQUEST['item_node_page']) ? ((bool) $_REQUEST['item_node_page']) : FALSE;

  // Get the current member:
  $current_member = Member::currentMember();

  // Begin the data array:
  $data = array(
    'item_nid' => $item_nid,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$current_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to delete this item:
  if (!$current_member->canDeleteItem($item)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  /////////////////////////////////
  // All good - unpublish the item.

  // Don't actually delete the item, just unpublish it:
  $item->unpublish();
  $item->save();

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  echo json_encode($data);
  return;
}

/**
 * AJAX callback for removing items from your channel.
 */
function moonmars_items_ajax_remove() {
  // Get the request parameters.
  $item_nid = (int) $_REQUEST['item_nid'];

  // Get the current member:
  $current_member = Member::currentMember();

  // Get the current channel:
  $current_channel = Channel::currentChannel();

  // Begin the data array:
  $data = array(
    'item_nid' => $item_nid,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$current_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to remove this item:
  if (!$current_member->canRemoveItem($item, $current_channel)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  //////////////////////////////
  // All good - remove the item.

  // Remove the item from the current channel:
  Relation::deleteBinary('has_item', 'node', $current_channel->nid(), 'node', $item_nid);

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  echo json_encode($data);
  return;
}
