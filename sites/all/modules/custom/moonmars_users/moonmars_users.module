<?php

/**
 * Get the user's full name.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_full_name($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  $first_name = $user->field_first_name ? $user->field_first_name[LANGUAGE_NONE][0]['value'] : '';
  $last_name = $user->field_last_name ? $user->field_last_name[LANGUAGE_NONE][0]['value'] : '';
  return trim("$first_name $last_name");
}

/**
 * Get the user's name with full name.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_name_plus_full_name($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  $full_name = moonmars_users_full_name($user->uid);
  return $user->name . ($full_name ? " ($full_name)" : '');
}

/**
 * Get the user's location as city, state, country.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_location($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  if ($user->field_user_location) {
    $city = isset($user->field_user_location[LANGUAGE_NONE][0]['city']) ? $user->field_user_location[LANGUAGE_NONE][0]['city'] : NULL;
    $province = isset($user->field_user_location[LANGUAGE_NONE][0]['province']) ? $user->field_user_location[LANGUAGE_NONE][0]['province'] : NULL;
    $country = isset($user->field_user_location[LANGUAGE_NONE][0]['country']) ? $user->field_user_location[LANGUAGE_NONE][0]['country'] : NULL;
    return implode(', ', array_filter(array(
      $city,
      $province,
      $country
    )));
  }
  return NULL;
}

/**
 * Calculate the user's age from their date of birth.
 *
 * @param int|stdClass $user
 * @return int|null
 */
function moonmars_users_age($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  $date_of_birth = $user->field_date_of_birth ? $user->field_date_of_birth[LANGUAGE_NONE][0]['value'] : NULL;
  if ($date_of_birth) {
    $date_of_birth = new XDateTime($date_of_birth);
    $today = XDateTime::today();
    $birth_year = $date_of_birth->year();
    $current_year = $today->year();
    $birthday_this_year = $date_of_birth;
    $birthday_this_year->year($today->year());
    return ($current_year - $birth_year) + ($birthday_this_year <= $today ? 1 : 0);
  }
  return NULL;
}

/**
 * Get the user's gender as a single letter.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_gender($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  return $user->field_gender ? $user->field_gender[LANGUAGE_NONE][0]['value'] : NULL;
}

/**
 * Generate HTML for an avatar tooltip.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_tooltip($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  // HTML for the tooltip:
  $user_name = "<strong>$user->name</strong>";
  $full_name = moonmars_users_full_name($user->uid);

  // Cater for names that are too long - we don't want the tooltip too big.
  if (strlen($full_name) > 50) {
    $full_name = substr($full_name, 0, 47) . '...';
  }

  $age_gender = implode('/', array_filter(array(
    moonmars_users_gender($user->uid),
    moonmars_users_age($user->uid),
  )));
  $location = moonmars_users_location($user->uid);
  return
    "<div class='user-tooltip' title='Visit $user->name&apos;s profile'>" .
      moonmars_users_avatar($user) .
      "<div class='user-tooltip-text'>" .
        implode('<br>', array_filter(array(
          $user_name,
          $full_name,
          $age_gender,
          $location
        ))) .
      "</div>" .
    "</div>";
}

/**
 * Generate HTML for a user avatar.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_avatar($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  // The avatar icon:
  if ($user->picture) {
    // If the user has a picture, use it:
    $icon_path = $user->picture->uri;
  }
  else {
    // If the user doesn't have a picture, use a default icon:
    $icon = isset($user->field_moon_or_mars[LANGUAGE_NONE][0]['value']) ? $user->field_moon_or_mars[LANGUAGE_NONE][0]['value'] : 'both';
    $icon_path = "avatars/870x870/$icon-870x870.jpg";
  }

  $image = array(
    'style_name'  => 'icon-40x40',
    'path'        => $icon_path,
    'alt'         => $user->name,
    'attributes'  => array('class' => array('avatar-icon')),
  );

  return theme('image_style', $image);
}

/**
 * Generate HTML for a user avatar with link.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_avatar_link($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  return "<a class='avatar-link' href='/users/$user->name'>" . moonmars_users_avatar($user->uid) . "</a>";
}

/**
 * Generate HTML for a user avatar with link and tooltip.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_users_avatar_tooltip($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  // HTML for the tooltip:
  $avatar = moonmars_users_avatar_link($user->uid);
  $tooltip = moonmars_users_tooltip($user->uid);

  return "
    <div class='avatar-tooltip'>
      $avatar
      $tooltip
    </div>
  ";
}

/**
 * Generate HTML for a user avatar with link and tooltip.
 *
 * @param int|stdClass $user
 * @return string
 */
function moonmars_user_avatar_tooltip($user) {
  if (!is_object($user)) {
    $user = user_load($user);
  }

  // HTML for the tooltip:
  $avatar = moonmars_users_avatar_link($user->uid);
  $tooltip = moonmars_users_tooltip($user->uid);

  return "
    <div class='avatar-tooltip'>
      $avatar
      $tooltip
    </div>
  ";
}
