<?php

use \AstroMultimedia\Drupal\Entity;
use \AstroMultimedia\Drupal\Node;
use \AstroMultimedia\Drupal\Comment;
use \AstroMultimedia\MoonMars\Channel;
use \AstroMultimedia\MoonMars\Member;
use \AstroMultimedia\MoonMars\Group;
use \AstroMultimedia\MoonMars\Topic;
use \AstroMultimedia\MoonMars\Triumph;
use \AstroMultimedia\MoonMars\Relation;

/**
 * @author Shaun Moss (mossy2100)
 * @since 2012-09-08
 *
 * An actor in moonmars.com is a special kind of entity. These each have a class.
 * This module contains functions that apply to more than one entity type.
 * Current actor classes:
 *   Member (extends User)
 *   Group (extends Node)
 *   Item (extends Node)
 *   ItemComment (extends Comment)
 *   Relation (extends Relation)
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants

/**
 * Define the minimum length for an actor tag.
 * I'm using 3 here to prevent meaningless tags, but could be changed to 2 or 1. There's not really any reason not to.
 *
 * @var int
 */
const MOONMARS_ACTOR_CODE_MIN_LENGTH = 3;

/**
 * Define the maximum length for an actor tag.
 * Since usernames are actor tags, we'll just use the Drupal default max length which is 60 (USERNAME_MAX_LENGTH).
 *
 * @var int
 */
const MOONMARS_ACTOR_CODE_MAX_LENGTH = 60;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core hooks

/**
 * Implements hook_menu().
 */
function moonmars_actors_menu() {
  $items = [];
  $items['ajax/check-actor-tag'] = [
    'page callback'   => 'moonmars_actors_ajax_check_tag',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  ];
  return $items;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Checking member and group tags

/**
 * AJAX callback to check if a actor tag is valid.
 */
function moonmars_actors_ajax_check_tag() {
  // Get parameters from the query string:
  $actor_type = isset($_REQUEST['actorType']) ? $_REQUEST['actorType'] : NULL;
  $actor_tag = isset($_REQUEST['actorCode']) ? $_REQUEST['actorCode'] : NULL;
  $actor_id = isset($_REQUEST['actorId']) ? $_REQUEST['actorId'] : NULL;

  // Default result:
  $data = [
    'result' => FALSE,
  ];

  // Check for valid parameters:
  if (!$actor_type || !in_array($actor_type, ['member', 'group']) || !$actor_tag) {
    $data['message'] = "Invalid parameters";
    echo json_encode($data);
    return;
  }

  // Check for valid characters and and length:
  if (!moonmars_actors_valid_tag($actor_tag)) {
    $data['message'] = "Invalid";
    echo json_encode($data);
    return;
  }

  // Check if any other actor of the same type has this tag:
  if ($actor_type == 'member') {
    // Check if any other member has the same username:
    $q = db_select('users', 'u')
      ->fields('u', ['uid'])
      ->condition('name', $actor_tag);
    // If editing a member, look for a different member with the same username:
    if ($actor_id) {
      $q->condition('uid', $actor_id, '!=');
    }
  }
  elseif ($actor_type == 'group') {
    // Check if any other group has the same tag:
    $q = db_select('node', 'n')
      ->fields('n', ['nid']);
    $q->join('field_data_field_group_tag', 'gt', "n.nid = gt.entity_id");
    $q->condition('field_group_tag_value', $actor_tag);
    // If editing a group, look for a different group with the same tag:
    if ($actor_id) {
      $q->condition('nid', $actor_id, '!=');
    }
  }

  // Check if a match was found:
  if ($q->execute()->rowCount()) {
    $data['message'] = "Taken";
    echo json_encode($data);
    return;
  }

  // It's ok:
  $data = [
    'result' => TRUE,
    'message' => "OK",
  ];
  echo json_encode($data);
  return;
}

/**
 * Check if a member name or group tag is valid.
 *
 * This means:
 *   - Between 3 and 60 (USERNAME_MAX_LENGTH) characters.
 *   - Letters, digits, hyphens and underscores only.
 *
 * This set of rules permits:
 *   - Drupal will allow it. @see user.module/user_validate_name()
 *   - Apache will allow it. If a username starts with a period then Apache will show a Forbidden message if their
 *       profile path is requested.
 *   - Uses only unreserved characters.
 *       @see http://www.456bereastreet.com/archive/201006/be_careful_with_non-ascii_characters_in_urls/
 *   - Member profile alias will match the username exactly, i.e. /member/$username
 *   - Group profile alias will match the group tag exactly, i.e. /group/$group_tag
 *
 * @param $name
 * @return bool
 */
function moonmars_actors_valid_tag($name) {
  return (bool) preg_match("/^[a-z0-9\-\_]{" . MOONMARS_ACTOR_CODE_MIN_LENGTH . "," . MOONMARS_ACTOR_CODE_MAX_LENGTH . "}$/i", $name);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions and hooks for saving members and groups

/**
 * Common code for resetting aliases when saving members and groups.
 *
 * @param Entity $actor
 */
function moonmars_actors_reset_aliases($actor) {
  // Update the alias for the actor:
  $actor->resetAlias();

  // Update the alias and title for the actor's channel.
  // @todo Remove when channels are made obsolete as entities.
  $channel = $actor->channel();
  $channel->resetAliasAndTitle();
}

/**
 * Implements hook_entity_insert().
 *
 * Note, we use this hook instead of hook_node_insert() or hook_user_insert() as it gets called later in the cycle,
 * after pathauto_node_insert_alias() sets the alias according to the pattern.
 */
function moonmars_actors_entity_insert($entity, $entity_type) {
  // Check if the entity is a member or group:
  if ($entity_type == 'user' || ($entity_type == 'node' && $entity->type == 'group')) {

    // Get the actor:
    $actor = moonmars_actors_get_actor($entity_type, $entity);

    // If group:
    if ($actor instanceof Group) {
      // Create triumph:
      Triumph::newGroup($actor);
      // Add the creator as group admin:
      $actor->addAdmin(Member::loggedInMember());
    }

    // Update the actor alias and channel alias and title:
    moonmars_actors_reset_aliases($actor);
  }
}

/**
 * Implements hook_entity_update().
 *
 * Note, we use this hook instead of hook_node_update() as it gets called later in the cycle, after
 * pathauto_node_update_alias() sets the alias according to the pattern. hook_node_update() is called before then.
 */
function moonmars_actors_entity_update($entity, $entity_type) {
  // Check if the entity is a member or group:
  if ($entity_type == 'user' || ($entity_type == 'node' && $entity->type == 'group')) {

    // Get the actor:
    $actor = moonmars_actors_get_actor($entity_type, $entity);

    // Create triumphs:
    $logged_in_member = Member::loggedInMember();
    if ($actor instanceof Member) {
      // Only create a new-member or update-member triumph if the member is updating their own profile
      // (i.e., not if an admin is updating someone else's profile).
      // The reason for this is because an administrator won't normally be adding interesting info; they'll most
      // likely just be updating a password or something.
      if ($logged_in_member && Member::equals($actor, $logged_in_member)) {
        // The first time a member's profile is updated we create the new-member triumph. After that, update-member.
        if (!$actor->profileUpdated()) {
          Triumph::newMember($actor);

          // We have to update the profile_updated field manually because if we call ->save() or user_save(), we'll
          // trigger this hook again which will in turn trigger an update-member triumph.
          // It seems hacky but I can't think of a better way to do this right now.

          // 1. Update the data table for the field:
          $q = db_update('field_data_field_profile_updated')
            ->fields(['field_profile_updated_value' => 1])
            ->condition('entity_id', $actor->uid());
          $q->execute();

          // 2. Update the revision table for the field:
          $q = db_update('field_revision_field_profile_updated')
            ->fields(['field_profile_updated_value' => 1])
            ->condition('entity_id', $actor->uid());
          $q->execute();
        }
        else {
          Triumph::updateMember($actor);
        }
      }
    }
    elseif ($actor instanceof Group) {
      Triumph::updateGroup($actor, $logged_in_member);
    }

    // Update the actor alias and channel alias and title:
    moonmars_actors_reset_aliases($actor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions for getting and creating actor entities and channels

/**
 * Gets an Entity-derived object from a Drupal entity.
 *
 * @static
 * @param string $entity_type
 * @param object|int $entity
 * @return Entity
 *   Entity-derived class, e.g. Member, Group, Item, ItemComment, Relation, etc.
 */
function moonmars_actors_get_actor($entity_type, $entity) {
  switch ($entity_type) {
    case 'user':
      return Member::create($entity);

    case 'node':
      // Get the node type:
      $node_type = is_uint($entity) ? node_get_type($entity) : $entity->type;

      // Get the node class:
      $class = '\\AstroMultimedia\\MoonMars\\' . ucfirst($node_type);

      // If the node class exists, instantiate:
      if (class_exists($class)) {
        // Note I create the object using $entity instead of reloading the node (which would be another way of getting
        // the type), to prevent the node we just loaded from clobbering the one we have in memory.
        // My caching mechanism is better than Drupal's, unfortunately.
        return $class::create($entity);
      }

      // Fall back to base Node class:
      return Node::create($entity);

    case 'comment':
      // Get the cid:
      $cid = is_uint($entity) ? $entity : $entity->cid;

      // Get the comment's node type.
      $node_type = comment_get_node_type($cid);

      // Get the comment class:
      $class = '\\AstroMultimedia\\MoonMars\\' . ucfirst($node_type) . 'Comment';

      // If the comment class exists, instantiate.
      // This will capture ItemComment and potential other future comment classes such as ArticleComment or BlogPostComment.
      if (class_exists($class)) {
        return $class::create($entity);
      }

      // Fall back to base Comment class:
      return Comment::create($entity);

    case 'relation':
      // Create the object:
      return Relation::create($entity);
  }

  return FALSE;
}

function moonmars_actors_looks_like_entity_path(array $uri_parts) {
  $valid_entity_types = [
    'user',
    'node',
    'comment',
    'relation'
  ];
  return count($uri_parts) >= 2 && in_array($uri_parts[0], $valid_entity_types) && is_uint($uri_parts[1]);
}

/**
 * Get the actor whose page it is, from the current URL.
 *
 * @static
 * @return bool
 */
function moonmars_actors_get_actor_from_url() {
  static $cache;

  // Look for the entity type and id in the request_uri:
  $uri = request();

  // Shortcut if we already did this one:
  if (isset($cache[$uri])) {
    return $cache[$uri];
  }

  $actor = NULL;

  // At certain paths we know the actor is the logged-in member:
  if (in_array($uri, ['user', 'profile', 'activity', 'notifications']) && user_is_logged_in()) {
    $actor = Member::loggedInMember();
  }

  if (!$actor) {
    // Check for a normal user/%uid or node/%nid type of path:
    $uri_parts = explode('/', $uri);
    if (moonmars_actors_looks_like_entity_path($uri_parts)) {
      $actor = moonmars_actors_get_actor($uri_parts[0], $uri_parts[1]);
    }
  }

  if (!$actor) {
    // Look for a matching alias:
    while (count($uri_parts) >= 1) {
      // Maybe it's an alias. Try converting to normal path.
      $path = drupal_get_normal_path($uri);

      // Check again:
      $path_parts = explode('/', $path);
      if (moonmars_actors_looks_like_entity_path($path_parts)) {
        $actor = moonmars_actors_get_actor($path_parts[0], $path_parts[1]);
        if ($actor) {
          break;
        }
      }

      // Remove the last URI part and try again.
      unset($uri_parts[count($uri_parts) - 1]);
      $uri = implode('/', $uri_parts);
    }
  }

  if ($actor) {
    $cache[$uri] = $actor;
    return $actor;
  }

  // Not an actor path:
  return FALSE;
}

/**
 * Get the uid of the member whose page we're on.
 * FALSE if not a member page.
 *
 * @return int|bool
 */
function moonmars_actors_get_uid_from_url() {
  $actor = moonmars_actors_get_actor_from_url();
  return ($actor instanceof Member) ? $actor->uid() : FALSE;
}

/**
 * Creates a new channel for an entity.
 *
 * @param Entity $entity
 * @return int
 */
function moonmars_actors_create_channel(Entity $entity) {
  // Create the new channel:
  $channel = Channel::create()
    ->setProperties([
      'uid'   => $entity->uid(),
      'title' => $entity->channelTitle(),
    ]);

  // Save the node for the first time, which will give it a nid, which we need to create the relationship:
  $channel->save();

  // Create the relationship between the entity and the relationship:
  Relation::createNewBinary('has_channel', $entity, $channel);

  // Reset the channel's alias and title. This needs to be done after creating the relationship.
  $channel->resetAliasAndTitle();

  // Return the Channel:
  return $channel;
}

/**
 * Get an entity's channel.
 *
 * @param Entity $entity
 * @param bool $create
 * @return int
 */
function moonmars_actors_get_channel(Entity $entity, $create = TRUE) {
  // Check if the entity already has a channel:
  $rels = Relation::searchBinary('has_channel', $entity, NULL);

  if (!empty($rels)) {
    return $rels[0]->endpoint(1);
  }

  // If the entity has no channel, and $create is TRUE, create the channel now:
  if ($create) {
    return moonmars_actors_create_channel($entity);
  }

  return NULL;
}

/**
 * Get the settings array for tag prefixes for when we need this on the client in JS.
 *
 * @return array
 */
function moonmars_actors_tag_prefixes() {
  return array(
    'data' => array(
      'tagPrefixes' => array(
        'member' => Member::TAG_PREFIX,
        'group' => Group::TAG_PREFIX,
        'topic' => Topic::TAG_PREFIX,
      ),
    ),
    'type' => 'setting',
  );
}
