<?php

use \AstroMultimedia\MoonMars\Channel;
use \AstroMultimedia\MoonMars\IActor;
use \AstroMultimedia\MoonMars\Member;
use \AstroMultimedia\MoonMars\Group;
use \AstroMultimedia\MoonMars\Topic;
use \AstroMultimedia\MoonMars\Triumph;
use \AstroMultimedia\MoonMars\Relation;

/**
 * @author Shaun Moss (mossy2100)
 * @since 2012-09-08
 *
 * An "actor" in moonmars.com is a entity that has a channel. There are 3 types:
 *   Member (extends User)
 *   Group (extends Node)
 *   Topic (extends Term)
 *
 * This module provides functions to support working with actors.
 */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants

/**
 * Define the minimum length for an actor tag.
 * I'm using 3 here to prevent meaningless tags, but could be changed to 2 or 1. There's not really any reason not to.
 *
 * @var int
 */
const MOONMARS_ACTOR_CODE_MIN_LENGTH = 3;

/**
 * Define the maximum length for an actor tag.
 * Since usernames are actor tags, we'll just use the Drupal default max length which is 60 (USERNAME_MAX_LENGTH).
 *
 * @var int
 */
const MOONMARS_ACTOR_CODE_MAX_LENGTH = 60;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core hooks

/**
 * Implements hook_menu().
 */
function moonmars_actors_menu() {
  $items = array();
  $items['ajax/check-actor-tag'] = array(
    'page callback'   => 'moonmars_actors_ajax_check_tag',
    'access callback' => TRUE,
    'type'            => MENU_CALLBACK,
  );
  return $items;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Checking member and group tags

/**
 * AJAX callback to check if a actor tag is valid.
 */
function moonmars_actors_ajax_check_tag() {
  // Get parameters from the query string:
  $actor_type = isset($_REQUEST['actorType']) ? $_REQUEST['actorType'] : NULL;
  $actor_tag = isset($_REQUEST['actorCode']) ? $_REQUEST['actorCode'] : NULL;
  $actor_id = isset($_REQUEST['actorId']) ? $_REQUEST['actorId'] : NULL;

  // Default result:
  $data = array(
    'result' => FALSE,
  );

  // Check for valid parameters:
  if (!$actor_type || !in_array($actor_type, array('member', 'group')) || !$actor_tag) {
    $data['message'] = "Invalid parameters";
    echo json_encode($data);
    return;
  }

  // Check for valid characters and and length:
  if (!moonmars_actors_valid_tag($actor_tag)) {
    $data['message'] = "Invalid";
    echo json_encode($data);
    return;
  }

  // Check if any other actor of the same type has this tag:
  if ($actor_type == 'member') {
    // Check if any other member has the same username:
    $q = db_select('users', 'u')
      ->fields('u', array('uid'))
      ->condition('name', $actor_tag);
    // If editing a member, look for a different member with the same username:
    if ($actor_id) {
      $q->condition('uid', $actor_id, '!=');
    }
  }
  elseif ($actor_type == 'group') {
    // Check if any other group has the same tag:
    $q = db_select('node', 'n')
      ->fields('n', array('nid'));
    $q->join('field_data_field_group_tag', 'gt', "n.nid = gt.entity_id");
    $q->condition('field_group_tag_value', $actor_tag);
    // If editing a group, look for a different group with the same tag:
    if ($actor_id) {
      $q->condition('nid', $actor_id, '!=');
    }
  }

  // Check if a match was found:
  if ($q->execute()->rowCount()) {
    $data['message'] = "Taken";
    echo json_encode($data);
    return;
  }

  // It's ok:
  $data = array(
    'result' => TRUE,
    'message' => "OK",
  );
  echo json_encode($data);
  return;
}

/**
 * Check if a member name or group tag is valid.
 *
 * This means:
 *   - Between 3 and 60 (USERNAME_MAX_LENGTH) characters.
 *   - Letters, digits, hyphens and underscores only.
 *
 * This set of rules permits:
 *   - Drupal will allow it. @see user.module/user_validate_name()
 *   - Apache will allow it. If a username starts with a period then Apache will show a Forbidden message if their
 *       profile path is requested.
 *   - Uses only unreserved characters.
 *       @see http://www.456bereastreet.com/archive/201006/be_careful_with_non-ascii_characters_in_urls/
 *   - Member profile alias will match the username exactly, i.e. /member/$username
 *   - Group profile alias will match the group tag exactly, i.e. /group/$group_tag
 *
 * @param $name
 * @return bool
 */
function moonmars_actors_valid_tag($name) {
  return (bool) preg_match("/^[a-z0-9\-\_]{" . MOONMARS_ACTOR_CODE_MIN_LENGTH . "," . MOONMARS_ACTOR_CODE_MAX_LENGTH . "}$/i", $name);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions and hooks for saving members and groups

/**
 * Common code for resetting aliases when saving members and groups.
 *
 * @param IActor $actor
 */
function moonmars_actors_reset_aliases(IActor $actor) {
  // Update the alias for the actor:
  $actor->resetAlias();

  // Update the alias and title for the actor's channel.
  $channel = $actor->channel();
  if ($channel) {
    $channel->resetAliasAndTitle();
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Note, we use this hook instead of hook_node_insert() or hook_user_insert() as it gets called later in the cycle,
 * after pathauto_node_insert_alias() sets the alias according to the pattern.
 */
function moonmars_actors_entity_insert($entity, $entity_type) {
  moonmars_actors_entity_save($entity, $entity_type, TRUE);
}

/**
 * Implements hook_entity_update().
 *
 * This hook is invoked after the node or user is saved to the database and immediately after hook_user_update() or
 * hook_node_update().
 * Event order:
 *   1. Save user/node to the database
 *   2. Invoke user_update/node_update
 *   3. Invoke entity_update
 *
 * We use this hook instead of hook_node_update() as it gets called later in the cycle, after
 * pathauto_node_update_alias() sets the alias according to the pattern.
 */
function moonmars_actors_entity_update($entity, $entity_type) {
  moonmars_actors_entity_save($entity, $entity_type, FALSE);
}

/**
 * Called when updating an actor.
 *
 * @param stdClass $entity
 * @param string $entity_type
 * @param bool $is_new
 */
function moonmars_actors_entity_save($entity, $entity_type, $is_new) {
  // Check if the entity is a member, group or (@todo) topic:
  if ($entity_type == 'user' || ($entity_type == 'node' && $entity->type == 'group')) {

    // Get the actor object:
    $actor = moonmars_objects_get_object($entity_type, $entity);

    // Get the logged-in member:
    $logged_in_member = Member::loggedInMember();

    if ($actor instanceof Member) {
      $member = $actor;
      if (!$is_new) {
        // Create triumphs:
        if ($actor instanceof Member) {
          // Only create an update-member triumph if the member is updating their own profile
          // (i.e., not if an admin is updating someone else's profile).
          // The reason for this is because an administrator probably won't be adding interesting info;
          // they'll most likely just be updating a password or something.
          if ($logged_in_member && $member->equals($logged_in_member)) {
            // The first time a member updates their profile, send a new-member triumph. The reason why we don't do this
            // when the user account is created, or when they confirm their email address, is because if we send new-member
            // notifications at those times they won't contain much interesting information. The first time they update
            // their profile, however (which they will normally do straight after they confirm their email address anyway)
            // will probably when they enter most of their personal info. Then we send the nxn, then people will know
            // whether they want to follow the new member or not.
            if (!$member->newMemberTriumphCreated()) {
              Triumph::newMember($member);
            }
            else {
              Triumph::updateMember($member);
            }
          }
        }
      }
    }
    elseif ($actor instanceof Group) {
      $group = $actor;
      if ($is_new) {
        // Create triumph:
        Triumph::newGroup($group);
        // Add the creator as group admin:
        $group->addAdmin(Member::loggedInMember());
      }
      else {
        // Create triumph:
        Triumph::updateGroup($actor, $logged_in_member);
      }
    }
    elseif ($actor instanceof Topic) {
      // @todo
    }
    else {
      trigger_error("moonmars_actors_entity_save() - Actor has unknown class. Check your use statements.", E_USER_WARNING);
    }

    // Update the actor alias and channel alias and title:
    moonmars_actors_reset_aliases($actor);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Functions for getting and creating actor entities and channels

/**
 * Creates a new channel for an actor.
 *
 * @param IActor $actor
 * @return Channel
 */
function moonmars_actors_create_channel(IActor $actor) {
  // Create the new channel. The 'uid' here is the uid of the owner of the actor entity, which becomes the owner of the
  // channel node. It's valid for member, group and topic, and not a bug.
  $channel = Channel::create()
    ->setProperties(array(
    'uid' => $actor->uid(),
    'title' => $actor->channelTitle(),
  ));

  // Save the node for the first time, which will give it a nid, which we need to create the relationship:
  $channel->save();

  // Create the relationship between the actor and the channel:
  Relation::createNewBinary('has_channel', $actor, $channel);

  // Reset the channel's alias and title. This needs to be done after creating the relationship.
  $channel->resetAliasAndTitle();

  // Return the Channel:
  return $channel;
}

/**
 * Get an actor's channel.
 *
 * @param IActor $actor
 * @param bool $create
 * @return int
 */
function moonmars_actors_get_channel(IActor $actor, $create = TRUE) {
  // Check if the actor already has a channel:
  $rels = Relation::searchBinary('has_channel', $actor, NULL);

  if (!empty($rels)) {
    return $rels[0]->endpoint(1);
  }

  // If the actor has no channel, and $create is TRUE, create the channel now:
  if ($create) {
    return moonmars_actors_create_channel($actor);
  }

  return NULL;
}

/**
 * Get the settings array for tag prefixes for when we need this on the client in JS.
 *
 * @return array
 */
function moonmars_actors_tag_prefixes() {
  return array(
    'data' => array(
      'tagPrefixes' => array(
        'member' => Member::TAG_PREFIX,
        'group' => Group::TAG_PREFIX,
        'topic' => Topic::TAG_PREFIX,
      ),
    ),
    'type' => 'setting',
  );
}

/**
 * Get the uid of the member whose page we're on.
 * FALSE if not a member page.
 *
 * @return int|bool
 */
function moonmars_actors_get_uid_from_url() {
  $actor = moonmars_objects_get_object_from_url();
  return ($actor instanceof Member) ? $actor->uid() : FALSE;
}
