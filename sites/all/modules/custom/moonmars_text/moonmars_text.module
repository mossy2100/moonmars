<?php

/**
 * Return an array of supported emoticons.
 *
 * @return array
 */
function moonmars_text_emoticons() {
  return array(
    'big-smile' => ':D',
    'heart'     => '&lt;3',
    'kiss'      => ':*',
    'meh'       => ':|',
    'raspberry' => ':p',
    'sad'       => ':(',
    'smile'     => ':)',
    'surprise'  => ':o',
    'wink'      => ';)',
  );
}

/**
 * Scans a piece of text (item or comment) for @ references to members, and converts these to links.
 *
 * @param $text
 */
function moonmars_text_scan($text, $nl2br = FALSE, $emoticons = FALSE) {
  $text2 = $text;

  // Make URLs into links:
  $scheme = "https?:\/\/";
  $domain_name = "[a-z0-9](([a-z0-9\-\.]+)?[a-z0-9])?";
  $ip_addr = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}";
  $port_path_query_fragment = "[-A-Z0-9+&@#\/%=~_|$?!:,.]*[A-Z0-9+&@#\/%=~_|$]";
  $url_rx = "/($scheme)(($domain_name)|($ip_addr))($port_path_query_fragment)?/i";
  $text2 = preg_replace($url_rx, "<a href='$0' target='_blank'>$0</a>", $text2);

  // Scan for referenced members:
  $n_members = preg_match_all("/(^|\s)\@([a-z0-9\_\-]+)\b/i", $text2, $matches);
  $members = array();
  if ($n_members) {
    foreach ($matches[2] as $name) {
      // Check if we have a member with this name:
      $user = user_load_by_name($name);
      if ($user) {
        $member = Member::create($user);
        $members[$member->uid()] = $member;
        $text2 = preg_replace("/(^|\s)(\@$name)\b/i", "$1" . $member->link(NULL), $text2);
      }
    }
  }

  // Scan for hash tags:
//  $n_members = preg_match_all("/(^|\s)\@([a-z0-9\_\-]+)\b/i", $text, $matches);

  $tags = array();
//  if ($n_members) {
//    $text2 = $text;
//    foreach ($matches[2] as $name) {
//      // Check if we have a member with this name:
//      $member = Member::create($name);
//      if ($member) {
//        $members[$member->uid()] = $member;
//        $text2 = preg_replace("/(^|\s)(\@$name)\b/i", "$1" . $member->link(NULL, TRUE), $text2);
//      }
//    }
//  }

  // Scan for group references:
  $n_entities = preg_match_all("/\[([^\]]+)\]/", $text, $matches);
  $groups = array();
  if ($n_entities) {
    foreach ($matches[1] as $group_title) {
      $group = Group::createByTitle($group_title);
      if (!$group) {
        break;
      }

      $groups[$group->nid()] = $group;
      $text2 = str_replace("[$group_title]", $group->link(), $text2);
    }
  }

  // Insert emoticons:
  if ($emoticons) {
    $theme_path = drupal_get_path('theme', 'astro');
    $emoticon_path = "/$theme_path/images/emoticons";
    // Remove double-encoding of <, which can be caused by using the heart emoticon <3.
    $text2 = str_replace('&amp;lt;', '&lt;', $text2);
    foreach (moonmars_text_emoticons() as $emoticon_name => $emoticon_symbol) {
      $text2 = str_replace($emoticon_symbol, "<img class='emoticon' src='$emoticon_path/$emoticon_name.png'>", $text2);
    }
  }

  // Insert break tags if requested:
  if ($nl2br) {
    $text2 = nl2br($text2);
  }

  return array(
    'filtered_text' => $text2,
    'members' => $members,
    'hash_tags' => $tags,
    'groups' => $groups,
  );
}

/**
 * Scans a piece of text (item or comment) for member references and hash tags, and converts these to links.
 *
 * @param $text
 */
function moonmars_text_filter($text, $nl2br = FALSE, $emoticons = FALSE) {
  $scan = moonmars_text_scan($text, $nl2br, $emoticons);
  return $scan['filtered_text'];
}

/**
 * Scans a piece of text (item or comment) for member references and returns the Member objects.
 *
 * @param $text
 */
function moonmars_text_referenced_members($text) {
  $members = array();

  $n_members = preg_match_all("/(^|\s)\@([a-z0-9\_\-]+)\b/i", $text, $matches);
  if ($n_members) {
    foreach ($matches[2] as $name) {
      // Check if we have a member with this name:
      $user = user_load_by_name($name);
      if ($user) {
        $member = Member::create($user);
        $members[$member->uid()] = $member;
      }
    }
  }

  return $members;
}

/**
 * Scans a piece of text (item or comment) for hash tags, and returns the Term objects.
 *
 * @param $text
 */
//function moonmars_text_hash_tags($text) {
//  $scan = moonmars_text_scan($text);
//  return $scan['hash_tags'];
//}

/**
 * Trims a bit of text to a maximum length, using ellipsis to indicate the trim.
 *
 * @param string $text
 * @param int $maxlen
 * @return string
 */
function moonmars_text_trim($text, $maxlen = 40) {
  return (strlen($text) <= $maxlen) ? $text : (substr($text, 0, $maxlen - 3) . '...');
}
