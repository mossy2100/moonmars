<?php

/**
 * Return an array of supported emoticons.
 *
 * @return array
 */
function moonmars_text_emoticons() {
  return [
    'smile'     => ':)',
    'sad'       => ':(',
    'meh'       => ':|',
    'big-smile' => ':D',
    'raspberry' => ':p',
    'surprise'  => ':o',
    'kiss'      => ':*',
    'wink'      => ';)',
    'heart'     => '&lt;3',
  ];
}

/**
 * Replace emoticon codes in some text with emoticon images.
 *
 * @param string $text
 * @return string
 */
function moonmars_text_add_emoticons($text) {
  // Note we use an absolute path, so that the URLs work in emails:
  global $base_url;
  $emoticon_path = $base_url . '/' . drupal_get_path('theme', 'astro') . '/images/emoticons';

  // Convert double-encoded HTML entities for hearts:
  $text = moonmars_text_fix_hearts($text);

  // Replace emoticon codes with images:
  foreach (moonmars_text_emoticons() as $emoticon_name => $emoticon_code) {
    $text = str_replace($emoticon_code, "<img class='emoticon' src='$emoticon_path/$emoticon_name.png'>", $text);
  }

  return $text;
}

///**
// * Scans a piece of text from an item or comment, and does the following:
// *   - Finds members mentioned
// *   - Finds groups mentioned
// *   - Finds topics mentioned
// *   - Generates HTML
// *   - Inserts emoticon images
// *
// * @param $text
// */
//function moonmars_text_scan($text, $emoticons = FALSE) {
//  $html = $text;
//
//  // Make URLs into links:
//  $scheme = "https?:\/\/";
//  $domain_name = "[a-z0-9](([a-z0-9\-\.]+)?[a-z0-9])?";
//  $ip_addr = "\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}";
//  $port_path_query_fragment = "[-A-Z0-9+&@#\/%=~_|$?!:,.]*[A-Z0-9+&@#\/%=~_|$]";
//  $url_rx = "/($scheme)(($domain_name)|($ip_addr))($port_path_query_fragment)?/i";
//  $html = preg_replace($url_rx, "<a href='$0' target='_blank'>$0</a>", $html);
//
//  // Scan for mentioned members:
//  $n_members = preg_match_all("/(^|\s)\@([a-z0-9\_\-]+)\b/i", $html, $matches);
//  $members = array();
//  if ($n_members) {
//    foreach ($matches[2] as $name) {
//      // Check if we have a member with this name:
//      $user = user_load_by_name($name);
//      if ($user) {
//        $member = Member::create($user);
//        $members[$member->uid()] = $member;
//        $html = preg_replace("/(^|\s)(\@$name)\b/i", "$1" . $member->link(), $html);
//      }
//    }
//  }
//
//  // Scan for mentioned groups:
//  $n_groups = preg_match_all("/\[([^\]]+)\]/", $text, $matches);
//  $groups = array();
//  if ($n_groups) {
//    foreach ($matches[1] as $group_title) {
//      $group = Group::createByTitle($group_title);
//      if ($group) {
//        $groups[$group->nid()] = $group;
//        $html = str_replace("[$group_title]", $group->link(), $html);
//      }
//    }
//  }
//
////  // Scan for hash tags:
////  $n_tags = preg_match_all("/(^|\s)\@([a-z0-9\_\-]+)\b/i", $text, $matches);
//  $tags = array();
////  if ($n_tags) {
////    $html = $text;
////    foreach ($matches[2] as $name) {
////      // Check if we have a tag with this name:
////      $tag = Member::create($name);
////      if ($tag) {
////        $tags[$tag->uid()] = $tag;
////        $html = preg_replace("/(^|\s)(\@$name)\b/i", "$1" . $tag->link(NULL, TRUE), $html);
////      }
////    }
////  }
//
//  // Insert emoticons if requested:
//  if ($emoticons) {
//    $html = moonmars_text_add_emoticons($html);
//  }
//
//  // Convert newlines to break tags:
//  $html = nl2br($html);
//
//  return array(
//    'html'    => $html,
//    'members' => $members,
//    'groups'  => $groups,
//    'tags'    => $tags,
//  );
//}

///**
// * Scans a piece of text (item or comment) for member references and hash tags, and converts these to links.
// *
// * @param $text
// */
//function moonmars_text_filter($text, $emoticons = FALSE) {
//  $scan = moonmars_text_scan($text, $emoticons);
//  return $scan['html'];
//}

///**
// * Scans a piece of text (item or comment) for member references and returns the Member objects.
// *
// * @param $text
// */
//function moonmars_text_referenced_members($text) {
//  $members = array();
//
//  $n_members = preg_match_all("/(^|\s)\@([a-z0-9\_\-]+)\b/i", $text, $matches);
//  if ($n_members) {
//    foreach ($matches[2] as $name) {
//      // Check if we have a member with this name:
//      $user = user_load_by_name($name);
//      if ($user) {
//        $member = Member::create($user);
//        $members[$member->uid()] = $member;
//      }
//    }
//  }
//
//  return $members;
//}

/**
 * Scans a piece of text (item or comment) for hash tags, and returns the Term objects.
 *
 * @param $text
 */
//function moonmars_text_hash_tags($text) {
//  $scan = moonmars_text_scan($text);
//  return $scan['hash_tags'];
//}

/**
 * Trims a bit of text to a maximum length, using ellipsis to indicate the trim.
 *
 * @param string $text
 * @param int $maxlen
 * @return string
 */
function moonmars_text_trim($text, $maxlen = 40) {
  return (strlen($text) <= $maxlen) ? $text : (substr($text, 0, $maxlen - 3) . '...');
}

/**
 * Convert heart emoticon symbols and double-encoded HTML entities to HTML entities.
 *
 * @param $text
 * @return string
 */
function moonmars_text_fix_hearts($text) {
  return str_replace(['<3', '&amp;lt;3'], '&lt;3', $text);
}
