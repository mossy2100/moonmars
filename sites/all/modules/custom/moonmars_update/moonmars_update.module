<?php

/**
 * Implements hook_menu().
 */
function moonmars_update_menu() {
  $items = array();
  $items['update/subscriber-relationships'] = array(
    'page callback'    => 'moonmars_update_subscriber_relationships',
    'access arguments' => array('administer relation types'),
    'type'             => MENU_CALLBACK,
  );
  $items['named-colors'] = array(
    'page callback'    => 'moonmars_named_colors',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

function moonmars_update_subscriber_relationships() {
  // Convert all has_follower relationships to has_subscriber:
  $rels = moonmars_relationships_get_relationships('has_follower');
  foreach ($rels as $rel) {
    $member   = Member::create($rel->endpointEntityId(0));
    $follower = Member::create($rel->endpointEntityId(1));

    // Create the has_subscriber relationship:
    moonmars_relationships_update_relationship('has_subscriber', 'node', $member->channel()->nid(), 'user', $follower->uid());
  }

  // Delete the has_follower relationship:
  moonmars_relationships_delete_relationships('has_follower');
  moonmars_relationships_delete_relationships('follows');

  // Convert all has_member relationships to has_subscriber:
  $rels = moonmars_relationships_get_relationships('has_member');
  foreach ($rels as $rel) {
    $group    = Group::create($rel->endpointEntityId(0));
    $follower = Member::create($rel->endpointEntityId(1));

    // Create the has_subscriber relationship:
    moonmars_relationships_update_relationship('has_subscriber', 'node', $group->channel()->nid(), 'user', $follower->uid());
  }

  // Subscribe everyone to the News channel:
  $rs = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('status', 1)
    ->execute();
  foreach ($rs as $rec) {
    $member = Member::create($rec->uid);

    // Create the has_subscriber relationship:
    moonmars_relationships_update_relationship('has_subscriber', 'node', MOONMARS_NEWS_CHANNEL_NID, 'user', $member->uid());
  }

  // Default email_notifications to TRUE in every subscription relationship.
  $rels = moonmars_relationships_get_relationships('has_subscriber', 'node', NULL, 'user', NULL);
  foreach ($rels as $rel) {
    $rel->field('field_email_notification', LANGUAGE_NONE, 0, 'value', 1);
    $rel->save();
  }

  // Delete all 'has_item' relationships where copied = 1
  $rels = moonmars_relationships_get_relationships('has_item', 'node', NULL, 'node', NULL);
  foreach ($rels as $rel) {
    $copied = $rel->field('field_copied');
    if ($copied) {
      echo 'deleting ' . $rel->rid() . '<br>';
      $rel->delete();
    }
  }

}

/**
 * Sort the color names.
 */
function moonmars_named_colors() {
  $colors = StarColor::colorNames();
  $colors2 = array();
  foreach ($colors as $name => $hex) {
    $colors2[strtolower($name)] = strtoupper($hex);
  }
  ksort($colors2);
  dbg($colors2);
}
