<?php

/**
 * Implements hook_menu().
 */
function moonmars_update_menu() {
  $items = array();
  $items['update/subscriber-relationships'] = array(
    'page callback'    => 'moonmars_update_subscriber_relationships',
    'access arguments' => array('administer relation types'),
    'type'             => MENU_CALLBACK,
  );
  $items['named-colors'] = array(
    'page callback'    => 'moonmars_update_named_colors',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
//  $items['update/default-group-preferences'] = array(
//    'page callback'    => 'moonmars_update_default_group_preferences',
//    'access callback'  => TRUE,
//    'type'             => MENU_CALLBACK,
//  );
  $items['update/fix-aliases'] = array(
    'page callback'    => 'moonmars_update_fix_aliases',
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

function moonmars_update_subscriber_relationships() {
  // Convert all has_follower relationships to has_subscriber:
  $rels = Relation::searchBinary('has_follower');
  foreach ($rels as $rel) {
    $member   = Member::create($rel->endpointEntityId(0));
    $follower = Member::create($rel->endpointEntityId(1));

    // Create the has_subscriber relationship:
    Relation::updateBinary('has_subscriber', 'node', $member->channel()->nid(), 'user', $follower->uid());
  }

  // Delete the has_follower relationship:
  Relation::deleteBinary('has_follower');
  Relation::deleteBinary('follows');

  // Convert all has_member relationships to has_subscriber:
  $rels = Relation::searchBinary('has_member');
  foreach ($rels as $rel) {
    $group    = Group::create($rel->endpointEntityId(0));
    $follower = Member::create($rel->endpointEntityId(1));

    // Create the has_subscriber relationship:
    Relation::updateBinary('has_subscriber', 'node', $group->channel()->nid(), 'user', $follower->uid());
  }

  // Subscribe everyone to the News channel:
  $rs = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('status', 1)
    ->execute();
  foreach ($rs as $rec) {
    $member = Member::create($rec->uid);

    // Create the has_subscriber relationship:
    Relation::updateBinary('has_subscriber', 'node', MOONMARS_NEWS_CHANNEL_NID, 'user', $member->uid());
  }

  // Default email_notifications to TRUE in every subscription relationship.
  $rels = Relation::searchBinary('has_subscriber', 'node', NULL, 'user', NULL);
  foreach ($rels as $rel) {
    $rel->field('field_email_notification', LANGUAGE_NONE, 0, 'value', 1);
    $rel->save();
  }

  // Delete all 'has_item' relationships where copied = 1
  $rels = Relation::searchBinary('has_item', 'node', NULL, 'node', NULL);
  foreach ($rels as $rel) {
    $copied = $rel->field('field_copied');
    if ($copied) {
      echo 'deleting ' . $rel->rid() . '<br>';
      $rel->delete();
    }
  }

}

/**
 * Sort the color names.
 */
function moonmars_update_named_colors() {
  $colors = StarColor::colorNames();
  $colors2 = array();
  foreach ($colors as $name => $hex) {
    $colors2[strtolower($name)] = strtoupper($hex);
  }
  ksort($colors2);
  dbg($colors2);
}

///**
// * Create a relationship between user 1 and node 0 (phantom group).
// */
//function moonmars_update_default_group_preferences() {
//  $rel = Relation::createNewBinary('has_member', 'node', MOONMARS_DEFAULT_GROUP_NID, 'user', 1);
//  dbg($rel);
//}

/**
 * Fix URL aliases.
 */
function moonmars_update_fix_aliases() {
  require_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'pathauto') . '/pathauto.inc';

  // Members:
  $q = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('uid', 0, '>');
  $rs = $q->execute();
  foreach ($rs as $rec) {
    $member = Member::create($rec->uid);
    $member->resetAlias();
    drupal_set_message("Updated member alias to <em>" . $member->alias() . "</em>");
  }

  // Channels and notifications:
  $q = db_select('node', 'n')
    ->fields('n', array('nid', 'type'))
    ->condition('type', array('channel', 'notification', 'item'))
    ->orderBy('type')
    ->orderBy('nid');
  $rs = $q->execute();
  foreach ($rs as $rec) {
    switch ($rec->type) {
      case 'channel':
        $channel = Channel::create($rec->nid);
        if ($channel->resetAlias()) {
          drupal_set_message("Updated channel alias to <em>" . $channel->alias() . "</em>");
        }
        else {
          drupal_set_message("Could not updated channel alias for <em>" . $channel->alias() . "</em>", 'warning');
        }
        break;

      case 'notification':
        $nxn = Notification::create($rec->nid);
        $alias = pathauto_create_alias('node', 'return', "node/$rec->nid", array('node' => $nxn->node()), 'notification');
        $nxn->alias($alias);
        drupal_set_message("Updated notification alias to <em>" . $nxn->alias() . "</em>");
        break;

      case 'item':
        $item = Item::create($rec->nid);
        $alias = pathauto_create_alias('node', 'return', "node/$rec->nid", array('node' => $item->node()), 'item');
        $item->alias($alias);
        drupal_set_message("Updated item alias to <em>" . $item->alias() . "</em>");
        break;
    }
  }

  return '';
}
