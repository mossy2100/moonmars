<?php
/**
 * Debugging functions.
 *
 * Requires strings.php.
 */

/**
 * The current debug mode.
 */
$_dbg_mode = FALSE;

/**
 * Get the debug mode.
 *
 * @param bool $mode
 */
function dbg_get_mode() {
  global $_dbg_mode;
  return $_dbg_mode;
}

/**
 * Set the debug mode.
 *
 * @param bool $mode
 */
function dbg_set_mode($mode) {
  global $_dbg_mode;
  $_dbg_mode = (bool) $mode;
}

/**
 * Switch the debug mode on.
 */
function dbg_on() {
  dbg_set_mode(TRUE);
}

/**
 * Switch the debug mode off.
 */
function dbg_off() {
  dbg_set_mode(FALSE);
}

/**
 * Begin printing a debug message.
 */
function dbg_begin_print() {
  print "<pre class='debug'>\n";
}

/**
 * End printing a debug message.
 */
function dbg_end_print() {
  print "</pre>\n";
}

/**
 * Debug all defined variables.
 *
 * @global bool $_dbg_mode
 */
function dbg_all() {
  global $_dbg_mode;
  if ($_dbg_mode) {
    dbg_begin_print();

    $vars = get_defined_vars();
    foreach ($vars as $var) {
      dbg($var);
    }

    dbg_end_print();
  }
}

/**
 * Exit with a debug message.
 *
 * @global bool $_dbg_mode
 * @param string $str
 */
function dbg_exit($str = '') {
  global $_dbg_mode;
  if ($_dbg_mode) {
    exit($str);
  }
}


////////////////////////////////////////////////////////////////////////////////
// Main debugging functions.

/**
 * Print the contents of a variable as a string, wrapped in <pre> tags.
 * THIS IS THE PRIMARY DEBUG FUNCTION.
 *
 * @param mixed $value
 * @param string $func_name
 */
function dbg($value, $func_name = '') {
  global $_dbg_mode;
  if ($_dbg_mode) {
    dbg_begin_print();
    if ($func_name != '') {
      print "<b>$func_name:</b> ";
    }
    // Requires strings.php:
    print var_to_string($value);
    dbg_end_print();
  }
}


////////////////////////////////////////////////////////////////////////////////
// Query debugging functions.

/**
 * Get the SQL for a query.
 *
 * @param Query $query
 */
function dbg_sql($query, $target = 'default') {
  // Get the query as a string:
  $query_string = (string) $query;
  $statement_type = strtolower(substr($query_string, 0, strpos($query_string, ' ')));

  // Prefix tables:
  $connection = Database::getConnection($target);
  $query_string = trim($connection->prefixTables($query_string));

  // Convert query object to an array so we can access readonly properties:
  $query_array = object_to_array($query, TRUE);

  // Replace field placeholders:
  if ($statement_type == 'insert') {
    $values = $query_array['insertValues'][0];
    foreach ($values as $index => $value) {
      $replacement = is_numeric($value) ? $value : $connection->quote($value);
      $query_string = str_replace(":db_insert_placeholder_$index", $replacement, $query_string);
    }
  }
  elseif ($statement_type == 'update') {
    $fields = $query_array['fields'];
    $n = 0;
    foreach ($fields as $value) {
      $replacement = is_numeric($value) ? $value : $connection->quote($value);
      $query_string = str_replace(":db_update_placeholder_$n", $replacement, $query_string);
      $n++;
    }
  }

  // Replace condition placeholders:
  if (isset($query_array['where']['arguments']) && is_array($query_array['where']['arguments'])) {
    foreach ($query_array['where']['arguments'] as $placeholder => $value) {
      $replacement = is_numeric($value) ? $value : $connection->quote($value);
      $query_string = str_replace($placeholder, $replacement, $query_string);
    }
  }
  if (isset($query_array['condition']['arguments']) && is_array($query_array['condition']['arguments'])) {
    foreach ($query_array['condition']['arguments'] as $placeholder => $value) {
      $replacement = is_numeric($value) ? $value : $connection->quote($value);
      $query_string = str_replace($placeholder, $replacement, $query_string);
    }
  }

  return $query_string;
}

/**
 * Debug an SQL query.
 *
 * @param Query $query
 */
function dbg_query($query, $target = 'default') {
  dbg(dbg_sql($query, $target));
}

/**
 * Devel-debug an SQL query.
 *
 * @param Query $query
 */
function dpm_query($query, $target = 'default') {
  dpm(dbg_sql($query, $target));
}

/**
 * Display previous functions called using dbg().
 */
function dbg_backtrace() {
  dbg(debug_backtrace());
}

/**
 * Display previous functions called using dpm().
 */
function dpm_backtrace() {
  dpm(debug_backtrace());
}
