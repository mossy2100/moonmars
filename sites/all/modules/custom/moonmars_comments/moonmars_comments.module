<?php

/**
 * Implements hook_menu().
 */
function moonmars_comments_menu() {
  $items['ajax/comment/update'] = array(
    'page callback'    => 'moonmars_comments_ajax_update',
    'access callback'  => 'comment_access',
    'access arguments' => array('edit', 1),
    'type'             => MENU_CALLBACK,
  );

  // @todo For deleting comments we need to use the same permissions as for edit - this is different from the usual
  // delete comment permissions, which is only available to users with the 'administer comments' permission.
  $items['ajax/comment/delete'] = array(
    'page callback'    => 'moonmars_comments_ajax_delete',
    'access arguments' => array('administer comments'),
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function moonmars_comments_form_alter(&$form, &$form_state, $form_id) {
//dbg($form_id);
  if ($form_id == 'comment_node_item_form') {
//    unset($form['author']);
//    unset($form['field_score']);
//    $form['comment_body'][LANGUAGE_NONE][0]['value']['#resizable'] = FALSE;
//    dbg($form['comment_body']);
//    dbg($form['comment_body']);
  }
}

/**
 * Update or create new comment via AJAX.
 */
function moonmars_comments_ajax_update() {
  // Get the request parameters. Support either GET or POST here, so we can use POST from the form but test using the query string.
  $cid = (int) $_REQUEST['cid'];
  $nid = (int) $_REQUEST['nid'];
  $text = trim($_REQUEST['text']);
  global $user;

  $mode = $cid ? 'edit' : 'create';

  // Check we have all the necessary params:
  if (!$nid || !$text || !$user || !$user->uid) {

    // Create the data array:
    $data = array(
      'result' => FALSE,
      'cid'    => $cid,
      'nid'    => $nid,
      'text'   => $text,
      'mode'   => $mode,
    );

    // Encode and send:
    echo json_encode($data);
    return;
  }

  if ($cid) {
    // Load the comment:
    $comment = comment_load($cid);
  }
  else {
    // Create a new comment:
    $comment = entity_create('comment', array('type' => 'comment'));
    $comment->pid = 0;
    $comment->uid = $user->uid;
    $comment->name = $user->name;
    $comment->mail = $user->mail;
    $comment->is_anonymous = FALSE;
    $comment->nid = $nid;
    $comment->status = 1;
  }

  // Update the comment text:
  $comment->comment_body[LANGUAGE_NONE][0]['value'] = $text;

  // Save the comment:
  comment_submit($comment);
  comment_save($comment);

  // Build the comment content:
  $node = node_load($nid);
  comment_build_content($comment, $node);

  // Theme the comment:
  $html = theme('comment',
    array(
      'elements' => array(
        '#comment' => $comment,
        '#node'    => $node,
      ),
      'content'  => $comment->content
    )
  );

  // Create the data array:
  $data = array(
    'result' => TRUE,
    'cid'    => $comment->cid,
    'nid'    => $nid,
    'mode'   => $mode,
    'text'   => $text,
    'html'   => $html,
  );

  // Encode and send:
  echo json_encode($data);
}

/**
 * Delete comment via AJAX.
 */
function moonmars_comments_ajax_delete() {
  // Get the request parameters. Support either GET or POST here, so we can use POST from the form but test using the query string.
  $cid = (int) $_REQUEST['cid'];

  // Check we have all the necessary params:
  if (!$cid) {
    $data = array(
      'result' => FALSE,
    );
  }
  else {
    // Delete the comment:
    comment_delete($cid);
    $data = array(
      'result' => TRUE,
    );
  }

  // Encode and send:
  echo json_encode($data);
}
