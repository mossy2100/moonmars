<?php

use \AstroMultimedia\MoonMars\Member;

/**
 * Implements hook_menu().
 */
function moonmars_comments_menu() {
  $items['ajax/comment/post'] = [
    'page callback'    => 'moonmars_comments_ajax_post',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  ];
  $items['ajax/comment/edit'] = [
    'page callback'    => 'moonmars_comments_ajax_edit',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  ];
  $items['ajax/comment/delete'] = [
    'page callback'    => 'moonmars_comments_ajax_delete',
    'access callback'  => 'user_is_logged_in',
    'type'             => MENU_CALLBACK,
  ];
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function moonmars_comments_form_alter(&$form, &$form_state, $form_id) {
//dbg($form_id);
  if ($form_id == 'comment_node_item_form') {
//    unset($form['author']);
//    unset($form['field_score']);
//    dbg($form['comment_body']);
//    dbg($form['comment_body']);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AJAX comment actions/callbacks.

/**
 * Create new comment via AJAX.
 */
function moonmars_comments_ajax_post() {
  // Get the request parameters.
  // We use $_REQUEST here in order to support either GET or POST.
  // Then we can use POST from the form but test using the query string.
  $item_nid = (int) $_REQUEST['item_nid'];
  $text = trim($_REQUEST['text']);

  // Get the logged-in member:
  $logged_in_member = Member::loggedInMember();

  // Begin the data array:
  $data = [
    'item_nid' => $item_nid,
    'text'     => $text,
  ];

  // Check we have all the necessary params:
  if (!$item_nid || !$text || !$logged_in_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the item:
  $item = Item::create($item_nid);

  // Check this member has permission to edit this comment:
  if (!$logged_in_member->canPostComment($item)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  /////////////////////////////////
  // All good - create the comment.

  // Create a new comment:
  $comment = entity_create('comment', ['type' => 'comment']);
  $comment->pid = 0;
  $comment->uid = $logged_in_member->uid();
  $comment->name = $logged_in_member->name();
  $comment->mail = $logged_in_member->mail();
  $comment->is_anonymous = FALSE;
  $comment->nid = $item_nid;
  $comment->status = 1;
  // Note that we have to convert the <3 heart emoticon to HTML entities before strip_tags is called, otherwise
  // everything from the emoticon will get removed.
  $comment->comment_body[LANGUAGE_NONE][0]['value'] = strip_tags(str_replace('<3', '&lt;3', $text));

  // Save the comment:
  comment_submit($comment);
  comment_save($comment);

  // Render the comment:
  $item_comment = ItemComment::create($comment);
  $html = $item_comment->render();

  // Post the comment in the current channel:
  Channel::currentChannel()->postComment($item_comment, TRUE);

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  $data['cid'] = $comment->cid;
  $data['html'] = $html;
  echo json_encode($data);
}

/**
 * Edit a comment via AJAX.
 */
function moonmars_comments_ajax_edit() {
  // Get the request parameters.
  // We use $_REQUEST here in order to support either GET or POST.
  // Then we can use POST from the form but test using the query string.
  $cid = (int) $_REQUEST['cid'];
  $item_nid = (int) $_REQUEST['item_nid'];
  $text = trim($_REQUEST['text']);

  // Get the logged-in member:
  $logged_in_member = Member::loggedInMember();

  // Begin the data array:
  $data = [
    'cid'      => $cid,
    'item_nid' => $item_nid,
    'text'     => $text,
  ];

  // Check we have all the necessary params:
  if (!$cid || !$item_nid || !$text || !$logged_in_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the comment:
  $item_comment = ItemComment::create($cid);

  // Check this member has permission to edit this comment:
  if (!$logged_in_member->canEditComment($item_comment)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  /////////////////////////////////
  // All good - update the comment.

  // Update the comment text:
  $item_comment->text($text);

  // Save the comment:
  $item_comment->submit();
  $item_comment->save();

  // Update the comment in the current channel:
  Channel::currentChannel()->postComment($item_comment, FALSE);

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  $data['html'] = $item_comment->textScan()->html();
  echo json_encode($data);
}

/**
 * Delete comment via AJAX.
 */
function moonmars_comments_ajax_delete() {
  // Get the request parameters. Support either GET or POST here, so we can use POST from the form but test using the query string.
  $cid = (int) $_REQUEST['cid'];

  // Get the logged-in member:
  $logged_in_member = Member::loggedInMember();

  // Create the data array:
  $data = [
    'cid' => $cid,
  ];

  // Check we have all the necessary params:
  if (!$cid || !$logged_in_member) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Get the comment:
  $item_comment = ItemComment::create($cid);

  // Check this member has permission to delete this comment:
  if (!$logged_in_member->canDeleteComment($item_comment)) {
    // Complete data array, encode and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  ////////////////////////////////////
  // All good - unpublish the comment.

  // Don't delete the comment, just unpublish it:
  $item_comment->unpublish();
  $item_comment->save();

  // Complete data array, encode and send:
  $data['result'] = TRUE;
  echo json_encode($data);
  return;
}
