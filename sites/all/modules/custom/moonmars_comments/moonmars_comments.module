<?php

/**
 * Implements hook_menu().
 */
function moonmars_comments_menu() {
  $items['ajax/comment/post'] = array(
    'page callback'    => 'moonmars_comments_ajax_post',
    'access callback'  => 'moonmars_comments_can_post',
    'type'             => MENU_CALLBACK,
  );
  $items['ajax/comment/edit'] = array(
    'page callback'    => 'moonmars_comments_ajax_edit',
    'access callback'  => 'moonmars_comments_can_edit',
    'type'             => MENU_CALLBACK,
  );

  // @todo For deleting comments we need to use the same permissions as for edit - this is different from the usual
  // delete comment permissions, which is only available to users with the 'administer comments' permission.
  $items['ajax/comment/delete'] = array(
    'page callback'    => 'moonmars_comments_ajax_delete',
    'access callback'  => 'moonmars_comments_can_delete',
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function moonmars_comments_form_alter(&$form, &$form_state, $form_id) {
//dbg($form_id);
  if ($form_id == 'comment_node_item_form') {
//    unset($form['author']);
//    unset($form['field_score']);
//    $form['comment_body'][LANGUAGE_NONE][0]['value']['#resizable'] = FALSE;
//    dbg($form['comment_body']);
//    dbg($form['comment_body']);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Access callbacks.

/**
 * Check if the current user can post comments in the current channel.
 *
 * @return bool
 */
function moonmars_comments_can_post() {
  // User can only post comments in a channel if they can also post items:
  return moonmars_items_can_post();
}

/**
 * Check if the current user can edit a comment.
 *
 * @return bool
 */
function moonmars_comments_can_edit() {
  // Users with 'administer comments' (admins) can do whatever they want with comments.
  if (user_access('administer comments')) {
    return TRUE;
  }

  // We need a valid comment id:
  $cid = (int) $_REQUEST['cid'];
  if (!$cid) {
    return FALSE;
  }
  $comment = comment_load($cid);
  if (!$comment) {
    return FALSE;
  }

  // Users can edit their own comments:
  global $user;
  return $comment->uid == $user->uid;
}

/**
 * Check if the current user can delete a comment.
 *
 * @return bool
 */
function moonmars_comments_can_delete() {
  // Same rules as for editing:
  return moonmars_comments_can_edit();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AJAX comment actions/callbacks.

/**
 * Create new comment via AJAX.
 */
function moonmars_comments_ajax_create() {
  // Get the request parameters.
  // We use $_REQUEST here in order to support either GET or POST.
  // Then we can use POST from the form but test using the query string.
  $item_nid = (int) $_REQUEST['item_nid'];
  $text = trim($_REQUEST['text']);
  global $user;

  // Create the data array:
  $data = array(
    'item_nid' => $item_nid,
    'text'     => $text,
  );

  // Check we have all the necessary params:
  if (!$item_nid || !$text || !$user || !$user->uid) {
    // Encode result and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Create a new comment:
  $comment = entity_create('comment', array('type' => 'comment'));
  $comment->pid = 0;
  $comment->uid = $user->uid;
  $comment->name = $user->name;
  $comment->mail = $user->mail;
  $comment->is_anonymous = FALSE;
  $comment->nid = $item_nid;
  $comment->status = 1;
  $comment->comment_body[LANGUAGE_NONE][0]['value'] = $text;

  // Save the comment:
  comment_submit($comment);
  comment_save($comment);

  // Build the comment content:
  $item = Item::create($item_nid);
  $item->load();
  comment_build_content($comment, $item->node());

  // Post/bump the item in all relevant channels:
  Channel::currentChannel()->postItem($item, TRUE, TRUE);

  // Theme the comment:
  $html = render_comment($comment);

  // Encode and send result:
  $data['result'] = TRUE;
  $data['cid'] = $comment->cid;
  $data['html'] = $html;
  echo json_encode($data);
}

/**
 * Edit a comment via AJAX.
 */
function moonmars_comments_ajax_edit() {
  // Get the request parameters.
  // We use $_REQUEST here in order to support either GET or POST.
  // Then we can use POST from the form but test using the query string.
  $cid = (int) $_REQUEST['cid'];
  $item_nid = (int) $_REQUEST['item_nid'];
  $text = trim($_REQUEST['text']);
  global $user;

  // Create the data array:
  $data = array(
    'cid'      => $cid,
    'item_nid' => $item_nid,
    'text'     => $text,
  );

  // Check we have all the necessary params:
  if (!$cid || !$item_nid || !$text || !$user || !$user->uid) {
    // Encode result and send:
    $data['result'] = FALSE;
    $data['error'] = 'Invalid parameters';
    echo json_encode($data);
    return;
  }

  // Load the comment:
  $comment = comment_load($cid);

  // Check this user has permission to edit the comment:
  if ($comment != $user->uid) {
    // Encode result and send:
    $data['result'] = FALSE;
    $data['error'] = 'Access denied';
    echo json_encode($data);
    return;
  }

  // Update the comment text:
  $comment->comment_body[LANGUAGE_NONE][0]['value'] = $text;

  // Save the comment:
  comment_submit($comment);
  comment_save($comment);

  // Build the comment content:
  $item = Item::create($item_nid);
  $item->load();
  comment_build_content($comment, $item->node());

  // Post/update the item:
  Channel::currentChannel()->postItem($item, FALSE, TRUE);

  // Theme the comment:
  $html = render_comment($comment);

  // Encode and send result:
  $data['result'] = TRUE;
  $data['html'] = $html;
  echo json_encode($data);
}

/**
 * Delete comment via AJAX.
 */
function moonmars_comments_ajax_delete() {
  // Get the request parameters. Support either GET or POST here, so we can use POST from the form but test using the query string.
  $cid = (int) $_REQUEST['cid'];

  // Create the data array:
  $data = array(
    'cid'      => $cid,
  );

  // Check we have all the necessary params:
  if (!$cid) {
    $data['result'] = FALSE;
  }
  else {
    // Delete the comment:
    comment_delete($cid);
    $data['result'] = TRUE;
  }

  // Encode and send:
  echo json_encode($data);
}
