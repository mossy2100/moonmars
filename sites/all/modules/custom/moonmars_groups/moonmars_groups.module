<?php

/**
 * Implements hook_menu().
 */
function moonmars_groups_menu() {
  $items = array();
  $items['node/%/join'] = array(
    'page callback'    => 'moonmars_groups_join',
    'page arguments'   => array(1),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  $items['node/%/leave'] = array(
    'page callback'    => 'moonmars_groups_leave',
    'page arguments'   => array(1),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Checks if this is a group page.
 * This function can probably be improved by using native Drupal/context variables.
 *
 * @return bool
 */
function moonmars_groups_is_group_page() {
  if (arg(0) == 'node' && is_uint(arg(1)) && arg(2) != 'edit') {
    $node = node_load(arg(1));
    return $node->type == 'group';
  }
  return FALSE;
}

/**
 * If this is a group page, return the current group.
 *
 * @return object|bool
 */
function moonmars_groups_get_current_group() {
  if (arg(0) == 'node' && is_uint(arg(1)) && arg(2) != 'edit') {
    return node_load(arg(1));
  }
  return FALSE;
}

/**
 * Add a member to a group.
 *
 * @param int $group_nid
 */
function moonmars_groups_join($group_nid) {
  // Load the node:
  $node = node_load($group_nid);

  // Check the type, in case the nid is dodgy:
  if ($node->type != 'group') {
    drupal_set_message('Group not found.');
    return;
  }

  // Get the group:
  $group = Group::create($node);

  // Get the alias:
  $group_alias = $group->alias();

  // Get the current member:
  $current_member = Member::currentMember();

  // Check the user is logged in:
  if (!$current_member) {
    drupal_set_message("Please <a href='/login'>login</a> or <a href='/register'>register</a> before joining a group.");
    drupal_goto('/login', array('query' => array('destination' => "$group_alias/join")));
    return;
  }

  // Check if the user can join this group:
  if (!$current_member->canJoinGroup($group)) {
    drupal_set_message("Sorry, you don't have permission to join this group.");
    drupal_goto($group_alias);
    return;
  }

  // Check if they're already a member:
  if ($group->hasMember($current_member)) {
    drupal_set_message("You're already a member of this group.");
    drupal_goto($group_alias);
    return;
  }

  ////////////////////////////////////
  // All good, add them to the group.

  // Add the member to the group:
  $current_member->joinGroup($group);

  // Reload the group page:
  drupal_set_message("You have been added to the group " . $group->title() . ".");
  drupal_goto($group_alias);
}

/**
 * Remove a user from a group.
 *
 * @param int $group_nid
 */
function moonmars_groups_leave($group_nid) {
  // Get the group:
  $group = Group::create($group_nid);

  // Check the type:
  if ($group->type() != 'group') {
    drupal_set_message('Group not found.');
    return;
  }

  // Get the alias:
  $group_alias = $group->alias();

  // Get the current member:
  $current_member = Member::currentMember();

  // Check the user is logged in:
  if (!$current_member) {
    drupal_set_message("You need to <a href='/user'>login</a> before leaving a group.");
    drupal_goto('/login', array('query' => array('destination' => "$group_alias/join")));
    return;
  }

  // Check if they're actually a member:
  if (!$group->hasMember($current_member)) {
    drupal_set_message("You are not a member of this group.");
    drupal_goto($group_alias);
    return;
  }

  // Remove the user from the group:
  $current_member->leaveGroup($group);

  // Reload the group page:
  drupal_set_message("You have been removed from the group " . $group->title() . ".");
  drupal_goto($group_alias);
}

/**
 * Render a sidebar block of groups.
 *
 * @param array $groups
 *   Array of Group objects.
 * @param int $group_count
 *   The total number of groups (could be larger than the array count).
 * @return string
 */
function moonmars_groups_render_block($groups, $group_count = NULL) {
  $html = '';

  // Group count:
  if ($group_count !== NULL) {
    $html = "<div class='group-count'>\n";
    $html .= format_plural($group_count, '1 group', '@count groups');
    $html .= "</div>";
  }

  // groups:
  $html .= "<ul class='member-groups clearfix'>\n";
  // Avatars for most recent groups:
  foreach ($groups as $group) {
    $html .= "<li class='member-group'>\n";

    // Render a link to the group, with logo if present:
    $title = $group->title();
    $logo = $group->renderLogo('sidebar-logo-90-wide');
    $label = ($logo ? "$logo<br>" : '') . $title;
    $html .= l($label, $group->alias(), array('html' => TRUE, 'attributes' => array('title' => $title)));

    $html .= "</li>\n";
  }
  $html .= "</ul>\n";

  // View all groups link:
//  $html .= "<div class='view-all-groups-link'>\n";
//  $html .= l('View all', drupal_get_path_alias("user/$member_uid") . '/groups');
//  $html .= "</div>";

  return $html;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blocks

/**
 * Implementation of hook_block_info().
 */
function moonmars_groups_block_info() {
  $blocks['group-menu'] = array(
    'info' => t('Group menu'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['group-members'] = array(
    'info' => t('Group members'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['newest-groups'] = array(
    'info' => t('Newest groups'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function moonmars_groups_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'group-menu':
      $block['subject'] = NULL;
      $block['content'] = moonmars_groups_menu_block();
      break;

    case 'group-members':
      $block['subject'] = 'Members';
      $block['content'] = moonmars_groups_members_block();
      break;

    case 'newest-groups':
      $block['subject'] = 'Newest groups';
      $block['content'] = moonmars_groups_newest_groups_block();
      break;
  }
  return $block;
}

/**
 * Generate a user menu for the current group and current user.
 */
function moonmars_groups_menu_block() {
  if (!moonmars_groups_is_group_page()) {
    // This is not a group page:
    return '';
  }

  global $user;
  if (!$user) {
    return "<p>To join this group, first <a href='user/register'>register an account</a>.</p>";
  }

  // Get the group:
  $group_nid = (int) arg(1);
  $group = Group::create($group_nid);

  // Get the current member:
  $member = Member::currentMember();

  // Show different options if the member is in the group or not:
  $html = "<ul id='group-menu' class='menu'>";

  if ($group->hasMember($member)) {
    $html .= "<li>" . l('Leave group', $group->alias() . '/leave') . "</li>";
//    if (moonmars_groups_receive_emails($group_nid, $user)) {
//      $html .= "<li>Stop email notifications</li>";
//    }
//    else {
//      $html .= "<li>Start email notifications</li>";
//    }
  }
  else {
    // @todo Update to support "ask permission to join group"
    $html .= "<li>" . l('Join group', $group->alias() . '/join') . "</li>";
  }

  // Editing social links:
  if ($group->hasAdmin($member)) {
    $html .= "<li>" . l('Edit channel', $group->channel()->editAlias()) . "</li>";
  }

  $html .= "</ul>";
  return $html;
}

/**
 * Generate HTML for the group's most recently joined members.
 *
 * @return string
 */
function moonmars_groups_members_block() {
  // Get the group nid from the URL:
  $group_nid = (int) arg(1);
  $group = Group::create($group_nid);

  // Get the latest 12 group members:
  $members = $group->members(0, 12);

  // Generate HTML:
  $html = moonmars_members_render_avatars($group->memberCount(), $members);
  // l('View all', drupal_get_path_alias("node/$group_nid") . '/members')

  return $html;
}

/**
 * Generate HTML for the newest groups.
 *
 * @return string
 */
function moonmars_groups_newest_groups_block() {
  // Get the newest 4 groups:
  $groups = Group::newest(4);

  // Generate HTML:
  $html = moonmars_groups_render_block($groups);

  // View all groups link:
  $html .= "<div class='view-all-groups-link'>\n";
  $html .= l('View all', 'groups');
  $html .= "</div>";

  return $html;
}
