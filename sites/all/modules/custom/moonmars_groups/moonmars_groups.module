<?php

/**
 * Implements hook_menu().
 */
function moonmars_groups_menu() {
  $items = array();
  $items['node/%/join'] = array(
    'page callback'    => 'moonmars_groups_join',
    'page arguments'   => array(1),
    'access callback'  => TRUE, // 'moonmars_groups_can_join',
    'type'             => MENU_CALLBACK,
  );
  $items['node/%/leave'] = array(
    'page callback'    => 'moonmars_groups_leave',
    'page arguments'   => array(1),
    'access callback'  => TRUE,
    'type'             => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Checks if this is a group page.
 * This function can probably be improved by using native Drupal/context variables.
 *
 * @return bool
 */
function moonmars_groups_is_group_page() {
  if (arg(0) == 'node' && is_uint(arg(1)) && arg(2) != 'edit') {
    $node = node_load(arg(1));
    return $node->type == 'group';
  }
  return FALSE;
}

/**
 * If this is a group page, return the current group.
 *
 * @return object|bool
 */
function moonmars_groups_get_current_group() {
  if (arg(0) == 'node' && is_uint(arg(1)) && arg(2) != 'edit') {
    return node_load(arg(1));
  }
  return FALSE;
}

/**
 * Add a user to a group.
 *
 * @param int $group_nid
 */
function moonmars_groups_join($group_nid) {
  // Get the group:
  $group = node_load($group_nid);
  if (!$group || $group->type != 'group') {
    drupal_set_message('Group not found.');
    return;
  }
  $group_page = drupal_get_path_alias("node/$group_nid");

  // Get the user:
  global $user;
  if (!$user || !$user->uid) {
    drupal_set_message("You need to <a href='/login'>login</a> or <a href='/register'>register</a> before joining a group.");
    drupal_goto('/login', array('query' => array('destination' => "$group_page/join")));
    return;
  }

  // Add the member to the group:
  moonmars_relationships_create_relationship('has_member', 'node', $group_nid, 'user', $user->uid, TRUE);

  // Auto-subscribe the user to the group's channel:
  $channel_nid = moonmars_channels_get_channel('node', $group_nid);
  moonmars_relationships_create_relationship('has_subscriber', 'node', $channel_nid, 'user', $user->uid, TRUE);

  // Reload the group page:
  drupal_set_message("You have been added to the group $group->title.");
  drupal_goto($group_page);
}

/**
 * Remove a user from a group.
 *
 * @param int $group_nid
 */
function moonmars_groups_leave($group_nid) {
  // Get the group:
  $group = Group::create($group_nid);

  if ($group->type != 'group') {
    drupal_set_message('Group not found.');
    return;
  }
  $group_alias = $group->alias();

  // Get the user:
  global $user;
  if (!$user || !$user->uid) {
    drupal_set_message("You need to <a href='/user'>login</a> before leaving a group.");
    drupal_goto('/user', array('query' => array('destination' => "$group_alias/join")));
    return;
  }

  // Remove the user from the group.
  // Get the relationship:
  $rel = $group->memberRelationship($user->uid);
  if (!$rel) {
    drupal_set_message("You are not a member of this group.");
  }
  // Delete the membership relationship:
  moonmars_relationships_delete_relationships('has_member', 'node', $group_nid, 'user', $user);

  // Unsubscribe the user from the group's channel:
  $channel_nid = moonmars_channels_get_channel('node', $group_nid);
  moonmars_relationships_delete_relationships('has_subscriber', 'node', $channel_nid, 'user', $user);

  // Reload the group page:
  drupal_set_message("You have been removed from the group $group->title.");
  drupal_goto($group_alias);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blocks

/**
 * Implementation of hook_block_info().
 */
function moonmars_groups_block_info() {
  $blocks['group-menu'] = array(
    'info' => t('Group menu'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['group-members'] = array(
    'info' => t('Group members'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function moonmars_groups_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'group-menu':
      $block['subject'] = NULL;
      $block['content'] = moonmars_groups_menu_block();
      break;

    case 'group-members':
      $block['subject'] = t('Members');
      $block['content'] = moonmars_groups_members_block();
      break;
  }
  return $block;
}

/**
 * Generate a user menu for the current group and current user.
 */
function moonmars_groups_menu_block() {
  if (!moonmars_groups_is_group_page()) {
    // This is not a group page:
    return 'x';
  }

  global $user;
  if (!$user) {
    return "<p>To join this group, first <a href='user/register'>register an account</a>.</p>";
  }

  // Show different options if the member is in the group or not:
  $html = "<ul id='group-menu' class='menu'>";
  $group_nid = (int) arg(1);
  if (moonmars_groups_is_member($group_nid, $user)) {
    $html .= "<li>" . l('Leave group', "node/$group_nid/leave") . "</li>";
//    if (moonmars_groups_receive_emails($group_nid, $user)) {
//      $html .= "<li>Stop email notifications</li>";
//    }
//    else {
//      $html .= "<li>Start email notifications</li>";
//    }
  }
  else {
    // @todo Update to support "ask permission to join group"
    $html .= "<li>" . l('Join group', "node/$group_nid/join") . "</li>";
  }
  $html .= "</ul>";
  return $html;
}

/**
 * Generate HTML for the group's most recently joined members.
 *
 * @return string
 */
function moonmars_groups_members_block() {
  // Get the group nid from the URL:
  $group_nid = (int) arg(1);
  $group = Group::create($group_nid);

  // Get the latest 12 group members:
  $member_uids = $group->members(0, 12);
  $n_members = $group->memberCount();

  // Generate HTML:

  // Member count:
  $html = "<div class='group-member-count'>\n";
  $html .= format_plural($n_members, '1 member', '@count members');
  $html .= "</div>";

  // Avatars for most recently joined members:
  $html .= "<ul class='group-members clearfix'>\n";
  foreach ($member_uids as $member_uid) {
    $member = Member::create($member_uid);
    $html .= "<li class='group-member'>\n";
    $html .= $member->avatarTooltip();
    $html .= "</li>\n";
  }
  $html .= "</ul>\n";

  // "View all" link:
//  $html .= "<div class='group-members-view-all'>\n";
//  $html .= l('View all', drupal_get_path_alias("node/$group_nid") . '/members');
//  $html .= "</div>";

  return $html;
}
