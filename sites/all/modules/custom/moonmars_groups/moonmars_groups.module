<?php

use \AstroMultimedia\MoonMars\Member;
use \AstroMultimedia\MoonMars\Group;
use \AstroMultimedia\MoonMars\Channel;
use \AstroMultimedia\MoonMars\Triumph;

/**
 * Number of groups to show per page in a group search.
 */
const MOONMARS_GROUP_SEARCH_PAGE_SIZE = 20;

/**
 * The nid of the default group, which contains a member's default group notification preferences.
 */
//const MOONMARS_DEFAULT_GROUP_NID = 5375;

/**
 * Implements hook_menu().
 */
function moonmars_groups_menu() {
  $items = array();
  $items['node/%/join'] = array(
    'page callback' => 'moonmars_groups_join',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['node/%/leave'] = array(
    'page callback' => 'moonmars_groups_leave',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['groups'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('moonmars_groups_search_form'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function moonmars_groups_form_group_node_form_alter(&$form, &$form_state) {
  // JS:
  $module_path = drupal_get_path('module', 'moonmars_groups');
  $form['#attached']['js'][] = "$module_path/js/group-edit-form.js";
  $form['#attached']['js'][] = moonmars_stars_tag_prefixes();
  $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_stars') . "/js/star-tag-check.js";
  $form['#attached']['js'][] = "$module_path/js/group-tag-check.js";

  // Hide the score:
  unset($form['field_score']);

  // If editing a group, add a hidden field to contain the nid:
  if (isset($form['#node']->nid)) {
    $form['nid'] = array(
      '#type' => 'hidden',
      '#value' => $form['#node']->nid,
      '#attributes' => array('id' => 'nid'),
    );
  }
  // Add submit handler to send Triumph Nxn:
  $form['actions']['submit']['#submit'][] = 'moonmars_group_update_nxn_form_submit';
}

/**
 * Submit handler.
 *
 * @param array $form
 * @param array $form_state
 */
function moonmars_group_update_nxn_form_submit($form, &$form_state) {
  $group = Group::create($form_state['node']);
  $is_new = !isset($form['#node']->nid);
  if ($is_new) {
    // Tell everyone about the new group:
    Triumph::newGroup($group);
    // Add the creator as group admin:
    $group->addAdmin(Member::loggedInMember());
  }
  else {
    // Tell everyone that the group profile has been updated:
    $logged_in_member = Member::loggedInMember();
    Triumph::updateGroup($group, $logged_in_member);
  }
}

/**
 * Checks if this is a group page.
 * This function can probably be improved by using native Drupal/context variables.
 *
 * @return bool
 */
function moonmars_groups_is_group_page() {
  if (arg(0) == 'node' && is_pint(arg(1)) && arg(2) != 'edit') {
    return node_get_type(arg(1)) == 'group';
  }
  return FALSE;
}

/**
 * If this is a group page, return the current group.
 *
 * @return object|bool
 */
function moonmars_groups_get_current_group() {
  if (arg(0) == 'node' && is_uint(arg(1)) && arg(2) != 'edit') {
    return node_load(arg(1));
  }
  return FALSE;
}

/**
 * Add a member to a group.
 *
 * @param int $group_nid
 */
function moonmars_groups_join($group_nid) {
  // Load the node:
  $node = node_load($group_nid);

  // Check the type, in case the nid is dodgy:
  if ($node->type != 'group') {
    drupal_set_message('Group not found.');
    return;
  }

  // Get the group:
  $group = Group::create($node);

  // Get the alias:
  $group_alias = $group->alias();

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Check the user is logged in:
  if (!$logged_in_member) {
    drupal_set_message("Please <a href='/user/login'>login</a> or <a href='/register'>register</a> before joining a group.");
    drupal_goto('user/login', array('query' => array('destination' => "$group_alias/join")));
    return;
  }

  // Check if the user can join this group:
  if (!$logged_in_member->canJoinGroup($group)) {
    drupal_set_message("Sorry, you don't have permission to join this group.");
    drupal_goto($group_alias);
    return;
  }

  // Check if they're already a member:
  if ($group->hasMember($logged_in_member)) {
    drupal_set_message("You're already a member of this group.");
    drupal_goto($group_alias);
    return;
  }

  ////////////////////////////////////
  // All good, add them to the group.

  // Add the member to the group:
  $logged_in_member->joinGroup($group);

  // Reload the group page:
  drupal_set_message("You have been added to the group " . $group->title() . ".");
  drupal_goto($group_alias);
}

/**
 * Remove a user from a group.
 *
 * @param int $group_nid
 */
function moonmars_groups_leave($group_nid) {
  // Get the group:
  $group = Group::create($group_nid);

  // Check the type:
  if ($group->nodeType() != 'group') {
    drupal_set_message('Group not found.');
    return '';
  }

  // Get the alias:
  $group_alias = $group->alias();

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Check the user is logged in:
  if (!$logged_in_member) {
    drupal_set_message("You need to <a href='/user/login'>login</a> before leaving a group.");
    drupal_goto('user/login', array('query' => array('destination' => "$group_alias/join")));
    return;
  }

  // Check if they're actually a member:
  if (!$group->hasMember($logged_in_member)) {
    drupal_set_message("You are not a member of this group.");
    drupal_goto($group_alias);
    return;
  }

  // Remove the user from the group:
  $logged_in_member->leaveGroup($group);

  // Reload the group page:
  drupal_set_message("You have been removed from the group " . $group->title() . ".");
  drupal_goto($group_alias);
}

/**
 * Render a sidebar block of groups.
 *
 * @param array $groups
 *   Array of Group objects.
 * @param int $max_n_display
 *   The maximum number of groups to display in the block.
 * @return string
 */
function moonmars_groups_render_block($groups, $max_n_display = NULL, $view_all_link = NULL) {
  $html = "<div class='groups-block'>\n";

  // Group count:
  $html .= "<div class='group-count'>\n";
  $html .= format_plural(count($groups), '1 group', '@count groups');
  $html .= "</div>";

  // Groups:
  $html .= "<ul class='group-list clearfix'>\n";

  // Avatars for most recent groups:
  $n = 0;
  foreach ($groups as $group) {
    $html .= "<li class='group-icon'>\n";

    // Render a link to the group, with logo if present:
    $title = $group->title();
    $logo = $group->renderLogo('sidebar-logo-90-wide');
    $label = ($logo ? "$logo<br>" : '') . $title;
    $html .= l($label, $group->alias(), array('html' => TRUE, 'attributes' => array('title' => $title)));

    $html .= "</li>\n";

    // Have we rendered enough?
    $n++;
    if ($max_n_display !== NULL && $n == $max_n_display) {
      break;
    }
  }
  $html .= "</ul>\n";

  // View all groups link:
  if ($view_all_link) {
    $html .= "
      <div class='view-all-groups-link'>
        $view_all_link
      </div>
    ";
  }

  $html .= "</div>";

  return $html;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Blocks

/**
 * Implementation of hook_block_info().
 */
function moonmars_groups_block_info() {
  $blocks['group-menu'] = array(
    'info' => t('Group menu'),
    'cache' => DRUPAL_CACHE_PER_USER,
  );
  $blocks['group-members'] = array(
    'info' => t('Group members'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['newest-groups'] = array(
    'info' => t('Newest groups'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['biggest-groups'] = array(
    'info' => t('Biggest groups'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function moonmars_groups_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'group-menu':
      $block['subject'] = NULL;
      $block['content'] = moonmars_groups_menu_block();
      break;

    case 'group-members':
      $block['subject'] = 'Members';
      $block['content'] = moonmars_groups_members_block();
      break;

    case 'newest-groups':
      $block['subject'] = 'Newest groups';
      $block['content'] = moonmars_groups_newest_groups_block();
      break;

//    case 'biggest-groups':
//      $block['subject'] = 'Biggest groups';
//      $block['content'] = moonmars_groups_biggest_groups_block();
//      break;
  }
  return $block;
}

/**
 * Generate a user menu for the current group and current user.
 */
function moonmars_groups_menu_block() {
  if (!moonmars_groups_is_group_page()) {
    // This is not a group page:
    return '';
  }

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // If the user isn't logged in, no menu:
  if (!$logged_in_member) {
    return "<p><a href='/user/login'>Login</a> or <a href='/register'>register</a> to join this group.</p>";
  }

  // Get the group from the URL:
  $actor = moonmars_actors_get_actor_from_url();
  $group = ($actor instanceof Group) ? $actor : (($actor instanceof Channel) ? $actor->star() : FALSE);
  if (!($group instanceof Group)) {
    return '';
  }

  // Check if they're a member of the group:
  $is_member = $group->hasMember($logged_in_member);

  // Show different options if the member is in the group or not:
  $html = "<ul id='group-menu' class='menu'>";

  // Show link to join an open group:
  if (!$is_member && $group->mode() == 'open') {
    // @todo Update to support restricted mode groups.
    $html .= "<li>" . l('Join group', $group->alias() . '/join') . "</li>";
  }

  // Editing links:
  if ($logged_in_member->canAdministerGroup($group)) {
    $html .= "<li>" . l('Edit profile', $group->editAlias()) . "</li>";
    $html .= "<li>" . l('Edit links', $group->channel()->editAlias()) . "</li>";
  }

  if ($is_member) {
    $html .= "<li>" . l('Leave group', $group->alias() . '/leave') . "</li>";
  }

  $html .= "</ul>";

  return $html;
}

/**
 * Generate HTML for the group's most recently joined members.
 *
 * @return string
 */
function moonmars_groups_members_block() {
  // Get the group from the URL:
  $actor = moonmars_actors_get_actor_from_url();
  $group = ($actor instanceof Group) ? $actor : (($actor instanceof Channel) ? $actor->star() : FALSE);
  if (!($group instanceof Group)) {
    return '';
  }

  // Generate HTML:
  $html = moonmars_members_render_avatars($group->members());
  // l('View all', drupal_get_path_alias("node/$group_nid") . '/members')

  return $html;
}

/**
 * Generate HTML for the newest groups.
 *
 * @return string
 */
function moonmars_groups_newest_groups_block() {
  // Get the newest groups:
  $groups = Group::newest(10);

  // Generate HTML:
  $html = moonmars_groups_render_block($groups);

  return $html;
}

/**
 * Generate HTML for the biggest groups.
 *
 * @return string
 */
function moonmars_groups_biggest_groups_block() {
  // Get the biggest 4 groups:
  $groups = Group::biggest(4);

  // Generate HTML:
  $html = moonmars_groups_render_block($groups);

  return $html;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Search

/**
 * Search groups.
 *
 * @param array $params
 * @return array
 */
function moonmars_groups_search($params = array()) {
//  dpm($params, 'moonmars_groups_search params');

  // Reset the search params:
  $_SESSION['group_search']['params'] = array();

  // Create the search query:
  $q = db_select('view_group', 'vg')
    ->fields('vg', array('nid'));

  // Text:
  if (isset($params['text'])) {
    $text = trim($params['text']);
    if ($text) {
      $or = db_or()->condition('title', "%$text%", 'LIKE')->condition('description', "%$text%", 'LIKE');
      $q->condition($or);
      $_SESSION['group_search']['params']['text'] = $text;
    }
  }

  // Group types:
  if (isset($params['type'])) {
    $selected_types = array();

    if (is_array($params['type'])) {
      // Types selected as checkboxes on form:
      foreach ($params['type'] as $type => $selected) {
        if ($selected) {
          $selected_types[] = $type;
        }
      }
    }
    elseif (is_string($params['type'])) {
      // Types passed as querystring param:
      $selected_types = explode(',', $params['type']);
    }

    if ($selected_types) {
      $q->condition('group_type', $selected_types);
      $_SESSION['group_search']['params']['type'] = $selected_types;
    }
  }

  // @todo change this to Region, and support selection of planet, continent, country and city
//  // Scale:
//  if (isset($params['scale'])) {
//    $selected_scales = array();
//
//    if (is_array($params['scale'])) {
//      // Scales selected as checkboxes on form:
//      foreach ($params['scale'] as $scale => $selected) {
//        if ($selected) {
//          $selected_scales[] = $scale;
//        }
//      }
//    }
//    elseif (is_string($params['scale'])) {
//      // Scales passed as querystring param:
//      $selected_scales = explode(',', $params['scale']);
//    }
//
//    if ($selected_scales) {
//      $q->condition('group_scale', $selected_scales);
//      $_SESSION['group_search']['params']['scales'] = $selected_scales;
//    }
//  }

  // Size:
  if (isset($params['size'])) {
    $size = (int) $params['size'];
    if ($size > 0) {
      $min = $size == 1 ? 0 : pow(10, $size - 1);
      $max = pow(10, $size) - 1;
      $q->condition('member_count', array($min, $max), 'BETWEEN');
      $_SESSION['group_search']['params']['size'] = $size;
    }
  }

  // Member:
  if (isset($params['member'])) {
    $member = trim($params['member']);
    if ($member) {

      // Create the subquery:
      $subquery = db_select('view_group_has_member', 'vgm')
        ->fields('vgm', array('group_nid'))
        ->condition('member_name', $member);

      // Add the condition:
      $is_in = isset($params['is_in']) ? ((bool) $params['is_in']) : TRUE;
      $q->condition('nid', $subquery, $is_in ? 'IN' : 'NOT IN');

      // Add the cleaned parameters to the session array:
      $_SESSION['group_search']['params']['member'] = $member;
      $_SESSION['group_search']['params']['is_in'] = $is_in;
    }
  }

  // Order by title:
  $q->orderBy('title');

//  dpm_query($q);

  // Get the results:
  $rs = $q->execute();
  $results = array();
  foreach ($rs as $rec) {
    $results[] = $rec->nid;
  }

  return $results;
}

/**
 * Create the group search form, including the search results.
 *
 * @return array
 */
function moonmars_groups_search_form() {
//  dpm($_POST, 'POST at beginning of moonmars_groups_search_form');

  // Search using parameters from either the POST or GET array, if either is provided.
  $params = NULL;

  if (isset($_SESSION['group_search']['redo_search']) && $_SESSION['group_search']['redo_search']) {
    $params = $_SESSION['group_search']['params'];
    unset($_SESSION['group_search']['redo_search']);
//    dpm($params, "Redoing search");
  }
  elseif ($_POST && isset($_POST['op']) && $_POST['op'] == 'Search') {
    $params = $_POST;
//    dpm($params, "params = \$_POST");
  }
  else {
    $params = $_GET;
    unset($params['q']);
    unset($params['page']);
//    dpm($params, "params = \$_GET");
  }

//  dpm($params, 'params at beginning of moonmars_groups_search_form');
//  dpm($_SESSION['group_search'], "\$_SESSION['group_search'] at beginning of moonmars_groups_search_form");

  // If we have search params then do a new search, otherwise we'll just display results from the previous search.
  if ($params) {
    $_SESSION['group_search']['results'] = moonmars_groups_search($params);
//    dpm($_SESSION['group_search'], "\$_SESSION['group_search'] after search");
  }

  // Get the page number:
  $_SESSION['group_search']['page'] = isset($_GET['page']) ? ((int) $_GET['page']) : 0;
//  dpm($_SESSION['group_search']['page'], "Setting page to");

  // Clamp the page number:
  $n_pages = isset($_SESSION['group_search']['results']) ? (ceil(count($_SESSION['group_search']['results']) / MOONMARS_GROUP_SEARCH_PAGE_SIZE)) : 0;
  if ($_SESSION['group_search']['page'] < 0) {
    $_SESSION['group_search']['page'] = 0;
  }
  elseif ($n_pages && $_SESSION['group_search']['page'] >= $n_pages) {
    $_SESSION['group_search']['page'] = $n_pages - 1;
  }

  // Get the current member:
  $logged_in_member = Member::loggedInMember();

  // Create the form:
  $form = array();
  $form['title'] = array(
    '#value' => "<h2>Search groups</h2>",
  );
  $form['search'] = array(
    '#type' => 'fieldset',
  );
  $form['search']['text'] = array(
    '#type' => 'textfield',
    '#title' => "Name/description",
    '#description' => "Enter part of the name or description of the group.",
    '#default_value' => isset($_SESSION['group_search']['params']['text']) ? $_SESSION['group_search']['params']['text'] : '',
  );
  $form['search']['type'] = array(
    '#type' => 'checkboxes',
    '#title' => "Group type",
    '#description' => "Select one or more group types to search for.",
    '#options' => Group::groupTypes(),
    '#default_value' => isset($_SESSION['group_search']['params']['type']) ? $_SESSION['group_search']['params']['type'] : array(),
  );
  $form['search']['size'] = array(
    '#type' => 'select',
    '#title' => "Size",
    '#description' => "Select the group size.",
    '#options' => array(
      '- Any -',
      '0 - 9',
      '10 - 99',
      '100 - 999',
      '1,000 - 9,999',
    ),
    '#default_value' => isset($_SESSION['group_search']['params']['size']) ? $_SESSION['group_search']['params']['size'] : 0,
  );
  $form['search']['member'] = array(
    '#prefix' => "<div class='group-search-member'><label class='group-search-member-title'>Membership</label>",
    '#type' => 'textfield',
    '#title' => "Find groups that",
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($_SESSION['group_search']['params']['member']) ? $_SESSION['group_search']['params']['member'] : '',
  );
  $form['search']['is_in'] = array(
    '#type' => 'radios',
    '#options' => array(
      1 => "is",
      0 => "is not a member of.",
    ),
    '#default_value' => isset($_SESSION['group_search']['params']['is_in']) ? ((int) $_SESSION['group_search']['params']['is_in']) : 1,
    '#suffix' => "</div>",
  );
  $form['search']['clear'] = array(
    '#markup' => "<input type='button' class='form-button clear-button' value='Clear' onclick='clearGroupSearchForm()'>",
  );
  $form['search']['submit'] = array(
    '#type'  => 'submit',
    '#value' => "Search",
  );

  // If we have a current member, show checkboxes for the groups so they bulk join/leave:
  if ($logged_in_member) {
    for ($i = 0; $i < MOONMARS_GROUP_SEARCH_PAGE_SIZE; $i++) {
      $n = $_SESSION['group_search']['page'] * MOONMARS_GROUP_SEARCH_PAGE_SIZE + $i;

      // In case an overly high page number is passed as a querystring param:
      if (!isset($_SESSION['group_search']['results'][$n])) {
        break;
      }

      $group_nid = $_SESSION['group_search']['results'][$n];
      $group = Group::create($group_nid);

      // Join/leave checkbox:
      $form['group']["member-of-group-$group_nid"] = array(
        '#type' => 'checkbox',
        '#default_value' => $group->hasMember($logged_in_member),
      );
    }
  }

  $form['update'] = array(
    '#type' => 'submit',
    '#value' => "Update memberships",
    '#submit' => array('moonmars_groups_search_form_update'),
  );

  $form['#attached']['js'][] = drupal_get_path('module', 'moonmars_groups') . "/js/group-search.js";
  $form['#theme'] = 'moonmars_groups_search_form';

  return $form;
}

/**
 * Submit handler for groups search form.
 *
 * @param $form
 * @param $form_state
 */
function moonmars_groups_search_form_update($form, &$form_state) {
  $logged_in_member = Member::loggedInMember();

  // Look for "member-of-group" checkboxes:
  foreach ($form_state['values'] as $key => $value) {
    if (substr($key, 0, 15) == 'member-of-group') {
      $group_nid = (int) substr($key, 16);
      $group = Group::create($group_nid);

      if ($value && !$group->hasMember($logged_in_member)) {
        // If they're not a member but want to be, add them to the group:
        $logged_in_member->joinGroup($group);
      }
      elseif (!$value && $group->hasMember($logged_in_member)) {
        // If they're a member but don't want to be, remove them from the group:
        $logged_in_member->leaveGroup($group);
      }

    }
  }

  drupal_set_message("Your group memberships have been updated.");

  // Set the flag to redo the search:
  $_SESSION['group_search']['redo_search'] = TRUE;

//  dpm($_SERVER);
  // Reload the form:
  //drupal_goto('groups');

  // Go back to the page that was requested, with the querystring (which may include a page number).
//  $url_info = parse_url($_SERVER['REQUEST_URI'], PHP_URL_QUERY);
//
//  $info = drupal_parse_url($_SERVER['REQUEST_URI']);
//  dpm($info);


  $form_state['redirect'] = array(
    'groups',
    array(
      'query' => array(
        'page' => $_SESSION['group_search']['page'],
      ),
    ),
  );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Theming

/**
 * Implements hook_theme().
 *
 * @return array
 */
function moonmars_groups_theme() {
  return array(
    'moonmars_groups_search_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Theme the group search form.
 *
 * @param $vars
 * @return string
 */
function theme_moonmars_groups_search_form($vars) {
  $form = $vars['form'];
  $html = '';
  $html .= render($form['search']);
  $html .= "<h3>Search Results</h3>";

  // Create a table of results:
  $header = array(
    array(
      'data' => 'Group',
      'class' => array('groups-column-group'),
    ),
    array(
      'data' => 'Description',
      'class' => array('groups-column-desc'),
    ),
  );

  // If the user is logged in, add the member column:
  $logged_in_member = Member::loggedInMember();
  if ($logged_in_member) {
    $header[] =
      array(
        'data'  => "<input type='checkbox' id='groups-select-all'> Member?",
        'class' => array('groups-column-member'),
      );
  }

  $n_groups = isset($_SESSION['group_search']['results']) ? count($_SESSION['group_search']['results']) : 0;
  $html .= "<p>" . format_plural($n_groups, "1 group matches", "@count groups match") . " your search.</p>";

  if (isset($_SESSION['group_search']['results']) && $_SESSION['group_search']['results']) {

    // Search results:
    $types = Group::groupTypes();
    $rows = array();

    for ($i = 0; $i < MOONMARS_GROUP_SEARCH_PAGE_SIZE; $i++) {
      $n = $_SESSION['group_search']['page'] * MOONMARS_GROUP_SEARCH_PAGE_SIZE + $i;

      // In case an overly high page number is passed as a querystring param:
      if (!isset($_SESSION['group_search']['results'][$n])) {
        break;
      }

      $group_nid = $_SESSION['group_search']['results'][$n];
      $group = Group::create($group_nid);

      $description = "
        Type: <span class='group-type'>" . $types[$group->groupType()] . "</span><br>
        Member count: <span class='group-member-count'>" . $group->memberCount() . "</span><br>
        <div class='group-description'>" . $group->description() . "</span>";

      // Create the row:
      $row = array(
        array(
          'data'  => "<div class='group-link'>" . l($group->icon() . '<br>' . $group->title(), $group->alias(), array('html' => TRUE)) . "</div>",
          'class' => array('groups-column-group'),
        ),
        array(
          'data'  => $description,
          'class' => array('groups-column-desc'),
        ),
      );

      // If the user is logged in, add the member column:
      if ($logged_in_member) {
        $row[] = array(
          'data'  => render($form['group']["member-of-group-$group_nid"]),
          'class' => array('groups-column-member'),
        );
      }

      // Add the row to the table:
      $rows[] = $row;
    }

    // Render the table of groups:
    $html .= theme('table', array('header' => $header, 'rows' => $rows));

    // Update button:
    $html .= drupal_render_children($form);

    // Pager:
    $total_n_groups = count($_SESSION['group_search']['results']);
    pager_default_initialize($total_n_groups, MOONMARS_GROUP_SEARCH_PAGE_SIZE);
    $html .= theme('pager', array('quantity' => $total_n_groups));
  }

  return $html;
}
